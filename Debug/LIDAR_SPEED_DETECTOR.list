
LIDAR_SPEED_DETECTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080089b0  080089b0  000189b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008db4  08008db4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dbc  08008dbc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc0  08008dc0  00018dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200001d4  08008f98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08008f98  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f4a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7f  00000000  00000000  00035191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00037e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d60  00000000  00000000  00038f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b76e  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f93  00000000  00000000  0006542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010486d  00000000  00000000  0007b3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a18  00000000  00000000  0017fc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00185648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008998 	.word	0x08008998

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08008998 	.word	0x08008998

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f023 030f 	bic.w	r3, r3, #15
 8000ee4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 030c 	orr.w	r3, r3, #12
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f14:	f107 0208 	add.w	r2, r7, #8
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	214e      	movs	r1, #78	; 0x4e
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <lcd_send_cmd+0x5c>)
 8000f22:	f001 fa6b 	bl	80023fc <HAL_I2C_Master_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200001f0 	.word	0x200001f0

08000f34 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 030d 	orr.w	r3, r3, #13
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	f043 0309 	orr.w	r3, r3, #9
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	f043 030d 	orr.w	r3, r3, #13
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	f043 0309 	orr.w	r3, r3, #9
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f74:	f107 0208 	add.w	r2, r7, #8
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	214e      	movs	r1, #78	; 0x4e
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <lcd_send_data+0x5c>)
 8000f82:	f001 fa3b 	bl	80023fc <HAL_I2C_Master_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200001f0 	.word	0x200001f0

08000f94 <lcd_clear>:

void lcd_clear (void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f9a:	2080      	movs	r0, #128	; 0x80
 8000f9c:	f7ff ff9a 	bl	8000ed4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e005      	b.n	8000fb2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fa6:	2020      	movs	r0, #32
 8000fa8:	f7ff ffc4 	bl	8000f34 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b45      	cmp	r3, #69	; 0x45
 8000fb6:	ddf6      	ble.n	8000fa6 <lcd_clear+0x12>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <lcd_put_cur>:
	}
	lcd_put_cur(1, 0);
}

void lcd_put_cur(int row, int col)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <lcd_put_cur+0x18>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <lcd_put_cur+0x22>
 8000fd8:	e009      	b.n	8000fee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	603b      	str	r3, [r7, #0]
            break;
 8000fe2:	e004      	b.n	8000fee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fea:	603b      	str	r3, [r7, #0]
            break;
 8000fec:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff6e 	bl	8000ed4 <lcd_send_cmd>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <lcd_init>:


void lcd_init (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001004:	2032      	movs	r0, #50	; 0x32
 8001006:	f000 fea9 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x30);
 800100a:	2030      	movs	r0, #48	; 0x30
 800100c:	f7ff ff62 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001010:	2005      	movs	r0, #5
 8001012:	f000 fea3 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001016:	2030      	movs	r0, #48	; 0x30
 8001018:	f7ff ff5c 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fe9d 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001022:	2030      	movs	r0, #48	; 0x30
 8001024:	f7ff ff56 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fe97 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800102e:	2020      	movs	r0, #32
 8001030:	f7ff ff50 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f000 fe91 	bl	8001d5c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800103a:	2028      	movs	r0, #40	; 0x28
 800103c:	f7ff ff4a 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fe8b 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001046:	2008      	movs	r0, #8
 8001048:	f7ff ff44 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fe85 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff3e 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fe7f 	bl	8001d5c <HAL_Delay>
	HAL_Delay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 fe7c 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001064:	2006      	movs	r0, #6
 8001066:	f7ff ff35 	bl	8000ed4 <lcd_send_cmd>
	HAL_Delay(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 fe76 	bl	8001d5c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001070:	200c      	movs	r0, #12
 8001072:	f7ff ff2f 	bl	8000ed4 <lcd_send_cmd>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001082:	e006      	b.n	8001092 <lcd_send_string+0x18>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff51 	bl	8000f34 <lcd_send_data>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f4      	bne.n	8001084 <lcd_send_string+0xa>
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 fde3 	bl	8001c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f832 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 f98e 	bl	80013d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010b4:	f000 f8c2 	bl	800123c <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010b8:	f000 f95c 	bl	8001374 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80010bc:	f000 f90a 	bl	80012d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010c0:	f000 f87c 	bl	80011bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD Display

  lcd_init();
 80010c4:	f7ff ff9c 	bl	8001000 <lcd_init>

  lcd_clear();
 80010c8:	f7ff ff64 	bl	8000f94 <lcd_clear>

  lcd_put_cur(0, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff77 	bl	8000fc2 <lcd_put_cur>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  speedCalculate();					// Calculate Speed
 80010d4:	f000 fa70 	bl	80015b8 <speedCalculate>

	  lcd_send_string(speed_str);		// Print formated data to LCD Display
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <main+0x68>)
 80010da:	f7ff ffce 	bl	800107a <lcd_send_string>
	  lcd_put_cur(1,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ff6e 	bl	8000fc2 <lcd_put_cur>
	  lcd_send_string(dist_str);
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <main+0x6c>)
 80010e8:	f7ff ffc7 	bl	800107a <lcd_send_string>

	  HAL_Delay(300);					// Delay of 300 ms to prevent intense flickering of LCD
 80010ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010f0:	f000 fe34 	bl	8001d5c <HAL_Delay>

	  lcd_clear();						// Clear LCD Display
 80010f4:	f7ff ff4e 	bl	8000f94 <lcd_clear>
	  lcd_put_cur(0, 0);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ff61 	bl	8000fc2 <lcd_put_cur>

	  memset(speed_str, 0, sizeof(speed_str));			// Reset speed_str
 8001100:	2214      	movs	r2, #20
 8001102:	2100      	movs	r1, #0
 8001104:	4801      	ldr	r0, [pc, #4]	; (800110c <main+0x68>)
 8001106:	f005 fb4e 	bl	80067a6 <memset>
	  speedCalculate();					// Calculate Speed
 800110a:	e7e3      	b.n	80010d4 <main+0x30>
 800110c:	20000890 	.word	0x20000890
 8001110:	200008a4 	.word	0x200008a4

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b096      	sub	sp, #88	; 0x58
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2244      	movs	r2, #68	; 0x44
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fb3f 	bl	80067a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001136:	2000      	movs	r0, #0
 8001138:	f001 fe88 	bl	8002e4c <HAL_PWREx_ControlVoltageScaling>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001142:	f000 fab3 	bl	80016ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001146:	2322      	movs	r3, #34	; 0x22
 8001148:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2340      	movs	r3, #64	; 0x40
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001164:	231e      	movs	r3, #30
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f001 ff2b 	bl	8002fd4 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001184:	f000 fa92 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2303      	movs	r3, #3
 800118e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2105      	movs	r1, #5
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fb30 	bl	8003808 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ae:	f000 fa7d 	bl	80016ac <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	; 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	f001 f864 	bl	80022c4 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 fa53 	bl	80016ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C1_Init+0x74>)
 800120a:	f001 fc1f 	bl	8002a4c <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 fa4a 	bl	80016ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121c:	f001 fc61 	bl	8002ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fa41 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001f0 	.word	0x200001f0
 8001234:	40005400 	.word	0x40005400
 8001238:	107075b0 	.word	0x107075b0

0800123c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <MX_LPUART1_UART_Init+0x94>)
 8001244:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001286:	f003 fa95 	bl	80047b4 <HAL_UART_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 fa0c 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 8001298:	f004 f982 	bl	80055a0 <HAL_UARTEx_SetTxFifoThreshold>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f000 fa03 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 80012aa:	f004 f9b7 	bl	800561c <HAL_UARTEx_SetRxFifoThreshold>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b4:	f000 f9fa 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_LPUART1_UART_Init+0x90>)
 80012ba:	f004 f938 	bl	800552e <HAL_UARTEx_DisableFifoMode>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 f9f2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000244 	.word	0x20000244
 80012d0:	40008000 	.word	0x40008000

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <MX_USART2_UART_Init+0x9c>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_USART2_UART_Init+0x98>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_USART2_UART_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001318:	2210      	movs	r2, #16
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_USART2_UART_Init+0x98>)
 800131e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001326:	f003 fa45 	bl	80047b4 <HAL_UART_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 f9bc 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_USART2_UART_Init+0x98>)
 8001338:	f004 f932 	bl	80055a0 <HAL_UARTEx_SetTxFifoThreshold>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001342:	f000 f9b3 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <MX_USART2_UART_Init+0x98>)
 800134a:	f004 f967 	bl	800561c <HAL_UARTEx_SetRxFifoThreshold>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001354:	f000 f9aa 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_USART2_UART_Init+0x98>)
 800135a:	f004 f8e8 	bl	800552e <HAL_UARTEx_DisableFifoMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001364:	f000 f9a2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200002d8 	.word	0x200002d8
 8001370:	40004400 	.word	0x40004400

08001374 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800137e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	2206      	movs	r2, #6
 8001384:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001388:	2202      	movs	r2, #2
 800138a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	2202      	movs	r2, #2
 8001390:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001394:	2201      	movs	r2, #1
 8001396:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b8:	f001 fbdf 	bl	8002b7a <HAL_PCD_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 f973 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000036c 	.word	0x2000036c

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <MX_GPIO_Init+0x140>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a49      	ldr	r2, [pc, #292]	; (8001510 <MX_GPIO_Init+0x140>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <MX_GPIO_Init+0x140>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <MX_GPIO_Init+0x140>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a43      	ldr	r2, [pc, #268]	; (8001510 <MX_GPIO_Init+0x140>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <MX_GPIO_Init+0x140>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <MX_GPIO_Init+0x140>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <MX_GPIO_Init+0x140>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <MX_GPIO_Init+0x140>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <MX_GPIO_Init+0x140>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a37      	ldr	r2, [pc, #220]	; (8001510 <MX_GPIO_Init+0x140>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <MX_GPIO_Init+0x140>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001446:	f001 fdb5 	bl	8002fb4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x140>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_GPIO_Init+0x140>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0x140>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2109      	movs	r1, #9
 8001466:	482b      	ldr	r0, [pc, #172]	; (8001514 <MX_GPIO_Init+0x144>)
 8001468:	f000 ff14 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	4829      	ldr	r0, [pc, #164]	; (8001518 <MX_GPIO_Init+0x148>)
 8001472:	f000 ff0f 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_GPIO_Init+0x14c>)
 800147c:	f000 ff0a 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	481f      	ldr	r0, [pc, #124]	; (8001514 <MX_GPIO_Init+0x144>)
 8001498:	f000 fd6a 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800149c:	2309      	movs	r3, #9
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <MX_GPIO_Init+0x144>)
 80014b4:	f000 fd5c 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4813      	ldr	r0, [pc, #76]	; (8001518 <MX_GPIO_Init+0x148>)
 80014cc:	f000 fd50 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d0:	2340      	movs	r3, #64	; 0x40
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_GPIO_Init+0x148>)
 80014e8:	f000 fd42 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_GPIO_Init+0x14c>)
 8001504:	f000 fd34 	bl	8001f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800
 8001518:	48001800 	.word	0x48001800
 800151c:	48000400 	.word	0x48000400

08001520 <readLidarSensor>:

/* USER CODE BEGIN 4 */

int readLidarSensor(void)			// Reads data from LIDAR sensor and returns distance measurement
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	 * strict control of data size is required).
	 */

	int dist;

	memset(usart_rx_buf, 0, sizeof(usart_rx_buf));			// Clear the data buffer by setting to members to 0
 8001526:	2209      	movs	r2, #9
 8001528:	2100      	movs	r1, #0
 800152a:	4820      	ldr	r0, [pc, #128]	; (80015ac <readLidarSensor+0x8c>)
 800152c:	f005 f93b 	bl	80067a6 <memset>

	HAL_UART_Receive(&huart2, usart_rx_buf, 9, HAL_MAX_DELAY);			// Receive data from LIDAR sensor
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	2209      	movs	r2, #9
 8001536:	491d      	ldr	r1, [pc, #116]	; (80015ac <readLidarSensor+0x8c>)
 8001538:	481d      	ldr	r0, [pc, #116]	; (80015b0 <readLidarSensor+0x90>)
 800153a:	f003 fa1a 	bl	8004972 <HAL_UART_Receive>

	if (usart_rx_buf[1] == 0x59 && usart_rx_buf[2] == 0x59){			// Stackframe[1] and Stackframe[2] is 0x59
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <readLidarSensor+0x8c>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2b59      	cmp	r3, #89	; 0x59
 8001544:	d127      	bne.n	8001596 <readLidarSensor+0x76>
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <readLidarSensor+0x8c>)
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	2b59      	cmp	r3, #89	; 0x59
 800154c:	d123      	bne.n	8001596 <readLidarSensor+0x76>

		dist = usart_rx_buf[3] | (usart_rx_buf[4]<<8);			// Combines low 8 bit value and high 8 bit value for a 16 bit dist value
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <readLidarSensor+0x8c>)
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	461a      	mov	r2, r3
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <readLidarSensor+0x8c>)
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4313      	orrs	r3, r2
 800155c:	607b      	str	r3, [r7, #4]

		if (dist >= 18000){			//		 Reject values that are out of range of sensor
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f244 624f 	movw	r2, #17999	; 0x464f
 8001564:	4293      	cmp	r3, r2
 8001566:	dd0c      	ble.n	8001582 <readLidarSensor+0x62>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);		// Turn off green led and turn on red led
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <readLidarSensor+0x94>)
 800156e:	f000 fe91 	bl	8002294 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <readLidarSensor+0x94>)
 8001578:	f000 fe8c 	bl	8002294 <HAL_GPIO_WritePin>

			dist = 0;		// Set dist to default value of 0
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	e009      	b.n	8001596 <readLidarSensor+0x76>

		}else{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);		// Turn off red led and turn on green led
 8001582:	2200      	movs	r2, #0
 8001584:	2108      	movs	r1, #8
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <readLidarSensor+0x94>)
 8001588:	f000 fe84 	bl	8002294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <readLidarSensor+0x94>)
 8001592:	f000 fe7f 	bl	8002294 <HAL_GPIO_WritePin>

		}
	}
	memset(usart_rx_buf, 0, sizeof(usart_rx_buf));			// Clear the data buffer
 8001596:	2209      	movs	r2, #9
 8001598:	2100      	movs	r1, #0
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <readLidarSensor+0x8c>)
 800159c:	f005 f903 	bl	80067a6 <memset>
	return dist;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000878 	.word	0x20000878
 80015b0:	200002d8 	.word	0x200002d8
 80015b4:	48000800 	.word	0x48000800

080015b8 <speedCalculate>:


void speedCalculate(void)			// Calculates speed of moving object and formats string
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
	HAL_Delay(50);			// Delay to prevent garbage value from LIDAR sensor
 80015be:	2032      	movs	r0, #50	; 0x32
 80015c0:	f000 fbcc 	bl	8001d5c <HAL_Delay>

	distOne = readLidarSensor();			// Read initial distance from LIDAR sensor
 80015c4:	f7ff ffac 	bl	8001520 <readLidarSensor>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a26      	ldr	r2, [pc, #152]	; (8001664 <speedCalculate+0xac>)
 80015cc:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);			// Delay of 100 ms
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fbc4 	bl	8001d5c <HAL_Delay>
	HAL_Delay(50);
 80015d4:	2032      	movs	r0, #50	; 0x32
 80015d6:	f000 fbc1 	bl	8001d5c <HAL_Delay>

	distTwo =  readLidarSensor();			// Read second distance from LIDAR sensor
 80015da:	f7ff ffa1 	bl	8001520 <readLidarSensor>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <speedCalculate+0xb0>)
 80015e2:	6013      	str	r3, [r2, #0]

	distDiff = fabs((distTwo - distOne));			// Compute speed by taking difference of two distance measurements
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <speedCalculate+0xb0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <speedCalculate+0xac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffb0 	bl	8000554 <__aeabi_i2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff fac1 	bl	8000b88 <__aeabi_d2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <speedCalculate+0xb4>)
 800160a:	6013      	str	r3, [r2, #0]
	float speedVal = (distDiff/0.1f)/44.704f;			// Divide by 0.1 (100ms == 1s) and then divide by factor of 44.704 (cm/s -> mph)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <speedCalculate+0xb4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001670 <speedCalculate+0xb8>
 800161c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001620:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001674 <speedCalculate+0xbc>
 8001624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001628:	edc7 7a01 	vstr	s15, [r7, #4]

	snprintf(speed_str, sizeof(speed_str), "Speed: %.1f mph", speedVal);			// Produce formated strings
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe ffa3 	bl	8000578 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9cd 2300 	strd	r2, r3, [sp]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <speedCalculate+0xc0>)
 800163c:	2114      	movs	r1, #20
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <speedCalculate+0xc4>)
 8001640:	f005 f83a 	bl	80066b8 <sniprintf>
	snprintf(dist_str, sizeof(dist_str), "1: %d | 2: %d", distOne, distTwo);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <speedCalculate+0xac>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <speedCalculate+0xb0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <speedCalculate+0xc8>)
 8001652:	2114      	movs	r1, #20
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <speedCalculate+0xcc>)
 8001656:	f005 f82f 	bl	80066b8 <sniprintf>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bdb0      	pop	{r4, r5, r7, pc}
 8001662:	bf00      	nop
 8001664:	20000884 	.word	0x20000884
 8001668:	20000888 	.word	0x20000888
 800166c:	2000088c 	.word	0x2000088c
 8001670:	3dcccccd 	.word	0x3dcccccd
 8001674:	4232d0e5 	.word	0x4232d0e5
 8001678:	080089b0 	.word	0x080089b0
 800167c:	20000890 	.word	0x20000890
 8001680:	080089c0 	.word	0x080089c0
 8001684:	200008a4 	.word	0x200008a4

08001688 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2201      	movs	r2, #1
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <__io_putchar+0x20>)
 800169a:	f003 f8db 	bl	8004854 <HAL_UART_Transmit>

	return ch;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000244 	.word	0x20000244

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ae      	sub	sp, #184	; 0xb8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2294      	movs	r2, #148	; 0x94
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f005 f840 	bl	80067a6 <memset>
  if(hi2c->Instance==I2C1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <HAL_I2C_MspInit+0xb0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13b      	bne.n	80017a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001734:	2300      	movs	r3, #0
 8001736:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fb21 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff ffb0 	bl	80016ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001764:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_I2C_MspInit+0xb8>)
 800178c:	f000 fbf0 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_I2C_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	37b8      	adds	r7, #184	; 0xb8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0b0      	sub	sp, #192	; 0xc0
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2294      	movs	r2, #148	; 0x94
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 ffe2 	bl	80067a6 <memset>
  if(huart->Instance==LPUART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_UART_MspInit+0x138>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d13e      	bne.n	800186a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ec:	2320      	movs	r3, #32
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fac3 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001804:	f7ff ff52 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	4a3a      	ldr	r2, [pc, #232]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001838:	f001 fbbc 	bl	8002fb4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800183c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001860:	4619      	mov	r1, r3
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <HAL_UART_MspInit+0x140>)
 8001864:	f000 fb84 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001868:	e040      	b.n	80018ec <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_UART_MspInit+0x144>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d13b      	bne.n	80018ec <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fa7f 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800188c:	f7ff ff0e 	bl	80016ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c0:	230c      	movs	r3, #12
 80018c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d8:	2307      	movs	r3, #7
 80018da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f000 fb42 	bl	8001f70 <HAL_GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	37c0      	adds	r7, #192	; 0xc0
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40008000 	.word	0x40008000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48001800 	.word	0x48001800
 8001900:	40004400 	.word	0x40004400

08001904 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0b0      	sub	sp, #192	; 0xc0
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	2294      	movs	r2, #148	; 0x94
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f004 ff3e 	bl	80067a6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001932:	d16c      	bne.n	8001a0e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001938:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fa1d 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001950:	f7ff feac 	bl	80016ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800196c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001986:	230a      	movs	r3, #10
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f000 faeb 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800199a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f000 fada 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d114      	bne.n	8001a0a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80019f8:	f001 facc 	bl	8002f94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_PCD_MspInit+0x114>)
 8001a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a08:	e001      	b.n	8001a0e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001a0a:	f001 fac3 	bl	8002f94 <HAL_PWREx_EnableVddUSB>
}
 8001a0e:	bf00      	nop
 8001a10:	37c0      	adds	r7, #192	; 0xc0
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f958 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_kill>:

int _kill(int pid, int sig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8a:	f004 fedf 	bl	800684c <__errno>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2216      	movs	r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
  return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_exit>:

void _exit (int status)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffe7 	bl	8001a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab2:	e7fe      	b.n	8001ab2 <_exit+0x12>

08001ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac6:	f3af 8000 	nop.w
 8001aca:	4601      	mov	r1, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf0      	blt.n	8001ac6 <_read+0x12>
  }

  return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e009      	b.n	8001b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fdbd 	bl	8001688 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf1      	blt.n	8001b00 <_write+0x12>
  }
  return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_close>:

int _close(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_isatty>:

int _isatty(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f004 fe44 	bl	800684c <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200a0000 	.word	0x200a0000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	200008b8 	.word	0x200008b8
 8001bf8:	20000a10 	.word	0x20000a10

08001bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <SystemInit+0x20>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <SystemInit+0x20>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c24:	f7ff ffea 	bl	8001bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f004 fe03 	bl	8006858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c52:	f7ff fa27 	bl	80010a4 <main>

08001c56 <LoopForever>:

LoopForever:
    b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c64:	08008dc4 	.word	0x08008dc4
  ldr r2, =_sbss
 8001c68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c6c:	20000a0c 	.word	0x20000a0c

08001c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_IRQHandler>

08001c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f943 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f80e 	bl	8001ca4 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e001      	b.n	8001c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c94:	f7ff fd10 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_InitTick+0x6c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_InitTick+0x70>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_InitTick+0x6c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f941 	bl	8001f56 <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d809      	bhi.n	8001cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 f919 	bl	8001f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0x74>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e007      	b.n	8001d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e004      	b.n	8001d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e001      	b.n	8001d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	200008bc 	.word	0x200008bc

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200008bc 	.word	0x200008bc

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff47 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff5c 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffb0 	bl	8001ec4 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e166      	b.n	800224e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8158 	beq.w	8002248 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_GPIO_Init+0x40>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b03      	cmp	r3, #3
 800201c:	d017      	beq.n	800204e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d123      	bne.n	80020a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	6939      	ldr	r1, [r7, #16]
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0203 	and.w	r2, r3, #3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80b2 	beq.w	8002248 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e4:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_GPIO_Init+0x2fc>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_GPIO_Init+0x2fc>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6613      	str	r3, [r2, #96]	; 0x60
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_GPIO_Init+0x2fc>)
 80020f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020fc:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <HAL_GPIO_Init+0x300>)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002126:	d02b      	beq.n	8002180 <HAL_GPIO_Init+0x210>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_GPIO_Init+0x304>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d025      	beq.n	800217c <HAL_GPIO_Init+0x20c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_GPIO_Init+0x308>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d01f      	beq.n	8002178 <HAL_GPIO_Init+0x208>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a50      	ldr	r2, [pc, #320]	; (800227c <HAL_GPIO_Init+0x30c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d019      	beq.n	8002174 <HAL_GPIO_Init+0x204>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a4f      	ldr	r2, [pc, #316]	; (8002280 <HAL_GPIO_Init+0x310>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_Init+0x200>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_GPIO_Init+0x314>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_Init+0x1fc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a4d      	ldr	r2, [pc, #308]	; (8002288 <HAL_GPIO_Init+0x318>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_Init+0x1f8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a4c      	ldr	r2, [pc, #304]	; (800228c <HAL_GPIO_Init+0x31c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_Init+0x1f4>
 8002160:	2307      	movs	r3, #7
 8002162:	e00e      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002164:	2308      	movs	r3, #8
 8002166:	e00c      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002168:	2306      	movs	r3, #6
 800216a:	e00a      	b.n	8002182 <HAL_GPIO_Init+0x212>
 800216c:	2305      	movs	r3, #5
 800216e:	e008      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002170:	2304      	movs	r3, #4
 8002172:	e006      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002174:	2303      	movs	r3, #3
 8002176:	e004      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002178:	2302      	movs	r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x212>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_GPIO_Init+0x212>
 8002180:	2300      	movs	r3, #0
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	f002 0203 	and.w	r2, r2, #3
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	4093      	lsls	r3, r2
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002192:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x300>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_GPIO_Init+0x320>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c4:	4a32      	ldr	r2, [pc, #200]	; (8002290 <HAL_GPIO_Init+0x320>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_GPIO_Init+0x320>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_GPIO_Init+0x320>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_GPIO_Init+0x320>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_GPIO_Init+0x320>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_GPIO_Init+0x320>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002242:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_GPIO_Init+0x320>)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f ae91 	bne.w	8001f80 <HAL_GPIO_Init+0x10>
  }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000
 8002274:	48000400 	.word	0x48000400
 8002278:	48000800 	.word	0x48000800
 800227c:	48000c00 	.word	0x48000c00
 8002280:	48001000 	.word	0x48001000
 8002284:	48001400 	.word	0x48001400
 8002288:	48001800 	.word	0x48001800
 800228c:	48001c00 	.word	0x48001c00
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e08d      	b.n	80023f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fa08 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002314:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002324:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	e006      	b.n	800234c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800234a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d108      	bne.n	8002366 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e007      	b.n	8002376 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69d9      	ldr	r1, [r3, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	461a      	mov	r2, r3
 8002408:	460b      	mov	r3, r1
 800240a:	817b      	strh	r3, [r7, #10]
 800240c:	4613      	mov	r3, r2
 800240e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	f040 80fd 	bne.w	8002618 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2C_Master_Transmit+0x30>
 8002428:	2302      	movs	r3, #2
 800242a:	e0f6      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002434:	f7ff fc86 	bl	8001d44 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2319      	movs	r3, #25
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f914 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0e1      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	2bff      	cmp	r3, #255	; 0xff
 8002486:	d906      	bls.n	8002496 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	22ff      	movs	r2, #255	; 0xff
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800248e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e007      	b.n	80024a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d024      	beq.n	80024f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	8979      	ldrh	r1, [r7, #10]
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_I2C_Master_Transmit+0x228>)
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fa79 	bl	80029e8 <I2C_TransferConfig>
 80024f6:	e066      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_I2C_Master_Transmit+0x228>)
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa6e 	bl	80029e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800250c:	e05b      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	6a39      	ldr	r1, [r7, #32]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f8fd 	bl	8002712 <I2C_WaitOnTXISFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07b      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d034      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x1ca>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d130      	bne.n	80025c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2200      	movs	r2, #0
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f880 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e04d      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	2bff      	cmp	r3, #255	; 0xff
 8002586:	d90e      	bls.n	80025a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fa22 	bl	80029e8 <I2C_TransferConfig>
 80025a4:	e00f      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fa11 	bl	80029e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d19e      	bne.n	800250e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	6a39      	ldr	r1, [r7, #32]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f8e3 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e01a      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2220      	movs	r2, #32
 80025ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_I2C_Master_Transmit+0x22c>)
 80025f8:	400b      	ands	r3, r1
 80025fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	80002000 	.word	0x80002000
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d007      	beq.n	8002668 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	619a      	str	r2, [r3, #24]
  }
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002684:	e031      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d02d      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff fb59 	bl	8001d44 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d122      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d113      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d0be      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271e:	e033      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f87f 	bl	8002828 <I2C_IsErrorOccurred>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e031      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d025      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7ff fb02 	bl	8001d44 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11a      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d013      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1c4      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e02f      	b.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f838 	bl	8002828 <I2C_IsErrorOccurred>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e02d      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff fabf 	bl	8001d44 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11a      	bne.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d013      	beq.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e007      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d1c8      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d068      	beq.n	8002926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800285c:	e049      	b.n	80028f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d045      	beq.n	80028f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7ff fa6d 	bl	8001d44 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_IsErrorOccurred+0x54>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d13a      	bne.n	80028f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800288e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289e:	d121      	bne.n	80028e4 <I2C_IsErrorOccurred+0xbc>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a6:	d01d      	beq.n	80028e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d01a      	beq.n	80028e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028be:	f7ff fa41 	bl	8001d44 <HAL_GetTick>
 80028c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c4:	e00e      	b.n	80028e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028c6:	f7ff fa3d 	bl	8001d44 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b19      	cmp	r3, #25
 80028d2:	d907      	bls.n	80028e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80028e2:	e006      	b.n	80028f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d1e9      	bne.n	80028c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <I2C_IsErrorOccurred+0xe0>
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0aa      	beq.n	800285e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2220      	movs	r2, #32
 8002916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fe45 	bl	800262c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <I2C_IsErrorOccurred+0x1bc>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	4613      	mov	r3, r2
 80029f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	0d5b      	lsrs	r3, r3, #21
 8002a22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <I2C_TransferConfig+0x60>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	ea02 0103 	and.w	r1, r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	03ff63ff 	.word	0x03ff63ff

08002a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d138      	bne.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e032      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d139      	bne.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e033      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7c:	b08f      	sub	sp, #60	; 0x3c
 8002b7e:	af0a      	add	r7, sp, #40	; 0x28
 8002b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e116      	b.n	8002dba <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe feac 	bl	8001904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fdde 	bl	800578c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	687e      	ldr	r6, [r7, #4]
 8002bd8:	466d      	mov	r5, sp
 8002bda:	f106 0410 	add.w	r4, r6, #16
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bee:	1d33      	adds	r3, r6, #4
 8002bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f002 fd9e 	bl	8005734 <USB_CoreInit>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0d7      	b.n	8002dba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fdcc 	bl	80057ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e04a      	b.n	8002cb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	333d      	adds	r3, #61	; 0x3d
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	333c      	adds	r3, #60	; 0x3c
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	b298      	uxth	r0, r3
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3356      	adds	r3, #86	; 0x56
 8002c58:	4602      	mov	r2, r0
 8002c5a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3340      	adds	r3, #64	; 0x40
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3348      	adds	r3, #72	; 0x48
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334c      	adds	r3, #76	; 0x4c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3af      	bcc.n	8002c1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e044      	b.n	8002d4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3b5      	bcc.n	8002cc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	687e      	ldr	r6, [r7, #4]
 8002d5e:	466d      	mov	r5, sp
 8002d60:	f106 0410 	add.w	r4, r6, #16
 8002d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d74:	1d33      	adds	r3, r6, #4
 8002d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	f002 fd65 	bl	8005848 <USB_DevInit>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e014      	b.n	8002dba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f80a 	bl	8002dc2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 ff07 	bl	8005bc6 <USB_DevDisconnect>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	f043 0303 	orr.w	r3, r3, #3
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	d102      	bne.n	8002e24 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e22:	e00b      	b.n	8002e3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d102      	bne.n	8002e3a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e38:	e000      	b.n	8002e3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e3a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40007000 	.word	0x40007000

08002e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d141      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5a:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d131      	bne.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e68:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6e:	4a46      	ldr	r2, [pc, #280]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e88:	4b40      	ldr	r3, [pc, #256]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2232      	movs	r2, #50	; 0x32
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a3f      	ldr	r2, [pc, #252]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9b      	lsrs	r3, r3, #18
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9e:	e002      	b.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb2:	d102      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f2      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d158      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e057      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002edc:	e04d      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee4:	d141      	bne.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d131      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f0c:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2232      	movs	r2, #50	; 0x32
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2a:	e002      	b.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d102      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f2      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f52:	d112      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e011      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f68:	e007      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f78:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	6053      	str	r3, [r2, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc2:	6053      	str	r3, [r2, #4]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40007000 	.word	0x40007000

08002fd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f000 bc08 	b.w	80037f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe8:	4b96      	ldr	r3, [pc, #600]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff2:	4b94      	ldr	r3, [pc, #592]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80e4 	beq.w	80031d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_RCC_OscConfig+0x4c>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	f040 808b 	bne.w	800312e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	f040 8087 	bne.w	800312e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003020:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_OscConfig+0x64>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e3df      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_RCC_OscConfig+0x7e>
 8003048:	4b7e      	ldr	r3, [pc, #504]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003050:	e005      	b.n	800305e <HAL_RCC_OscConfig+0x8a>
 8003052:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305e:	4293      	cmp	r3, r2
 8003060:	d223      	bcs.n	80030aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fdcc 	bl	8003c04 <RCC_SetFlashLatencyFromMSIRange>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e3c0      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003076:	4b73      	ldr	r3, [pc, #460]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a72      	ldr	r2, [pc, #456]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	496d      	ldr	r1, [pc, #436]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003094:	4b6b      	ldr	r3, [pc, #428]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	4968      	ldr	r1, [pc, #416]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e025      	b.n	80030f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030aa:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a65      	ldr	r2, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4960      	ldr	r1, [pc, #384]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	495b      	ldr	r1, [pc, #364]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fd8c 	bl	8003c04 <RCC_SetFlashLatencyFromMSIRange>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e380      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f6:	f000 fcc1 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4950      	ldr	r1, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_RCC_OscConfig+0x278>)
 8003114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fdc2 	bl	8001ca4 <HAL_InitTick>
 8003120:	4603      	mov	r3, r0
 8003122:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d052      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	e364      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d032      	beq.n	800319c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003136:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a42      	ldr	r2, [pc, #264]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003142:	f7fe fdff 	bl	8001d44 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800314a:	f7fe fdfb 	bl	8001d44 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e34d      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a35      	ldr	r2, [pc, #212]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4930      	ldr	r1, [pc, #192]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	492b      	ldr	r1, [pc, #172]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
 800319a:	e01a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fdcc 	bl	8001d44 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b0:	f7fe fdc8 	bl	8001d44 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e31a      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1dc>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d073      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_OscConfig+0x21c>
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d10e      	bne.n	8003208 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d063      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2f0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d15f      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e2f7      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x24c>
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e025      	b.n	800326c <HAL_RCC_OscConfig+0x298>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d114      	bne.n	8003254 <HAL_RCC_OscConfig+0x280>
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a02      	ldr	r2, [pc, #8]	; (8003244 <HAL_RCC_OscConfig+0x270>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e013      	b.n	800326c <HAL_RCC_OscConfig+0x298>
 8003244:	40021000 	.word	0x40021000
 8003248:	080089d0 	.word	0x080089d0
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004
 8003254:	4ba0      	ldr	r3, [pc, #640]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a9f      	ldr	r2, [pc, #636]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b9d      	ldr	r3, [pc, #628]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a9c      	ldr	r2, [pc, #624]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fd66 	bl	8001d44 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fd62 	bl	8001d44 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e2b4      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x2a8>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fd52 	bl	8001d44 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fd4e 	bl	8001d44 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e2a0      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2d0>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d060      	beq.n	8003394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_OscConfig+0x310>
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d119      	bne.n	8003312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d116      	bne.n	8003312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e4:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_OscConfig+0x328>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e27d      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	4973      	ldr	r1, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003310:	e040      	b.n	8003394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d023      	beq.n	8003362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe fd0d 	bl	8001d44 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fd09 	bl	8001d44 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e25b      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	495f      	ldr	r1, [pc, #380]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	e018      	b.n	8003394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5c      	ldr	r2, [pc, #368]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fce9 	bl	8001d44 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7fe fce5 	bl	8001d44 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e237      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03c      	beq.n	800341a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe fcc4 	bl	8001d44 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fcc0 	bl	8001d44 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e212      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <HAL_RCC_OscConfig+0x3ec>
 80033e0:	e01b      	b.n	800341a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e8:	4a3b      	ldr	r2, [pc, #236]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe fca7 	bl	8001d44 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fe fca3 	bl	8001d44 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e1f5      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ef      	bne.n	80033fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a6 	beq.w	8003574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003450:	2301      	movs	r3, #1
 8003452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x508>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x508>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x508>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346c:	f7fe fc6a 	bl	8001d44 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fe fc66 	bl	8001d44 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1b8      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x508>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d108      	bne.n	80034ac <HAL_RCC_OscConfig+0x4d8>
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034aa:	e029      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d115      	bne.n	80034e0 <HAL_RCC_OscConfig+0x50c>
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <HAL_RCC_OscConfig+0x504>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	4b9d      	ldr	r3, [pc, #628]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	4a9c      	ldr	r2, [pc, #624]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f0:	4b99      	ldr	r3, [pc, #612]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	4a98      	ldr	r2, [pc, #608]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe fc1c 	bl	8001d44 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe fc18 	bl	8001d44 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e168      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003526:	4b8c      	ldr	r3, [pc, #560]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ed      	beq.n	8003510 <HAL_RCC_OscConfig+0x53c>
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fe fc05 	bl	8001d44 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe fc01 	bl	8001d44 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e151      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003554:	4b80      	ldr	r3, [pc, #512]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ed      	bne.n	800353e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	4a7a      	ldr	r2, [pc, #488]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03c      	beq.n	80035fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 800358a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe fbd4 	bl	8001d44 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a0:	f7fe fbd0 	bl	8001d44 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e122      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b2:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80035b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ef      	beq.n	80035a0 <HAL_RCC_OscConfig+0x5cc>
 80035c0:	e01b      	b.n	80035fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035c2:	4b65      	ldr	r3, [pc, #404]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80035c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c8:	4a63      	ldr	r2, [pc, #396]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe fbb7 	bl	8001d44 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035da:	f7fe fbb3 	bl	8001d44 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e105      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ec:	4b5a      	ldr	r3, [pc, #360]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80035ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ef      	bne.n	80035da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80f9 	beq.w	80037f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2b02      	cmp	r3, #2
 800360a:	f040 80cf 	bne.w	80037ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0203 	and.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	429a      	cmp	r2, r3
 8003620:	d12c      	bne.n	800367c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	3b01      	subs	r3, #1
 800362e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d123      	bne.n	800367c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d11b      	bne.n	800367c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d113      	bne.n	800367c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d109      	bne.n	800367c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d071      	beq.n	8003760 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d068      	beq.n	8003754 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003682:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800368e:	4b32      	ldr	r3, [pc, #200]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0ac      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2d      	ldr	r2, [pc, #180]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80036a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036aa:	f7fe fb4b 	bl	8001d44 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fb47 	bl	8001d44 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e099      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_RCC_OscConfig+0x788>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	0212      	lsls	r2, r2, #8
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036f2:	0852      	lsrs	r2, r2, #1
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0552      	lsls	r2, r2, #21
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370a:	06d2      	lsls	r2, r2, #27
 800370c:	430a      	orrs	r2, r1
 800370e:	4912      	ldr	r1, [pc, #72]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372c:	f7fe fb0a 	bl	8001d44 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fb06 	bl	8001d44 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e058      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_RCC_OscConfig+0x784>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003752:	e050      	b.n	80037f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04f      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
 8003758:	40021000 	.word	0x40021000
 800375c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d144      	bne.n	80037f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003784:	f7fe fade 	bl	8001d44 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fada 	bl	8001d44 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e02c      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x7b8>
 80037aa:	e024      	b.n	80037f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d01f      	beq.n	80037f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fac1 	bl	8001d44 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fabd 	bl	8001d44 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4905      	ldr	r1, [pc, #20]	; (8003800 <HAL_RCC_OscConfig+0x82c>)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x830>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e001      	b.n	80037f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e11d      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b90      	ldr	r3, [pc, #576]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	498b      	ldr	r1, [pc, #556]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e105      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	429a      	cmp	r2, r3
 800386a:	d908      	bls.n	800387e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	497b      	ldr	r1, [pc, #492]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d079      	beq.n	800397e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d11e      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003892:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0dc      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038a2:	f000 fa09 	bl	8003cb8 <RCC_GetSysClockFreqFromPLLSource>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4a70      	ldr	r2, [pc, #448]	; (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d946      	bls.n	800393c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038ae:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d140      	bne.n	800393c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ba:	4b6b      	ldr	r3, [pc, #428]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e035      	b.n	800393c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d8:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d115      	bne.n	8003910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b9      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0ad      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0a5      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003910:	f000 f8b4 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003914:	4603      	mov	r3, r0
 8003916:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d90f      	bls.n	800393c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800391c:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003928:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003936:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 0203 	bic.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4947      	ldr	r1, [pc, #284]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394e:	f7fe f9f9 	bl	8001d44 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003954:	e00a      	b.n	800396c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003956:	f7fe f9f5 	bl	8001d44 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e077      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 020c 	and.w	r2, r3, #12
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	429a      	cmp	r2, r3
 800397c:	d1eb      	bne.n	8003956 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d105      	bne.n	8003990 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d208      	bcs.n	80039be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	492b      	ldr	r1, [pc, #172]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d210      	bcs.n	80039ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 020f 	bic.w	r2, r3, #15
 80039d4:	4923      	ldr	r1, [pc, #140]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d001      	beq.n	80039ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e036      	b.n	8003a5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4918      	ldr	r1, [pc, #96]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a18:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4910      	ldr	r1, [pc, #64]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2c:	f000 f826 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	490c      	ldr	r1, [pc, #48]	; (8003a70 <HAL_RCC_ClockConfig+0x268>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x26c>)
 8003a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_ClockConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe f927 	bl	8001ca4 <HAL_InitTick>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	04c4b400 	.word	0x04c4b400
 8003a70:	080089d0 	.word	0x080089d0
 8003a74:	20000000 	.word	0x20000000
 8003a78:	20000004 	.word	0x20000004

08003a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d121      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d11e      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e005      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003acc:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e004      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b00:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d134      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0xac>
 8003b20:	e005      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003b24:	617b      	str	r3, [r7, #20]
      break;
 8003b26:	e005      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2a:	617b      	str	r3, [r7, #20]
      break;
 8003b2c:	e002      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	617b      	str	r3, [r7, #20]
      break;
 8003b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3301      	adds	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	fb03 f202 	mul.w	r2, r3, r2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	0e5b      	lsrs	r3, r3, #25
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	3301      	adds	r3, #1
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b74:	69bb      	ldr	r3, [r7, #24]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	080089e8 	.word	0x080089e8
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	007a1200 	.word	0x007a1200

08003b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	080089e0 	.word	0x080089e0

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bdc:	f7ff ffda 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0adb      	lsrs	r3, r3, #11
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	080089e0 	.word	0x080089e0

08003c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c1c:	f7ff f8f6 	bl	8002e0c <HAL_PWREx_GetVoltageRange>
 8003c20:	6178      	str	r0, [r7, #20]
 8003c22:	e014      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c3c:	f7ff f8e6 	bl	8002e0c <HAL_PWREx_GetVoltageRange>
 8003c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d10b      	bne.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d913      	bls.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c60:	d902      	bls.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c62:	2302      	movs	r3, #2
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e00d      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c68:	2301      	movs	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e00a      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b7f      	cmp	r3, #127	; 0x7f
 8003c72:	d902      	bls.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c74:	2302      	movs	r3, #2
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e004      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b70      	cmp	r3, #112	; 0x70
 8003c7e:	d101      	bne.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c80:	2301      	movs	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 020f 	bic.w	r2, r3, #15
 8003c8c:	4909      	ldr	r1, [pc, #36]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d001      	beq.n	8003ca6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cbe:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d00b      	beq.n	8003ce6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d825      	bhi.n	8003d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d008      	beq.n	8003cec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d11f      	bne.n	8003d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce2:	613b      	str	r3, [r7, #16]
    break;
 8003ce4:	e01f      	b.n	8003d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ce8:	613b      	str	r3, [r7, #16]
    break;
 8003cea:	e01c      	b.n	8003d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e005      	b.n	8003d14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d14:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	613b      	str	r3, [r7, #16]
    break;
 8003d1e:	e002      	b.n	8003d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
    break;
 8003d24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	3301      	adds	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	fb03 f202 	mul.w	r2, r3, r2
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d66:	683b      	ldr	r3, [r7, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40021000 	.word	0x40021000
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	007a1200 	.word	0x007a1200
 8003d80:	080089e8 	.word	0x080089e8

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d90:	2300      	movs	r3, #0
 8003d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d040      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d02a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d825      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d026      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d821      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d006      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d81d      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003dc4:	e018      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc6:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a88      	ldr	r2, [pc, #544]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd2:	e015      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fb02 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de4:	e00c      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3320      	adds	r3, #32
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fbed 	bl	80045cc <RCCEx_PLLSAI2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	74fb      	strb	r3, [r7, #19]
      break;
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e06:	4b79      	ldr	r3, [pc, #484]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e14:	4975      	ldr	r1, [pc, #468]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e1c:	e001      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d047      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d030      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d82a      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e42:	d02a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e48:	d824      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e54:	d81e      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	d010      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e60:	e018      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e62:	4b62      	ldr	r3, [pc, #392]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4a61      	ldr	r2, [pc, #388]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e6e:	e015      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fab4 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3320      	adds	r3, #32
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fb9f 	bl	80045cc <RCCEx_PLLSAI2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	74fb      	strb	r3, [r7, #19]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea2:	4b52      	ldr	r3, [pc, #328]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	494e      	ldr	r1, [pc, #312]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 809f 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	4a40      	ldr	r2, [pc, #256]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efe:	2301      	movs	r3, #1
 8003f00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd ff19 	bl	8001d44 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f14:	e009      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fd ff15 	bl	8001d44 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d902      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	74fb      	strb	r3, [r7, #19]
        break;
 8003f28:	e005      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ef      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15b      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01f      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d019      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f66:	4b21      	ldr	r3, [pc, #132]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f86:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d016      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fed4 	bl	8001d44 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fd fed0 	bl	8001d44 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d902      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8003fb6:	e006      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ec      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
 8003fea:	e005      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff8:	7c7b      	ldrb	r3, [r7, #17]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4ba0      	ldr	r3, [pc, #640]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4a9f      	ldr	r2, [pc, #636]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004016:	4b9a      	ldr	r3, [pc, #616]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 0203 	bic.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	4996      	ldr	r1, [pc, #600]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004038:	4b91      	ldr	r3, [pc, #580]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 020c 	bic.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	498e      	ldr	r1, [pc, #568]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405a:	4b89      	ldr	r3, [pc, #548]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4985      	ldr	r1, [pc, #532]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407c:	4b80      	ldr	r3, [pc, #512]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	497d      	ldr	r1, [pc, #500]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800409e:	4b78      	ldr	r3, [pc, #480]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	4974      	ldr	r1, [pc, #464]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c0:	4b6f      	ldr	r3, [pc, #444]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	496c      	ldr	r1, [pc, #432]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	4963      	ldr	r1, [pc, #396]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004112:	495b      	ldr	r1, [pc, #364]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004126:	4b56      	ldr	r3, [pc, #344]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	4952      	ldr	r1, [pc, #328]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	494a      	ldr	r1, [pc, #296]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800416a:	4b45      	ldr	r3, [pc, #276]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	4941      	ldr	r1, [pc, #260]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800418c:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	4939      	ldr	r1, [pc, #228]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d028      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	4930      	ldr	r1, [pc, #192]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041cc:	d106      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d8:	60d3      	str	r3, [r2, #12]
 80041da:	e011      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f8f9 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d04d      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004214:	d108      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004222:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004226:	e012      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422e:	4a14      	ldr	r2, [pc, #80]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004234:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004246:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004256:	d106      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e020      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426e:	d109      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a02      	ldr	r2, [pc, #8]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427a:	60d3      	str	r3, [r2, #12]
 800427c:	e014      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f8a5 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b4:	4b4a      	ldr	r3, [pc, #296]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c2:	4947      	ldr	r1, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a41      	ldr	r2, [pc, #260]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
 80042e0:	e011      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f876 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01e      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004312:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004322:	492f      	ldr	r1, [pc, #188]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004334:	d10c      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f851 	bl	80043e4 <RCCEx_PLLSAI1_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004362:	f023 0204 	bic.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	491c      	ldr	r1, [pc, #112]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004386:	f023 0218 	bic.w	r2, r3, #24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	4913      	ldr	r1, [pc, #76]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b4:	490a      	ldr	r1, [pc, #40]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c6:	d105      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000

080043e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043f2:	4b72      	ldr	r3, [pc, #456]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00e      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043fe:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0203 	and.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d103      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
       ||
 8004412:	2b00      	cmp	r3, #0
 8004414:	d142      	bne.n	800449c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e03f      	b.n	800449c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d018      	beq.n	8004456 <RCCEx_PLLSAI1_Config+0x72>
 8004424:	2b03      	cmp	r3, #3
 8004426:	d825      	bhi.n	8004474 <RCCEx_PLLSAI1_Config+0x90>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x4e>
 800442c:	2b02      	cmp	r3, #2
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x60>
 8004430:	e020      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004432:	4b62      	ldr	r3, [pc, #392]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e01a      	b.n	800447a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004444:	4b5d      	ldr	r3, [pc, #372]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004454:	e013      	b.n	800447e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4b56      	ldr	r3, [pc, #344]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004472:	e006      	b.n	8004482 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004482:	bf00      	nop
    }

    if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4949      	ldr	r1, [pc, #292]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8086 	bne.w	80045b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044a4:	4b45      	ldr	r3, [pc, #276]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a44      	ldr	r2, [pc, #272]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fd fc48 	bl	8001d44 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b6:	e009      	b.n	80044cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b8:	f7fd fc44 	bl	8001d44 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d902      	bls.n	80044cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ca:	e005      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ef      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d168      	bne.n	80045b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e4:	4b35      	ldr	r3, [pc, #212]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	0211      	lsls	r1, r2, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	06d2      	lsls	r2, r2, #27
 80044f8:	4311      	orrs	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6852      	ldr	r2, [r2, #4]
 80044fe:	3a01      	subs	r2, #1
 8004500:	0112      	lsls	r2, r2, #4
 8004502:	430a      	orrs	r2, r1
 8004504:	492d      	ldr	r1, [pc, #180]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004506:	4313      	orrs	r3, r2
 8004508:	610b      	str	r3, [r1, #16]
 800450a:	e02d      	b.n	8004568 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d115      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	0211      	lsls	r1, r2, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6912      	ldr	r2, [r2, #16]
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	3a01      	subs	r2, #1
 8004528:	0552      	lsls	r2, r2, #21
 800452a:	4311      	orrs	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6852      	ldr	r2, [r2, #4]
 8004530:	3a01      	subs	r2, #1
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	430a      	orrs	r2, r1
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	610b      	str	r3, [r1, #16]
 800453c:	e014      	b.n	8004568 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6952      	ldr	r2, [r2, #20]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0652      	lsls	r2, r2, #25
 8004556:	4311      	orrs	r1, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6852      	ldr	r2, [r2, #4]
 800455c:	3a01      	subs	r2, #1
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	430a      	orrs	r2, r1
 8004562:	4916      	ldr	r1, [pc, #88]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800456e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fd fbe6 	bl	8001d44 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800457a:	e009      	b.n	8004590 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800457c:	f7fd fbe2 	bl	8001d44 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d902      	bls.n	8004590 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	73fb      	strb	r3, [r7, #15]
          break;
 800458e:	e005      	b.n	800459c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ef      	beq.n	800457c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	07ff800f 	.word	0x07ff800f
 80045c4:	ff9f800f 	.word	0xff9f800f
 80045c8:	f9ff800f 	.word	0xf9ff800f

080045cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045da:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045e6:	4b6f      	ldr	r3, [pc, #444]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d103      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
       ||
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d142      	bne.n	8004684 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e03f      	b.n	8004684 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d018      	beq.n	800463e <RCCEx_PLLSAI2_Config+0x72>
 800460c:	2b03      	cmp	r3, #3
 800460e:	d825      	bhi.n	800465c <RCCEx_PLLSAI2_Config+0x90>
 8004610:	2b01      	cmp	r3, #1
 8004612:	d002      	beq.n	800461a <RCCEx_PLLSAI2_Config+0x4e>
 8004614:	2b02      	cmp	r3, #2
 8004616:	d009      	beq.n	800462c <RCCEx_PLLSAI2_Config+0x60>
 8004618:	e020      	b.n	800465c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800461a:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11d      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462a:	e01a      	b.n	8004662 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800462c:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e013      	b.n	8004666 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800463e:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800464a:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800465a:	e006      	b.n	800466a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e004      	b.n	800466c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800466a:	bf00      	nop
    }

    if(status == HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004672:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4949      	ldr	r1, [pc, #292]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 8086 	bne.w	8004798 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd fb54 	bl	8001d44 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800469e:	e009      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a0:	f7fd fb50 	bl	8001d44 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d902      	bls.n	80046b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
        break;
 80046b2:	e005      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b4:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ef      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d168      	bne.n	8004798 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d113      	bne.n	80046f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046cc:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	0211      	lsls	r1, r2, #8
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	06d2      	lsls	r2, r2, #27
 80046e0:	4311      	orrs	r1, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	3a01      	subs	r2, #1
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	430a      	orrs	r2, r1
 80046ec:	492d      	ldr	r1, [pc, #180]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	614b      	str	r3, [r1, #20]
 80046f2:	e02d      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d115      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fa:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	0211      	lsls	r1, r2, #8
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6912      	ldr	r2, [r2, #16]
 800470c:	0852      	lsrs	r2, r2, #1
 800470e:	3a01      	subs	r2, #1
 8004710:	0552      	lsls	r2, r2, #21
 8004712:	4311      	orrs	r1, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6852      	ldr	r2, [r2, #4]
 8004718:	3a01      	subs	r2, #1
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	430a      	orrs	r2, r1
 800471e:	4921      	ldr	r1, [pc, #132]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004720:	4313      	orrs	r3, r2
 8004722:	614b      	str	r3, [r1, #20]
 8004724:	e014      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6892      	ldr	r2, [r2, #8]
 8004732:	0211      	lsls	r1, r2, #8
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6952      	ldr	r2, [r2, #20]
 8004738:	0852      	lsrs	r2, r2, #1
 800473a:	3a01      	subs	r2, #1
 800473c:	0652      	lsls	r2, r2, #25
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6852      	ldr	r2, [r2, #4]
 8004744:	3a01      	subs	r2, #1
 8004746:	0112      	lsls	r2, r2, #4
 8004748:	430a      	orrs	r2, r1
 800474a:	4916      	ldr	r1, [pc, #88]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd faf2 	bl	8001d44 <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004762:	e009      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004764:	f7fd faee 	bl	8001d44 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d902      	bls.n	8004778 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	73fb      	strb	r3, [r7, #15]
          break;
 8004776:	e005      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ef      	beq.n	8004764 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	4904      	ldr	r1, [pc, #16]	; (80047a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	07ff800f 	.word	0x07ff800f
 80047ac:	ff9f800f 	.word	0xff9f800f
 80047b0:	f9ff800f 	.word	0xf9ff800f

080047b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e042      	b.n	800484c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fc ffef 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fc7c 	bl	80050fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f97d 	bl	8004b04 <UART_SetConfig>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e01b      	b.n	800484c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fcfb 	bl	8005240 <UART_CheckIdleState>
 800484a:	4603      	mov	r3, r0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	2b20      	cmp	r3, #32
 800486c:	d17c      	bne.n	8004968 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_UART_Transmit+0x26>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e075      	b.n	800496a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2221      	movs	r2, #33	; 0x21
 800488a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800488e:	f7fd fa59 	bl	8001d44 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d108      	bne.n	80048c0 <HAL_UART_Transmit+0x6c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e003      	b.n	80048c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048c8:	e031      	b.n	800492e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2180      	movs	r1, #128	; 0x80
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fd5d 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e03e      	b.n	800496a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048fe:	b292      	uxth	r2, r2
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	3302      	adds	r3, #2
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e008      	b.n	800491c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	b292      	uxth	r2, r2
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3301      	adds	r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1c7      	bne.n	80048ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fd25 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08a      	sub	sp, #40	; 0x28
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004988:	2b20      	cmp	r3, #32
 800498a:	f040 80b6 	bne.w	8004afa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Receive+0x28>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0ae      	b.n	8004afc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2222      	movs	r2, #34	; 0x22
 80049aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b4:	f7fd f9c6 	bl	8001d44 <HAL_GetTick>
 80049b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d10e      	bne.n	80049f2 <HAL_UART_Receive+0x80>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_UART_Receive+0x76>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e6:	e02d      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	22ff      	movs	r2, #255	; 0xff
 80049ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049f0:	e028      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <HAL_UART_Receive+0xa4>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_UART_Receive+0x9a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a0a:	e01b      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a14:	e016      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1e:	d10d      	bne.n	8004a3c <HAL_UART_Receive+0xca>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_UART_Receive+0xc0>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	227f      	movs	r2, #127	; 0x7f
 8004a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a30:	e008      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a3a:	e003      	b.n	8004a44 <HAL_UART_Receive+0xd2>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d108      	bne.n	8004a68 <HAL_UART_Receive+0xf6>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	e003      	b.n	8004a70 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a70:	e037      	b.n	8004ae2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fc89 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e033      	b.n	8004afc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10c      	bne.n	8004ab4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	8a7b      	ldrh	r3, [r7, #18]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e00d      	b.n	8004ad0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	8a7b      	ldrh	r3, [r7, #18]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1c1      	bne.n	8004a72 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b08c      	sub	sp, #48	; 0x30
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4baa      	ldr	r3, [pc, #680]	; (8004ddc <UART_SetConfig+0x2d8>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a9f      	ldr	r2, [pc, #636]	; (8004de0 <UART_SetConfig+0x2dc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f023 010f 	bic.w	r1, r3, #15
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a90      	ldr	r2, [pc, #576]	; (8004de4 <UART_SetConfig+0x2e0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d125      	bne.n	8004bf4 <UART_SetConfig+0xf0>
 8004ba8:	4b8f      	ldr	r3, [pc, #572]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d81a      	bhi.n	8004bec <UART_SetConfig+0xe8>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0xb8>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bdd 	.word	0x08004bdd
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be5 	.word	0x08004be5
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	e116      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bda:	e112      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e10e      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bea:	e10a      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e106      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7c      	ldr	r2, [pc, #496]	; (8004dec <UART_SetConfig+0x2e8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d138      	bne.n	8004c70 <UART_SetConfig+0x16c>
 8004bfe:	4b7a      	ldr	r3, [pc, #488]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d82d      	bhi.n	8004c68 <UART_SetConfig+0x164>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <UART_SetConfig+0x110>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c49 	.word	0x08004c49
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c69 	.word	0x08004c69
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c51 	.word	0x08004c51
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e0d8      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e0d4      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e0d0      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e0cc      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e0c8      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5e      	ldr	r2, [pc, #376]	; (8004df0 <UART_SetConfig+0x2ec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d125      	bne.n	8004cc6 <UART_SetConfig+0x1c2>
 8004c7a:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d016      	beq.n	8004cb6 <UART_SetConfig+0x1b2>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d818      	bhi.n	8004cbe <UART_SetConfig+0x1ba>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d00a      	beq.n	8004ca6 <UART_SetConfig+0x1a2>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d814      	bhi.n	8004cbe <UART_SetConfig+0x1ba>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <UART_SetConfig+0x19a>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d008      	beq.n	8004cae <UART_SetConfig+0x1aa>
 8004c9c:	e00f      	b.n	8004cbe <UART_SetConfig+0x1ba>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca4:	e0ad      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cac:	e0a9      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb4:	e0a5      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbc:	e0a1      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc4:	e09d      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <UART_SetConfig+0x2f0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d125      	bne.n	8004d1c <UART_SetConfig+0x218>
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cda:	2bc0      	cmp	r3, #192	; 0xc0
 8004cdc:	d016      	beq.n	8004d0c <UART_SetConfig+0x208>
 8004cde:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce0:	d818      	bhi.n	8004d14 <UART_SetConfig+0x210>
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d00a      	beq.n	8004cfc <UART_SetConfig+0x1f8>
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d814      	bhi.n	8004d14 <UART_SetConfig+0x210>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <UART_SetConfig+0x1f0>
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d008      	beq.n	8004d04 <UART_SetConfig+0x200>
 8004cf2:	e00f      	b.n	8004d14 <UART_SetConfig+0x210>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e082      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e07e      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d04:	2304      	movs	r3, #4
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	e07a      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e076      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d14:	2310      	movs	r3, #16
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e072      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a35      	ldr	r2, [pc, #212]	; (8004df8 <UART_SetConfig+0x2f4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d12a      	bne.n	8004d7c <UART_SetConfig+0x278>
 8004d26:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d34:	d01a      	beq.n	8004d6c <UART_SetConfig+0x268>
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0x270>
 8004d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d40:	d00c      	beq.n	8004d5c <UART_SetConfig+0x258>
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d46:	d815      	bhi.n	8004d74 <UART_SetConfig+0x270>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x250>
 8004d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d50:	d008      	beq.n	8004d64 <UART_SetConfig+0x260>
 8004d52:	e00f      	b.n	8004d74 <UART_SetConfig+0x270>
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e052      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e04e      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	e04a      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d72:	e046      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	e042      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <UART_SetConfig+0x2dc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d13a      	bne.n	8004dfc <UART_SetConfig+0x2f8>
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <UART_SetConfig+0x2e4>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d94:	d01a      	beq.n	8004dcc <UART_SetConfig+0x2c8>
 8004d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d9a:	d81b      	bhi.n	8004dd4 <UART_SetConfig+0x2d0>
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da0:	d00c      	beq.n	8004dbc <UART_SetConfig+0x2b8>
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da6:	d815      	bhi.n	8004dd4 <UART_SetConfig+0x2d0>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <UART_SetConfig+0x2b0>
 8004dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db0:	d008      	beq.n	8004dc4 <UART_SetConfig+0x2c0>
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x2d0>
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dba:	e022      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc2:	e01e      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dca:	e01a      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd2:	e016      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dda:	e012      	b.n	8004e02 <UART_SetConfig+0x2fe>
 8004ddc:	cfff69f3 	.word	0xcfff69f3
 8004de0:	40008000 	.word	0x40008000
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40004400 	.word	0x40004400
 8004df0:	40004800 	.word	0x40004800
 8004df4:	40004c00 	.word	0x40004c00
 8004df8:	40005000 	.word	0x40005000
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4aae      	ldr	r2, [pc, #696]	; (80050c0 <UART_SetConfig+0x5bc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	f040 8097 	bne.w	8004f3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d823      	bhi.n	8004e5e <UART_SetConfig+0x35a>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0x318>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e4f 	.word	0x08004e4f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e5f 	.word	0x08004e5f
 8004e38:	08004e5f 	.word	0x08004e5f
 8004e3c:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe feb4 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8004e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e46:	e010      	b.n	8004e6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b9e      	ldr	r3, [pc, #632]	; (80050c4 <UART_SetConfig+0x5c0>)
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e4c:	e00d      	b.n	8004e6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7fe fe15 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e54:	e009      	b.n	8004e6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e5c:	e005      	b.n	8004e6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8130 	beq.w	80050d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	4a94      	ldr	r2, [pc, #592]	; (80050c8 <UART_SetConfig+0x5c4>)
 8004e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d305      	bcc.n	8004ea2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d903      	bls.n	8004eaa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ea8:	e113      	b.n	80050d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2200      	movs	r2, #0
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	60fa      	str	r2, [r7, #12]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	4a84      	ldr	r2, [pc, #528]	; (80050c8 <UART_SetConfig+0x5c4>)
 8004eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ecc:	f7fb fe84 	bl	8000bd8 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	020b      	lsls	r3, r1, #8
 8004ee2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ee6:	0202      	lsls	r2, r0, #8
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	6849      	ldr	r1, [r1, #4]
 8004eec:	0849      	lsrs	r1, r1, #1
 8004eee:	2000      	movs	r0, #0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	eb12 0804 	adds.w	r8, r2, r4
 8004ef8:	eb43 0905 	adc.w	r9, r3, r5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	469a      	mov	sl, r3
 8004f04:	4693      	mov	fp, r2
 8004f06:	4652      	mov	r2, sl
 8004f08:	465b      	mov	r3, fp
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fe63 	bl	8000bd8 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4613      	mov	r3, r2
 8004f18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f20:	d308      	bcc.n	8004f34 <UART_SetConfig+0x430>
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f28:	d204      	bcs.n	8004f34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	60da      	str	r2, [r3, #12]
 8004f32:	e0ce      	b.n	80050d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f3a:	e0ca      	b.n	80050d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f44:	d166      	bne.n	8005014 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d827      	bhi.n	8004f9e <UART_SetConfig+0x49a>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x450>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004f9f 	.word	0x08004f9f
 8004f64:	08004f8f 	.word	0x08004f8f
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f9f 	.word	0x08004f9f
 8004f70:	08004f9f 	.word	0x08004f9f
 8004f74:	08004f97 	.word	0x08004f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7fe fe18 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8004f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f7e:	e014      	b.n	8004faa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f80:	f7fe fe2a 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f88:	4b4e      	ldr	r3, [pc, #312]	; (80050c4 <UART_SetConfig+0x5c0>)
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f8c:	e00d      	b.n	8004faa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8e:	f7fe fd75 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8004f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f94:	e009      	b.n	8004faa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f9c:	e005      	b.n	8004faa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8090 	beq.w	80050d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	4a44      	ldr	r2, [pc, #272]	; (80050c8 <UART_SetConfig+0x5c4>)
 8004fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc4:	005a      	lsls	r2, r3, #1
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	441a      	add	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	d916      	bls.n	800500c <UART_SetConfig+0x508>
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d212      	bcs.n	800500c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f023 030f 	bic.w	r3, r3, #15
 8004fee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	8bfb      	ldrh	r3, [r7, #30]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	8bfa      	ldrh	r2, [r7, #30]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	e062      	b.n	80050d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005012:	e05e      	b.n	80050d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005014:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005018:	2b08      	cmp	r3, #8
 800501a:	d828      	bhi.n	800506e <UART_SetConfig+0x56a>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x520>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505f 	.word	0x0800505f
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800506f 	.word	0x0800506f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7fe fdb0 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800504e:	e014      	b.n	800507a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe fdc2 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8005054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005056:	e010      	b.n	800507a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <UART_SetConfig+0x5c0>)
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800505c:	e00d      	b.n	800507a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe fd0d 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8005062:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005064:	e009      	b.n	800507a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800506c:	e005      	b.n	800507a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005078:	bf00      	nop
    }

    if (pclk != 0U)
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d028      	beq.n	80050d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <UART_SetConfig+0x5c4>)
 8005086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508a:	461a      	mov	r2, r3
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	441a      	add	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d910      	bls.n	80050cc <UART_SetConfig+0x5c8>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d20c      	bcs.n	80050cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e009      	b.n	80050d2 <UART_SetConfig+0x5ce>
 80050be:	bf00      	nop
 80050c0:	40008000 	.word	0x40008000
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	08008a18 	.word	0x08008a18
      }
      else
      {
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2201      	movs	r2, #1
 80050de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80050ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3730      	adds	r7, #48	; 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01a      	beq.n	8005212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fa:	d10a      	bne.n	8005212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b098      	sub	sp, #96	; 0x60
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005250:	f7fc fd78 	bl	8001d44 <HAL_GetTick>
 8005254:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d12f      	bne.n	80052c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526c:	2200      	movs	r2, #0
 800526e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f88e 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d022      	beq.n	80052c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005292:	653b      	str	r3, [r7, #80]	; 0x50
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529c:	647b      	str	r3, [r7, #68]	; 0x44
 800529e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e6      	bne.n	800527e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e063      	b.n	800538c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d149      	bne.n	8005366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052da:	2200      	movs	r2, #0
 80052dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f857 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d03c      	beq.n	8005366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	623b      	str	r3, [r7, #32]
   return(result);
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
 800530c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	60fb      	str	r3, [r7, #12]
   return(result);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	64bb      	str	r3, [r7, #72]	; 0x48
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533e:	61fa      	str	r2, [r7, #28]
 8005340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69b9      	ldr	r1, [r7, #24]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	617b      	str	r3, [r7, #20]
   return(result);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e012      	b.n	800538c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3758      	adds	r7, #88	; 0x58
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	e049      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d045      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fc fcc9 	bl	8001d44 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e048      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d031      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d110      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f838 	bl	8005462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2208      	movs	r2, #8
 80053f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e029      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005414:	d111      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800541e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f81e 	bl	8005462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d0a6      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005462:	b480      	push	{r7}
 8005464:	b095      	sub	sp, #84	; 0x54
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	643b      	str	r3, [r7, #64]	; 0x40
 800548a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800548e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e3      	bne.n	800549c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d118      	bne.n	800550e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0310 	bic.w	r3, r3, #16
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	613b      	str	r3, [r7, #16]
   return(result);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e6      	bne.n	80054dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005522:	bf00      	nop
 8005524:	3754      	adds	r7, #84	; 0x54
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_UARTEx_DisableFifoMode+0x16>
 8005540:	2302      	movs	r3, #2
 8005542:	e027      	b.n	8005594 <HAL_UARTEx_DisableFifoMode+0x66>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	; 0x24
 8005550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e02d      	b.n	8005614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f84f 	bl	8005698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005630:	2302      	movs	r3, #2
 8005632:	e02d      	b.n	8005690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2224      	movs	r2, #36	; 0x24
 8005640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f811 	bl	8005698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056b8:	e031      	b.n	800571e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ba:	2308      	movs	r3, #8
 80056bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056be:	2308      	movs	r3, #8
 80056c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	0e5b      	lsrs	r3, r3, #25
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	0f5b      	lsrs	r3, r3, #29
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	7b3a      	ldrb	r2, [r7, #12]
 80056e6:	4911      	ldr	r1, [pc, #68]	; (800572c <UARTEx_SetNbDataToProcess+0x94>)
 80056e8:	5c8a      	ldrb	r2, [r1, r2]
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ee:	7b3a      	ldrb	r2, [r7, #12]
 80056f0:	490f      	ldr	r1, [pc, #60]	; (8005730 <UARTEx_SetNbDataToProcess+0x98>)
 80056f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	7b7a      	ldrb	r2, [r7, #13]
 8005704:	4909      	ldr	r1, [pc, #36]	; (800572c <UARTEx_SetNbDataToProcess+0x94>)
 8005706:	5c8a      	ldrb	r2, [r1, r2]
 8005708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800570c:	7b7a      	ldrb	r2, [r7, #13]
 800570e:	4908      	ldr	r1, [pc, #32]	; (8005730 <UARTEx_SetNbDataToProcess+0x98>)
 8005710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005712:	fb93 f3f2 	sdiv	r3, r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	08008a30 	.word	0x08008a30
 8005730:	08008a38 	.word	0x08008a38

08005734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005734:	b084      	sub	sp, #16
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	f107 001c 	add.w	r0, r7, #28
 8005742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa66 	bl	8005c24 <USB_CoreReset>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
 800576e:	e005      	b.n	800577c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005788:	b004      	add	sp, #16
 800578a:	4770      	bx	lr

0800578c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 0201 	bic.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d115      	bne.n	80057fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057dc:	2001      	movs	r0, #1
 80057de:	f7fc fabd 	bl	8001d5c <HAL_Delay>
      ms++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa0d 	bl	8005c08 <USB_GetMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d01e      	beq.n	8005832 <USB_SetCurrentMode+0x84>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b31      	cmp	r3, #49	; 0x31
 80057f8:	d9f0      	bls.n	80057dc <USB_SetCurrentMode+0x2e>
 80057fa:	e01a      	b.n	8005832 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d115      	bne.n	800582e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800580e:	2001      	movs	r0, #1
 8005810:	f7fc faa4 	bl	8001d5c <HAL_Delay>
      ms++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9f4 	bl	8005c08 <USB_GetMode>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <USB_SetCurrentMode+0x84>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b31      	cmp	r3, #49	; 0x31
 800582a:	d9f0      	bls.n	800580e <USB_SetCurrentMode+0x60>
 800582c:	e001      	b.n	8005832 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e005      	b.n	800583e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b32      	cmp	r3, #50	; 0x32
 8005836:	d101      	bne.n	800583c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005848:	b084      	sub	sp, #16
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e009      	b.n	800587c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3340      	adds	r3, #64	; 0x40
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b0e      	cmp	r3, #14
 8005880:	d9f2      	bls.n	8005868 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11c      	bne.n	80058c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e005      	b.n	80058ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058da:	2103      	movs	r1, #3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f959 	bl	8005b94 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058e2:	2110      	movs	r1, #16
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8f1 	bl	8005acc <USB_FlushTxFifo>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f91d 	bl	8005b34 <USB_FlushRxFifo>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	461a      	mov	r2, r3
 8005918:	2300      	movs	r3, #0
 800591a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e043      	b.n	80059b6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d118      	bne.n	8005978 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	461a      	mov	r2, r3
 800595a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e013      	b.n	800598a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e008      	b.n	800598a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	461a      	mov	r2, r3
 8005986:	2300      	movs	r3, #0
 8005988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	461a      	mov	r2, r3
 80059aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3301      	adds	r3, #1
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3b7      	bcc.n	800592e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e043      	b.n	8005a4c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059da:	d118      	bne.n	8005a0e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e013      	b.n	8005a20 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	e008      	b.n	8005a20 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3b7      	bcc.n	80059c4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f043 0210 	orr.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <USB_DevInit+0x280>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f043 0208 	orr.w	r2, r3, #8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ac2:	b004      	add	sp, #16
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	803c3800 	.word	0x803c3800

08005acc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <USB_FlushTxFifo+0x64>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e01b      	b.n	8005b24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	daf2      	bge.n	8005ada <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	019b      	lsls	r3, r3, #6
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <USB_FlushTxFifo+0x64>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e006      	b.n	8005b24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d0f0      	beq.n	8005b04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <USB_FlushRxFifo+0x5c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e018      	b.n	8005b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	daf2      	bge.n	8005b40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2210      	movs	r2, #16
 8005b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <USB_FlushRxFifo+0x5c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e006      	b.n	8005b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d0f0      	beq.n	8005b64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	00030d40 	.word	0x00030d40

08005b94 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005be0:	f023 0303 	bic.w	r3, r3, #3
 8005be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0301 	and.w	r3, r3, #1
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <USB_CoreReset+0x64>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e01b      	b.n	8005c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	daf2      	bge.n	8005c30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f043 0201 	orr.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <USB_CoreReset+0x64>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e006      	b.n	8005c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d0f0      	beq.n	8005c5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	00030d40 	.word	0x00030d40

08005c8c <__cvt>:
 8005c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	ec55 4b10 	vmov	r4, r5, d0
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	460e      	mov	r6, r1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	bfbb      	ittet	lt
 8005c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ca2:	461d      	movlt	r5, r3
 8005ca4:	2300      	movge	r3, #0
 8005ca6:	232d      	movlt	r3, #45	; 0x2d
 8005ca8:	700b      	strb	r3, [r1, #0]
 8005caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	f023 0820 	bic.w	r8, r3, #32
 8005cb6:	bfbc      	itt	lt
 8005cb8:	4622      	movlt	r2, r4
 8005cba:	4614      	movlt	r4, r2
 8005cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cc0:	d005      	beq.n	8005cce <__cvt+0x42>
 8005cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cc6:	d100      	bne.n	8005cca <__cvt+0x3e>
 8005cc8:	3601      	adds	r6, #1
 8005cca:	2102      	movs	r1, #2
 8005ccc:	e000      	b.n	8005cd0 <__cvt+0x44>
 8005cce:	2103      	movs	r1, #3
 8005cd0:	ab03      	add	r3, sp, #12
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	ab02      	add	r3, sp, #8
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	ec45 4b10 	vmov	d0, r4, r5
 8005cdc:	4653      	mov	r3, sl
 8005cde:	4632      	mov	r2, r6
 8005ce0:	f000 fe6a 	bl	80069b8 <_dtoa_r>
 8005ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ce8:	4607      	mov	r7, r0
 8005cea:	d102      	bne.n	8005cf2 <__cvt+0x66>
 8005cec:	f019 0f01 	tst.w	r9, #1
 8005cf0:	d022      	beq.n	8005d38 <__cvt+0xac>
 8005cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cf6:	eb07 0906 	add.w	r9, r7, r6
 8005cfa:	d110      	bne.n	8005d1e <__cvt+0x92>
 8005cfc:	783b      	ldrb	r3, [r7, #0]
 8005cfe:	2b30      	cmp	r3, #48	; 0x30
 8005d00:	d10a      	bne.n	8005d18 <__cvt+0x8c>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa fef5 	bl	8000af8 <__aeabi_dcmpeq>
 8005d0e:	b918      	cbnz	r0, 8005d18 <__cvt+0x8c>
 8005d10:	f1c6 0601 	rsb	r6, r6, #1
 8005d14:	f8ca 6000 	str.w	r6, [sl]
 8005d18:	f8da 3000 	ldr.w	r3, [sl]
 8005d1c:	4499      	add	r9, r3
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2300      	movs	r3, #0
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fee7 	bl	8000af8 <__aeabi_dcmpeq>
 8005d2a:	b108      	cbz	r0, 8005d30 <__cvt+0xa4>
 8005d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d30:	2230      	movs	r2, #48	; 0x30
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	454b      	cmp	r3, r9
 8005d36:	d307      	bcc.n	8005d48 <__cvt+0xbc>
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d3c:	1bdb      	subs	r3, r3, r7
 8005d3e:	4638      	mov	r0, r7
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	b004      	add	sp, #16
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d48:	1c59      	adds	r1, r3, #1
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e7f0      	b.n	8005d32 <__cvt+0xa6>

08005d50 <__exponent>:
 8005d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d52:	4603      	mov	r3, r0
 8005d54:	2900      	cmp	r1, #0
 8005d56:	bfb8      	it	lt
 8005d58:	4249      	neglt	r1, r1
 8005d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8005d5e:	bfb4      	ite	lt
 8005d60:	222d      	movlt	r2, #45	; 0x2d
 8005d62:	222b      	movge	r2, #43	; 0x2b
 8005d64:	2909      	cmp	r1, #9
 8005d66:	7042      	strb	r2, [r0, #1]
 8005d68:	dd2a      	ble.n	8005dc0 <__exponent+0x70>
 8005d6a:	f10d 0207 	add.w	r2, sp, #7
 8005d6e:	4617      	mov	r7, r2
 8005d70:	260a      	movs	r6, #10
 8005d72:	4694      	mov	ip, r2
 8005d74:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d78:	fb06 1415 	mls	r4, r6, r5, r1
 8005d7c:	3430      	adds	r4, #48	; 0x30
 8005d7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d82:	460c      	mov	r4, r1
 8005d84:	2c63      	cmp	r4, #99	; 0x63
 8005d86:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	dcf1      	bgt.n	8005d72 <__exponent+0x22>
 8005d8e:	3130      	adds	r1, #48	; 0x30
 8005d90:	f1ac 0402 	sub.w	r4, ip, #2
 8005d94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d98:	1c41      	adds	r1, r0, #1
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	42ba      	cmp	r2, r7
 8005d9e:	d30a      	bcc.n	8005db6 <__exponent+0x66>
 8005da0:	f10d 0209 	add.w	r2, sp, #9
 8005da4:	eba2 020c 	sub.w	r2, r2, ip
 8005da8:	42bc      	cmp	r4, r7
 8005daa:	bf88      	it	hi
 8005dac:	2200      	movhi	r2, #0
 8005dae:	4413      	add	r3, r2
 8005db0:	1a18      	subs	r0, r3, r0
 8005db2:	b003      	add	sp, #12
 8005db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dba:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dbe:	e7ed      	b.n	8005d9c <__exponent+0x4c>
 8005dc0:	2330      	movs	r3, #48	; 0x30
 8005dc2:	3130      	adds	r1, #48	; 0x30
 8005dc4:	7083      	strb	r3, [r0, #2]
 8005dc6:	70c1      	strb	r1, [r0, #3]
 8005dc8:	1d03      	adds	r3, r0, #4
 8005dca:	e7f1      	b.n	8005db0 <__exponent+0x60>

08005dcc <_printf_float>:
 8005dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	ed2d 8b02 	vpush	{d8}
 8005dd4:	b08d      	sub	sp, #52	; 0x34
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ddc:	4616      	mov	r6, r2
 8005dde:	461f      	mov	r7, r3
 8005de0:	4605      	mov	r5, r0
 8005de2:	f000 fce9 	bl	80067b8 <_localeconv_r>
 8005de6:	f8d0 a000 	ldr.w	sl, [r0]
 8005dea:	4650      	mov	r0, sl
 8005dec:	f7fa fa58 	bl	80002a0 <strlen>
 8005df0:	2300      	movs	r3, #0
 8005df2:	930a      	str	r3, [sp, #40]	; 0x28
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	9305      	str	r3, [sp, #20]
 8005df8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e00:	3307      	adds	r3, #7
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	f103 0208 	add.w	r2, r3, #8
 8005e0a:	f8c8 2000 	str.w	r2, [r8]
 8005e0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e16:	9307      	str	r3, [sp, #28]
 8005e18:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e1c:	ee08 0a10 	vmov	s16, r0
 8005e20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e28:	4b9e      	ldr	r3, [pc, #632]	; (80060a4 <_printf_float+0x2d8>)
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	f7fa fe95 	bl	8000b5c <__aeabi_dcmpun>
 8005e32:	bb88      	cbnz	r0, 8005e98 <_printf_float+0xcc>
 8005e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e38:	4b9a      	ldr	r3, [pc, #616]	; (80060a4 <_printf_float+0x2d8>)
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	f7fa fe6f 	bl	8000b20 <__aeabi_dcmple>
 8005e42:	bb48      	cbnz	r0, 8005e98 <_printf_float+0xcc>
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fe5e 	bl	8000b0c <__aeabi_dcmplt>
 8005e50:	b110      	cbz	r0, 8005e58 <_printf_float+0x8c>
 8005e52:	232d      	movs	r3, #45	; 0x2d
 8005e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e58:	4a93      	ldr	r2, [pc, #588]	; (80060a8 <_printf_float+0x2dc>)
 8005e5a:	4b94      	ldr	r3, [pc, #592]	; (80060ac <_printf_float+0x2e0>)
 8005e5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e60:	bf94      	ite	ls
 8005e62:	4690      	movls	r8, r2
 8005e64:	4698      	movhi	r8, r3
 8005e66:	2303      	movs	r3, #3
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	9b05      	ldr	r3, [sp, #20]
 8005e6c:	f023 0304 	bic.w	r3, r3, #4
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	f04f 0900 	mov.w	r9, #0
 8005e76:	9700      	str	r7, [sp, #0]
 8005e78:	4633      	mov	r3, r6
 8005e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 f9da 	bl	8006238 <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	f040 8090 	bne.w	8005faa <_printf_float+0x1de>
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	b00d      	add	sp, #52	; 0x34
 8005e90:	ecbd 8b02 	vpop	{d8}
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fe5c 	bl	8000b5c <__aeabi_dcmpun>
 8005ea4:	b140      	cbz	r0, 8005eb8 <_printf_float+0xec>
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfbc      	itt	lt
 8005eac:	232d      	movlt	r3, #45	; 0x2d
 8005eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eb2:	4a7f      	ldr	r2, [pc, #508]	; (80060b0 <_printf_float+0x2e4>)
 8005eb4:	4b7f      	ldr	r3, [pc, #508]	; (80060b4 <_printf_float+0x2e8>)
 8005eb6:	e7d1      	b.n	8005e5c <_printf_float+0x90>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ebe:	9206      	str	r2, [sp, #24]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	d13f      	bne.n	8005f44 <_printf_float+0x178>
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	9b05      	ldr	r3, [sp, #20]
 8005eca:	6861      	ldr	r1, [r4, #4]
 8005ecc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ed6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005eda:	ab09      	add	r3, sp, #36	; 0x24
 8005edc:	ec49 8b10 	vmov	d0, r8, r9
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f7ff fecf 	bl	8005c8c <__cvt>
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef2:	2b47      	cmp	r3, #71	; 0x47
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	d108      	bne.n	8005f0a <_printf_float+0x13e>
 8005ef8:	1cc8      	adds	r0, r1, #3
 8005efa:	db02      	blt.n	8005f02 <_printf_float+0x136>
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	4299      	cmp	r1, r3
 8005f00:	dd41      	ble.n	8005f86 <_printf_float+0x1ba>
 8005f02:	f1ab 0302 	sub.w	r3, fp, #2
 8005f06:	fa5f fb83 	uxtb.w	fp, r3
 8005f0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f0e:	d820      	bhi.n	8005f52 <_printf_float+0x186>
 8005f10:	3901      	subs	r1, #1
 8005f12:	465a      	mov	r2, fp
 8005f14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f18:	9109      	str	r1, [sp, #36]	; 0x24
 8005f1a:	f7ff ff19 	bl	8005d50 <__exponent>
 8005f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f20:	1813      	adds	r3, r2, r0
 8005f22:	2a01      	cmp	r2, #1
 8005f24:	4681      	mov	r9, r0
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	dc02      	bgt.n	8005f30 <_printf_float+0x164>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	07d2      	lsls	r2, r2, #31
 8005f2e:	d501      	bpl.n	8005f34 <_printf_float+0x168>
 8005f30:	3301      	adds	r3, #1
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d09c      	beq.n	8005e76 <_printf_float+0xaa>
 8005f3c:	232d      	movs	r3, #45	; 0x2d
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f42:	e798      	b.n	8005e76 <_printf_float+0xaa>
 8005f44:	9a06      	ldr	r2, [sp, #24]
 8005f46:	2a47      	cmp	r2, #71	; 0x47
 8005f48:	d1be      	bne.n	8005ec8 <_printf_float+0xfc>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1bc      	bne.n	8005ec8 <_printf_float+0xfc>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7b9      	b.n	8005ec6 <_printf_float+0xfa>
 8005f52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f56:	d118      	bne.n	8005f8a <_printf_float+0x1be>
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	dd0b      	ble.n	8005f76 <_printf_float+0x1aa>
 8005f5e:	6121      	str	r1, [r4, #16]
 8005f60:	b913      	cbnz	r3, 8005f68 <_printf_float+0x19c>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	07d0      	lsls	r0, r2, #31
 8005f66:	d502      	bpl.n	8005f6e <_printf_float+0x1a2>
 8005f68:	3301      	adds	r3, #1
 8005f6a:	440b      	add	r3, r1
 8005f6c:	6123      	str	r3, [r4, #16]
 8005f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f70:	f04f 0900 	mov.w	r9, #0
 8005f74:	e7de      	b.n	8005f34 <_printf_float+0x168>
 8005f76:	b913      	cbnz	r3, 8005f7e <_printf_float+0x1b2>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	07d2      	lsls	r2, r2, #31
 8005f7c:	d501      	bpl.n	8005f82 <_printf_float+0x1b6>
 8005f7e:	3302      	adds	r3, #2
 8005f80:	e7f4      	b.n	8005f6c <_printf_float+0x1a0>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7f2      	b.n	8005f6c <_printf_float+0x1a0>
 8005f86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	db05      	blt.n	8005f9c <_printf_float+0x1d0>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	6121      	str	r1, [r4, #16]
 8005f94:	07d8      	lsls	r0, r3, #31
 8005f96:	d5ea      	bpl.n	8005f6e <_printf_float+0x1a2>
 8005f98:	1c4b      	adds	r3, r1, #1
 8005f9a:	e7e7      	b.n	8005f6c <_printf_float+0x1a0>
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	bfd4      	ite	le
 8005fa0:	f1c1 0202 	rsble	r2, r1, #2
 8005fa4:	2201      	movgt	r2, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	e7e0      	b.n	8005f6c <_printf_float+0x1a0>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	055a      	lsls	r2, r3, #21
 8005fae:	d407      	bmi.n	8005fc0 <_printf_float+0x1f4>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d12c      	bne.n	8006018 <_printf_float+0x24c>
 8005fbe:	e764      	b.n	8005e8a <_printf_float+0xbe>
 8005fc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fc4:	f240 80e0 	bls.w	8006188 <_printf_float+0x3bc>
 8005fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f7fa fd92 	bl	8000af8 <__aeabi_dcmpeq>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d034      	beq.n	8006042 <_printf_float+0x276>
 8005fd8:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <_printf_float+0x2ec>)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af51 	beq.w	8005e8a <_printf_float+0xbe>
 8005fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fec:	429a      	cmp	r2, r3
 8005fee:	db02      	blt.n	8005ff6 <_printf_float+0x22a>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07d8      	lsls	r0, r3, #31
 8005ff4:	d510      	bpl.n	8006018 <_printf_float+0x24c>
 8005ff6:	ee18 3a10 	vmov	r3, s16
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af41 	beq.w	8005e8a <_printf_float+0xbe>
 8006008:	f04f 0800 	mov.w	r8, #0
 800600c:	f104 091a 	add.w	r9, r4, #26
 8006010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006012:	3b01      	subs	r3, #1
 8006014:	4543      	cmp	r3, r8
 8006016:	dc09      	bgt.n	800602c <_printf_float+0x260>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	079b      	lsls	r3, r3, #30
 800601c:	f100 8107 	bmi.w	800622e <_printf_float+0x462>
 8006020:	68e0      	ldr	r0, [r4, #12]
 8006022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006024:	4298      	cmp	r0, r3
 8006026:	bfb8      	it	lt
 8006028:	4618      	movlt	r0, r3
 800602a:	e730      	b.n	8005e8e <_printf_float+0xc2>
 800602c:	2301      	movs	r3, #1
 800602e:	464a      	mov	r2, r9
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af27 	beq.w	8005e8a <_printf_float+0xbe>
 800603c:	f108 0801 	add.w	r8, r8, #1
 8006040:	e7e6      	b.n	8006010 <_printf_float+0x244>
 8006042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	dc39      	bgt.n	80060bc <_printf_float+0x2f0>
 8006048:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <_printf_float+0x2ec>)
 800604a:	2301      	movs	r3, #1
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f af19 	beq.w	8005e8a <_printf_float+0xbe>
 8006058:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800605c:	4313      	orrs	r3, r2
 800605e:	d102      	bne.n	8006066 <_printf_float+0x29a>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	07d9      	lsls	r1, r3, #31
 8006064:	d5d8      	bpl.n	8006018 <_printf_float+0x24c>
 8006066:	ee18 3a10 	vmov	r3, s16
 800606a:	4652      	mov	r2, sl
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f af09 	beq.w	8005e8a <_printf_float+0xbe>
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	f104 0a1a 	add.w	sl, r4, #26
 8006080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006082:	425b      	negs	r3, r3
 8006084:	454b      	cmp	r3, r9
 8006086:	dc01      	bgt.n	800608c <_printf_float+0x2c0>
 8006088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608a:	e792      	b.n	8005fb2 <_printf_float+0x1e6>
 800608c:	2301      	movs	r3, #1
 800608e:	4652      	mov	r2, sl
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	47b8      	blx	r7
 8006096:	3001      	adds	r0, #1
 8006098:	f43f aef7 	beq.w	8005e8a <_printf_float+0xbe>
 800609c:	f109 0901 	add.w	r9, r9, #1
 80060a0:	e7ee      	b.n	8006080 <_printf_float+0x2b4>
 80060a2:	bf00      	nop
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	08008a40 	.word	0x08008a40
 80060ac:	08008a44 	.word	0x08008a44
 80060b0:	08008a48 	.word	0x08008a48
 80060b4:	08008a4c 	.word	0x08008a4c
 80060b8:	08008a50 	.word	0x08008a50
 80060bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bfa8      	it	ge
 80060c4:	461a      	movge	r2, r3
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	4691      	mov	r9, r2
 80060ca:	dc37      	bgt.n	800613c <_printf_float+0x370>
 80060cc:	f04f 0b00 	mov.w	fp, #0
 80060d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d4:	f104 021a 	add.w	r2, r4, #26
 80060d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	eba3 0309 	sub.w	r3, r3, r9
 80060e0:	455b      	cmp	r3, fp
 80060e2:	dc33      	bgt.n	800614c <_printf_float+0x380>
 80060e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e8:	429a      	cmp	r2, r3
 80060ea:	db3b      	blt.n	8006164 <_printf_float+0x398>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	d438      	bmi.n	8006164 <_printf_float+0x398>
 80060f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060f6:	eba2 0903 	sub.w	r9, r2, r3
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	1ad2      	subs	r2, r2, r3
 80060fe:	4591      	cmp	r9, r2
 8006100:	bfa8      	it	ge
 8006102:	4691      	movge	r9, r2
 8006104:	f1b9 0f00 	cmp.w	r9, #0
 8006108:	dc35      	bgt.n	8006176 <_printf_float+0x3aa>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006112:	f104 0a1a 	add.w	sl, r4, #26
 8006116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	eba3 0309 	sub.w	r3, r3, r9
 8006120:	4543      	cmp	r3, r8
 8006122:	f77f af79 	ble.w	8006018 <_printf_float+0x24c>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f aeaa 	beq.w	8005e8a <_printf_float+0xbe>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	e7ec      	b.n	8006116 <_printf_float+0x34a>
 800613c:	4613      	mov	r3, r2
 800613e:	4631      	mov	r1, r6
 8006140:	4642      	mov	r2, r8
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	d1c0      	bne.n	80060cc <_printf_float+0x300>
 800614a:	e69e      	b.n	8005e8a <_printf_float+0xbe>
 800614c:	2301      	movs	r3, #1
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	9205      	str	r2, [sp, #20]
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f ae97 	beq.w	8005e8a <_printf_float+0xbe>
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	f10b 0b01 	add.w	fp, fp, #1
 8006162:	e7b9      	b.n	80060d8 <_printf_float+0x30c>
 8006164:	ee18 3a10 	vmov	r3, s16
 8006168:	4652      	mov	r2, sl
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	d1be      	bne.n	80060f2 <_printf_float+0x326>
 8006174:	e689      	b.n	8005e8a <_printf_float+0xbe>
 8006176:	9a05      	ldr	r2, [sp, #20]
 8006178:	464b      	mov	r3, r9
 800617a:	4442      	add	r2, r8
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	d1c1      	bne.n	800610a <_printf_float+0x33e>
 8006186:	e680      	b.n	8005e8a <_printf_float+0xbe>
 8006188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618a:	2a01      	cmp	r2, #1
 800618c:	dc01      	bgt.n	8006192 <_printf_float+0x3c6>
 800618e:	07db      	lsls	r3, r3, #31
 8006190:	d53a      	bpl.n	8006208 <_printf_float+0x43c>
 8006192:	2301      	movs	r3, #1
 8006194:	4642      	mov	r2, r8
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f ae74 	beq.w	8005e8a <_printf_float+0xbe>
 80061a2:	ee18 3a10 	vmov	r3, s16
 80061a6:	4652      	mov	r2, sl
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f ae6b 	beq.w	8005e8a <_printf_float+0xbe>
 80061b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061b8:	2200      	movs	r2, #0
 80061ba:	2300      	movs	r3, #0
 80061bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061c0:	f7fa fc9a 	bl	8000af8 <__aeabi_dcmpeq>
 80061c4:	b9d8      	cbnz	r0, 80061fe <_printf_float+0x432>
 80061c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061ca:	f108 0201 	add.w	r2, r8, #1
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	d10e      	bne.n	80061f6 <_printf_float+0x42a>
 80061d8:	e657      	b.n	8005e8a <_printf_float+0xbe>
 80061da:	2301      	movs	r3, #1
 80061dc:	4652      	mov	r2, sl
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	f43f ae50 	beq.w	8005e8a <_printf_float+0xbe>
 80061ea:	f108 0801 	add.w	r8, r8, #1
 80061ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4543      	cmp	r3, r8
 80061f4:	dcf1      	bgt.n	80061da <_printf_float+0x40e>
 80061f6:	464b      	mov	r3, r9
 80061f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061fc:	e6da      	b.n	8005fb4 <_printf_float+0x1e8>
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	f104 0a1a 	add.w	sl, r4, #26
 8006206:	e7f2      	b.n	80061ee <_printf_float+0x422>
 8006208:	2301      	movs	r3, #1
 800620a:	4642      	mov	r2, r8
 800620c:	e7df      	b.n	80061ce <_printf_float+0x402>
 800620e:	2301      	movs	r3, #1
 8006210:	464a      	mov	r2, r9
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae36 	beq.w	8005e8a <_printf_float+0xbe>
 800621e:	f108 0801 	add.w	r8, r8, #1
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006226:	1a5b      	subs	r3, r3, r1
 8006228:	4543      	cmp	r3, r8
 800622a:	dcf0      	bgt.n	800620e <_printf_float+0x442>
 800622c:	e6f8      	b.n	8006020 <_printf_float+0x254>
 800622e:	f04f 0800 	mov.w	r8, #0
 8006232:	f104 0919 	add.w	r9, r4, #25
 8006236:	e7f4      	b.n	8006222 <_printf_float+0x456>

08006238 <_printf_common>:
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	4616      	mov	r6, r2
 800623e:	4699      	mov	r9, r3
 8006240:	688a      	ldr	r2, [r1, #8]
 8006242:	690b      	ldr	r3, [r1, #16]
 8006244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006248:	4293      	cmp	r3, r2
 800624a:	bfb8      	it	lt
 800624c:	4613      	movlt	r3, r2
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006254:	4607      	mov	r7, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b10a      	cbz	r2, 800625e <_printf_common+0x26>
 800625a:	3301      	adds	r3, #1
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	0699      	lsls	r1, r3, #26
 8006262:	bf42      	ittt	mi
 8006264:	6833      	ldrmi	r3, [r6, #0]
 8006266:	3302      	addmi	r3, #2
 8006268:	6033      	strmi	r3, [r6, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	f015 0506 	ands.w	r5, r5, #6
 8006270:	d106      	bne.n	8006280 <_printf_common+0x48>
 8006272:	f104 0a19 	add.w	sl, r4, #25
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	6832      	ldr	r2, [r6, #0]
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	42ab      	cmp	r3, r5
 800627e:	dc26      	bgt.n	80062ce <_printf_common+0x96>
 8006280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006284:	1e13      	subs	r3, r2, #0
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	bf18      	it	ne
 800628a:	2301      	movne	r3, #1
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d42b      	bmi.n	80062e8 <_printf_common+0xb0>
 8006290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006294:	4649      	mov	r1, r9
 8006296:	4638      	mov	r0, r7
 8006298:	47c0      	blx	r8
 800629a:	3001      	adds	r0, #1
 800629c:	d01e      	beq.n	80062dc <_printf_common+0xa4>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	f003 0306 	and.w	r3, r3, #6
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	bf02      	ittt	eq
 80062aa:	68e5      	ldreq	r5, [r4, #12]
 80062ac:	6833      	ldreq	r3, [r6, #0]
 80062ae:	1aed      	subeq	r5, r5, r3
 80062b0:	68a3      	ldr	r3, [r4, #8]
 80062b2:	bf0c      	ite	eq
 80062b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b8:	2500      	movne	r5, #0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bfc4      	itt	gt
 80062be:	1a9b      	subgt	r3, r3, r2
 80062c0:	18ed      	addgt	r5, r5, r3
 80062c2:	2600      	movs	r6, #0
 80062c4:	341a      	adds	r4, #26
 80062c6:	42b5      	cmp	r5, r6
 80062c8:	d11a      	bne.n	8006300 <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e008      	b.n	80062e0 <_printf_common+0xa8>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4652      	mov	r2, sl
 80062d2:	4649      	mov	r1, r9
 80062d4:	4638      	mov	r0, r7
 80062d6:	47c0      	blx	r8
 80062d8:	3001      	adds	r0, #1
 80062da:	d103      	bne.n	80062e4 <_printf_common+0xac>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	3501      	adds	r5, #1
 80062e6:	e7c6      	b.n	8006276 <_printf_common+0x3e>
 80062e8:	18e1      	adds	r1, r4, r3
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	2030      	movs	r0, #48	; 0x30
 80062ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062f2:	4422      	add	r2, r4
 80062f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062fc:	3302      	adds	r3, #2
 80062fe:	e7c7      	b.n	8006290 <_printf_common+0x58>
 8006300:	2301      	movs	r3, #1
 8006302:	4622      	mov	r2, r4
 8006304:	4649      	mov	r1, r9
 8006306:	4638      	mov	r0, r7
 8006308:	47c0      	blx	r8
 800630a:	3001      	adds	r0, #1
 800630c:	d0e6      	beq.n	80062dc <_printf_common+0xa4>
 800630e:	3601      	adds	r6, #1
 8006310:	e7d9      	b.n	80062c6 <_printf_common+0x8e>
	...

08006314 <_printf_i>:
 8006314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	7e0f      	ldrb	r7, [r1, #24]
 800631a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800631c:	2f78      	cmp	r7, #120	; 0x78
 800631e:	4691      	mov	r9, r2
 8006320:	4680      	mov	r8, r0
 8006322:	460c      	mov	r4, r1
 8006324:	469a      	mov	sl, r3
 8006326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800632a:	d807      	bhi.n	800633c <_printf_i+0x28>
 800632c:	2f62      	cmp	r7, #98	; 0x62
 800632e:	d80a      	bhi.n	8006346 <_printf_i+0x32>
 8006330:	2f00      	cmp	r7, #0
 8006332:	f000 80d4 	beq.w	80064de <_printf_i+0x1ca>
 8006336:	2f58      	cmp	r7, #88	; 0x58
 8006338:	f000 80c0 	beq.w	80064bc <_printf_i+0x1a8>
 800633c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006344:	e03a      	b.n	80063bc <_printf_i+0xa8>
 8006346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800634a:	2b15      	cmp	r3, #21
 800634c:	d8f6      	bhi.n	800633c <_printf_i+0x28>
 800634e:	a101      	add	r1, pc, #4	; (adr r1, 8006354 <_printf_i+0x40>)
 8006350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006354:	080063ad 	.word	0x080063ad
 8006358:	080063c1 	.word	0x080063c1
 800635c:	0800633d 	.word	0x0800633d
 8006360:	0800633d 	.word	0x0800633d
 8006364:	0800633d 	.word	0x0800633d
 8006368:	0800633d 	.word	0x0800633d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800633d 	.word	0x0800633d
 8006374:	0800633d 	.word	0x0800633d
 8006378:	0800633d 	.word	0x0800633d
 800637c:	0800633d 	.word	0x0800633d
 8006380:	080064c5 	.word	0x080064c5
 8006384:	080063ed 	.word	0x080063ed
 8006388:	0800647f 	.word	0x0800647f
 800638c:	0800633d 	.word	0x0800633d
 8006390:	0800633d 	.word	0x0800633d
 8006394:	080064e7 	.word	0x080064e7
 8006398:	0800633d 	.word	0x0800633d
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	0800633d 	.word	0x0800633d
 80063a4:	0800633d 	.word	0x0800633d
 80063a8:	08006487 	.word	0x08006487
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	602a      	str	r2, [r5, #0]
 80063b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063bc:	2301      	movs	r3, #1
 80063be:	e09f      	b.n	8006500 <_printf_i+0x1ec>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	682b      	ldr	r3, [r5, #0]
 80063c4:	0607      	lsls	r7, r0, #24
 80063c6:	f103 0104 	add.w	r1, r3, #4
 80063ca:	6029      	str	r1, [r5, #0]
 80063cc:	d501      	bpl.n	80063d2 <_printf_i+0xbe>
 80063ce:	681e      	ldr	r6, [r3, #0]
 80063d0:	e003      	b.n	80063da <_printf_i+0xc6>
 80063d2:	0646      	lsls	r6, r0, #25
 80063d4:	d5fb      	bpl.n	80063ce <_printf_i+0xba>
 80063d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063da:	2e00      	cmp	r6, #0
 80063dc:	da03      	bge.n	80063e6 <_printf_i+0xd2>
 80063de:	232d      	movs	r3, #45	; 0x2d
 80063e0:	4276      	negs	r6, r6
 80063e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e6:	485a      	ldr	r0, [pc, #360]	; (8006550 <_printf_i+0x23c>)
 80063e8:	230a      	movs	r3, #10
 80063ea:	e012      	b.n	8006412 <_printf_i+0xfe>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	1d19      	adds	r1, r3, #4
 80063f2:	6029      	str	r1, [r5, #0]
 80063f4:	0605      	lsls	r5, r0, #24
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0xe8>
 80063f8:	681e      	ldr	r6, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0xee>
 80063fc:	0641      	lsls	r1, r0, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0xe4>
 8006400:	881e      	ldrh	r6, [r3, #0]
 8006402:	4853      	ldr	r0, [pc, #332]	; (8006550 <_printf_i+0x23c>)
 8006404:	2f6f      	cmp	r7, #111	; 0x6f
 8006406:	bf0c      	ite	eq
 8006408:	2308      	moveq	r3, #8
 800640a:	230a      	movne	r3, #10
 800640c:	2100      	movs	r1, #0
 800640e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006412:	6865      	ldr	r5, [r4, #4]
 8006414:	60a5      	str	r5, [r4, #8]
 8006416:	2d00      	cmp	r5, #0
 8006418:	bfa2      	ittt	ge
 800641a:	6821      	ldrge	r1, [r4, #0]
 800641c:	f021 0104 	bicge.w	r1, r1, #4
 8006420:	6021      	strge	r1, [r4, #0]
 8006422:	b90e      	cbnz	r6, 8006428 <_printf_i+0x114>
 8006424:	2d00      	cmp	r5, #0
 8006426:	d04b      	beq.n	80064c0 <_printf_i+0x1ac>
 8006428:	4615      	mov	r5, r2
 800642a:	fbb6 f1f3 	udiv	r1, r6, r3
 800642e:	fb03 6711 	mls	r7, r3, r1, r6
 8006432:	5dc7      	ldrb	r7, [r0, r7]
 8006434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006438:	4637      	mov	r7, r6
 800643a:	42bb      	cmp	r3, r7
 800643c:	460e      	mov	r6, r1
 800643e:	d9f4      	bls.n	800642a <_printf_i+0x116>
 8006440:	2b08      	cmp	r3, #8
 8006442:	d10b      	bne.n	800645c <_printf_i+0x148>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	07de      	lsls	r6, r3, #31
 8006448:	d508      	bpl.n	800645c <_printf_i+0x148>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	6861      	ldr	r1, [r4, #4]
 800644e:	4299      	cmp	r1, r3
 8006450:	bfde      	ittt	le
 8006452:	2330      	movle	r3, #48	; 0x30
 8006454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006458:	f105 35ff 	addle.w	r5, r5, #4294967295
 800645c:	1b52      	subs	r2, r2, r5
 800645e:	6122      	str	r2, [r4, #16]
 8006460:	f8cd a000 	str.w	sl, [sp]
 8006464:	464b      	mov	r3, r9
 8006466:	aa03      	add	r2, sp, #12
 8006468:	4621      	mov	r1, r4
 800646a:	4640      	mov	r0, r8
 800646c:	f7ff fee4 	bl	8006238 <_printf_common>
 8006470:	3001      	adds	r0, #1
 8006472:	d14a      	bne.n	800650a <_printf_i+0x1f6>
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	b004      	add	sp, #16
 800647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f043 0320 	orr.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	4833      	ldr	r0, [pc, #204]	; (8006554 <_printf_i+0x240>)
 8006488:	2778      	movs	r7, #120	; 0x78
 800648a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	6829      	ldr	r1, [r5, #0]
 8006492:	061f      	lsls	r7, r3, #24
 8006494:	f851 6b04 	ldr.w	r6, [r1], #4
 8006498:	d402      	bmi.n	80064a0 <_printf_i+0x18c>
 800649a:	065f      	lsls	r7, r3, #25
 800649c:	bf48      	it	mi
 800649e:	b2b6      	uxthmi	r6, r6
 80064a0:	07df      	lsls	r7, r3, #31
 80064a2:	bf48      	it	mi
 80064a4:	f043 0320 	orrmi.w	r3, r3, #32
 80064a8:	6029      	str	r1, [r5, #0]
 80064aa:	bf48      	it	mi
 80064ac:	6023      	strmi	r3, [r4, #0]
 80064ae:	b91e      	cbnz	r6, 80064b8 <_printf_i+0x1a4>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	f023 0320 	bic.w	r3, r3, #32
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	2310      	movs	r3, #16
 80064ba:	e7a7      	b.n	800640c <_printf_i+0xf8>
 80064bc:	4824      	ldr	r0, [pc, #144]	; (8006550 <_printf_i+0x23c>)
 80064be:	e7e4      	b.n	800648a <_printf_i+0x176>
 80064c0:	4615      	mov	r5, r2
 80064c2:	e7bd      	b.n	8006440 <_printf_i+0x12c>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	6826      	ldr	r6, [r4, #0]
 80064c8:	6961      	ldr	r1, [r4, #20]
 80064ca:	1d18      	adds	r0, r3, #4
 80064cc:	6028      	str	r0, [r5, #0]
 80064ce:	0635      	lsls	r5, r6, #24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0x1c4>
 80064d4:	6019      	str	r1, [r3, #0]
 80064d6:	e002      	b.n	80064de <_printf_i+0x1ca>
 80064d8:	0670      	lsls	r0, r6, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0x1c0>
 80064dc:	8019      	strh	r1, [r3, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	6123      	str	r3, [r4, #16]
 80064e2:	4615      	mov	r5, r2
 80064e4:	e7bc      	b.n	8006460 <_printf_i+0x14c>
 80064e6:	682b      	ldr	r3, [r5, #0]
 80064e8:	1d1a      	adds	r2, r3, #4
 80064ea:	602a      	str	r2, [r5, #0]
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	6862      	ldr	r2, [r4, #4]
 80064f0:	2100      	movs	r1, #0
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7f9 fe84 	bl	8000200 <memchr>
 80064f8:	b108      	cbz	r0, 80064fe <_printf_i+0x1ea>
 80064fa:	1b40      	subs	r0, r0, r5
 80064fc:	6060      	str	r0, [r4, #4]
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	2300      	movs	r3, #0
 8006504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006508:	e7aa      	b.n	8006460 <_printf_i+0x14c>
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	462a      	mov	r2, r5
 800650e:	4649      	mov	r1, r9
 8006510:	4640      	mov	r0, r8
 8006512:	47d0      	blx	sl
 8006514:	3001      	adds	r0, #1
 8006516:	d0ad      	beq.n	8006474 <_printf_i+0x160>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	d413      	bmi.n	8006546 <_printf_i+0x232>
 800651e:	68e0      	ldr	r0, [r4, #12]
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	4298      	cmp	r0, r3
 8006524:	bfb8      	it	lt
 8006526:	4618      	movlt	r0, r3
 8006528:	e7a6      	b.n	8006478 <_printf_i+0x164>
 800652a:	2301      	movs	r3, #1
 800652c:	4632      	mov	r2, r6
 800652e:	4649      	mov	r1, r9
 8006530:	4640      	mov	r0, r8
 8006532:	47d0      	blx	sl
 8006534:	3001      	adds	r0, #1
 8006536:	d09d      	beq.n	8006474 <_printf_i+0x160>
 8006538:	3501      	adds	r5, #1
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	9903      	ldr	r1, [sp, #12]
 800653e:	1a5b      	subs	r3, r3, r1
 8006540:	42ab      	cmp	r3, r5
 8006542:	dcf2      	bgt.n	800652a <_printf_i+0x216>
 8006544:	e7eb      	b.n	800651e <_printf_i+0x20a>
 8006546:	2500      	movs	r5, #0
 8006548:	f104 0619 	add.w	r6, r4, #25
 800654c:	e7f5      	b.n	800653a <_printf_i+0x226>
 800654e:	bf00      	nop
 8006550:	08008a52 	.word	0x08008a52
 8006554:	08008a63 	.word	0x08008a63

08006558 <std>:
 8006558:	2300      	movs	r3, #0
 800655a:	b510      	push	{r4, lr}
 800655c:	4604      	mov	r4, r0
 800655e:	e9c0 3300 	strd	r3, r3, [r0]
 8006562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006566:	6083      	str	r3, [r0, #8]
 8006568:	8181      	strh	r1, [r0, #12]
 800656a:	6643      	str	r3, [r0, #100]	; 0x64
 800656c:	81c2      	strh	r2, [r0, #14]
 800656e:	6183      	str	r3, [r0, #24]
 8006570:	4619      	mov	r1, r3
 8006572:	2208      	movs	r2, #8
 8006574:	305c      	adds	r0, #92	; 0x5c
 8006576:	f000 f916 	bl	80067a6 <memset>
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <std+0x38>)
 800657c:	6263      	str	r3, [r4, #36]	; 0x24
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <std+0x3c>)
 8006580:	62a3      	str	r3, [r4, #40]	; 0x28
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <std+0x40>)
 8006584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006586:	4b05      	ldr	r3, [pc, #20]	; (800659c <std+0x44>)
 8006588:	6224      	str	r4, [r4, #32]
 800658a:	6323      	str	r3, [r4, #48]	; 0x30
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	08006721 	.word	0x08006721
 8006594:	08006743 	.word	0x08006743
 8006598:	0800677b 	.word	0x0800677b
 800659c:	0800679f 	.word	0x0800679f

080065a0 <stdio_exit_handler>:
 80065a0:	4a02      	ldr	r2, [pc, #8]	; (80065ac <stdio_exit_handler+0xc>)
 80065a2:	4903      	ldr	r1, [pc, #12]	; (80065b0 <stdio_exit_handler+0x10>)
 80065a4:	4803      	ldr	r0, [pc, #12]	; (80065b4 <stdio_exit_handler+0x14>)
 80065a6:	f000 b869 	b.w	800667c <_fwalk_sglue>
 80065aa:	bf00      	nop
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	08008251 	.word	0x08008251
 80065b4:	20000018 	.word	0x20000018

080065b8 <cleanup_stdio>:
 80065b8:	6841      	ldr	r1, [r0, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <cleanup_stdio+0x34>)
 80065bc:	4299      	cmp	r1, r3
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	d001      	beq.n	80065c8 <cleanup_stdio+0x10>
 80065c4:	f001 fe44 	bl	8008250 <_fflush_r>
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <cleanup_stdio+0x38>)
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d002      	beq.n	80065d6 <cleanup_stdio+0x1e>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f001 fe3d 	bl	8008250 <_fflush_r>
 80065d6:	68e1      	ldr	r1, [r4, #12]
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <cleanup_stdio+0x3c>)
 80065da:	4299      	cmp	r1, r3
 80065dc:	d004      	beq.n	80065e8 <cleanup_stdio+0x30>
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f001 be34 	b.w	8008250 <_fflush_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	200008c0 	.word	0x200008c0
 80065f0:	20000928 	.word	0x20000928
 80065f4:	20000990 	.word	0x20000990

080065f8 <global_stdio_init.part.0>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <global_stdio_init.part.0+0x30>)
 80065fc:	4c0b      	ldr	r4, [pc, #44]	; (800662c <global_stdio_init.part.0+0x34>)
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <global_stdio_init.part.0+0x38>)
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4620      	mov	r0, r4
 8006604:	2200      	movs	r2, #0
 8006606:	2104      	movs	r1, #4
 8006608:	f7ff ffa6 	bl	8006558 <std>
 800660c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006610:	2201      	movs	r2, #1
 8006612:	2109      	movs	r1, #9
 8006614:	f7ff ffa0 	bl	8006558 <std>
 8006618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800661c:	2202      	movs	r2, #2
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff bf98 	b.w	8006558 <std>
 8006628:	200009f8 	.word	0x200009f8
 800662c:	200008c0 	.word	0x200008c0
 8006630:	080065a1 	.word	0x080065a1

08006634 <__sfp_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sfp_lock_acquire+0x8>)
 8006636:	f000 b933 	b.w	80068a0 <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	20000a01 	.word	0x20000a01

08006640 <__sfp_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sfp_lock_release+0x8>)
 8006642:	f000 b92e 	b.w	80068a2 <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	20000a01 	.word	0x20000a01

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sfp_lock_acquire>
 8006654:	6a23      	ldr	r3, [r4, #32]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sfp_lock_release>
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <__sinit+0x28>)
 8006662:	6223      	str	r3, [r4, #32]
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__sinit+0x2c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <__sinit+0xc>
 800666c:	f7ff ffc4 	bl	80065f8 <global_stdio_init.part.0>
 8006670:	e7f2      	b.n	8006658 <__sinit+0xc>
 8006672:	bf00      	nop
 8006674:	080065b9 	.word	0x080065b9
 8006678:	200009f8 	.word	0x200009f8

0800667c <_fwalk_sglue>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	4607      	mov	r7, r0
 8006682:	4688      	mov	r8, r1
 8006684:	4614      	mov	r4, r2
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800668c:	f1b9 0901 	subs.w	r9, r9, #1
 8006690:	d505      	bpl.n	800669e <_fwalk_sglue+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk_sglue+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d907      	bls.n	80066b4 <_fwalk_sglue+0x38>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d003      	beq.n	80066b4 <_fwalk_sglue+0x38>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	4306      	orrs	r6, r0
 80066b4:	3568      	adds	r5, #104	; 0x68
 80066b6:	e7e9      	b.n	800668c <_fwalk_sglue+0x10>

080066b8 <sniprintf>:
 80066b8:	b40c      	push	{r2, r3}
 80066ba:	b530      	push	{r4, r5, lr}
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <sniprintf+0x64>)
 80066be:	1e0c      	subs	r4, r1, #0
 80066c0:	681d      	ldr	r5, [r3, #0]
 80066c2:	b09d      	sub	sp, #116	; 0x74
 80066c4:	da08      	bge.n	80066d8 <sniprintf+0x20>
 80066c6:	238b      	movs	r3, #139	; 0x8b
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	b01d      	add	sp, #116	; 0x74
 80066d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066d4:	b002      	add	sp, #8
 80066d6:	4770      	bx	lr
 80066d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80066dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066e0:	bf14      	ite	ne
 80066e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80066e6:	4623      	moveq	r3, r4
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f0:	9002      	str	r0, [sp, #8]
 80066f2:	9006      	str	r0, [sp, #24]
 80066f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066fa:	ab21      	add	r3, sp, #132	; 0x84
 80066fc:	a902      	add	r1, sp, #8
 80066fe:	4628      	mov	r0, r5
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	f001 fc21 	bl	8007f48 <_svfiprintf_r>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	bfbc      	itt	lt
 800670a:	238b      	movlt	r3, #139	; 0x8b
 800670c:	602b      	strlt	r3, [r5, #0]
 800670e:	2c00      	cmp	r4, #0
 8006710:	d0dd      	beq.n	80066ce <sniprintf+0x16>
 8006712:	9b02      	ldr	r3, [sp, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	e7d9      	b.n	80066ce <sniprintf+0x16>
 800671a:	bf00      	nop
 800671c:	20000064 	.word	0x20000064

08006720 <__sread>:
 8006720:	b510      	push	{r4, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	f000 f86c 	bl	8006804 <_read_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	bfab      	itete	ge
 8006730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006732:	89a3      	ldrhlt	r3, [r4, #12]
 8006734:	181b      	addge	r3, r3, r0
 8006736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800673a:	bfac      	ite	ge
 800673c:	6563      	strge	r3, [r4, #84]	; 0x54
 800673e:	81a3      	strhlt	r3, [r4, #12]
 8006740:	bd10      	pop	{r4, pc}

08006742 <__swrite>:
 8006742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006746:	461f      	mov	r7, r3
 8006748:	898b      	ldrh	r3, [r1, #12]
 800674a:	05db      	lsls	r3, r3, #23
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	4616      	mov	r6, r2
 8006752:	d505      	bpl.n	8006760 <__swrite+0x1e>
 8006754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006758:	2302      	movs	r3, #2
 800675a:	2200      	movs	r2, #0
 800675c:	f000 f840 	bl	80067e0 <_lseek_r>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	4632      	mov	r2, r6
 800676e:	463b      	mov	r3, r7
 8006770:	4628      	mov	r0, r5
 8006772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006776:	f000 b857 	b.w	8006828 <_write_r>

0800677a <__sseek>:
 800677a:	b510      	push	{r4, lr}
 800677c:	460c      	mov	r4, r1
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 f82d 	bl	80067e0 <_lseek_r>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	bf15      	itete	ne
 800678c:	6560      	strne	r0, [r4, #84]	; 0x54
 800678e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006796:	81a3      	strheq	r3, [r4, #12]
 8006798:	bf18      	it	ne
 800679a:	81a3      	strhne	r3, [r4, #12]
 800679c:	bd10      	pop	{r4, pc}

0800679e <__sclose>:
 800679e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a2:	f000 b80d 	b.w	80067c0 <_close_r>

080067a6 <memset>:
 80067a6:	4402      	add	r2, r0
 80067a8:	4603      	mov	r3, r0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d100      	bne.n	80067b0 <memset+0xa>
 80067ae:	4770      	bx	lr
 80067b0:	f803 1b01 	strb.w	r1, [r3], #1
 80067b4:	e7f9      	b.n	80067aa <memset+0x4>
	...

080067b8 <_localeconv_r>:
 80067b8:	4800      	ldr	r0, [pc, #0]	; (80067bc <_localeconv_r+0x4>)
 80067ba:	4770      	bx	lr
 80067bc:	20000158 	.word	0x20000158

080067c0 <_close_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d06      	ldr	r5, [pc, #24]	; (80067dc <_close_r+0x1c>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fb f9ab 	bl	8001b26 <_close>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_close_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_close_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200009fc 	.word	0x200009fc

080067e0 <_lseek_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	; (8006800 <_lseek_r+0x20>)
 80067e4:	4604      	mov	r4, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fb f9c0 	bl	8001b74 <_lseek>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_lseek_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_lseek_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	200009fc 	.word	0x200009fc

08006804 <_read_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	; (8006824 <_read_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fb f94e 	bl	8001ab4 <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_read_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_read_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200009fc 	.word	0x200009fc

08006828 <_write_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d07      	ldr	r5, [pc, #28]	; (8006848 <_write_r+0x20>)
 800682c:	4604      	mov	r4, r0
 800682e:	4608      	mov	r0, r1
 8006830:	4611      	mov	r1, r2
 8006832:	2200      	movs	r2, #0
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fb f959 	bl	8001aee <_write>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_write_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_write_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	200009fc 	.word	0x200009fc

0800684c <__errno>:
 800684c:	4b01      	ldr	r3, [pc, #4]	; (8006854 <__errno+0x8>)
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000064 	.word	0x20000064

08006858 <__libc_init_array>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4d0d      	ldr	r5, [pc, #52]	; (8006890 <__libc_init_array+0x38>)
 800685c:	4c0d      	ldr	r4, [pc, #52]	; (8006894 <__libc_init_array+0x3c>)
 800685e:	1b64      	subs	r4, r4, r5
 8006860:	10a4      	asrs	r4, r4, #2
 8006862:	2600      	movs	r6, #0
 8006864:	42a6      	cmp	r6, r4
 8006866:	d109      	bne.n	800687c <__libc_init_array+0x24>
 8006868:	4d0b      	ldr	r5, [pc, #44]	; (8006898 <__libc_init_array+0x40>)
 800686a:	4c0c      	ldr	r4, [pc, #48]	; (800689c <__libc_init_array+0x44>)
 800686c:	f002 f894 	bl	8008998 <_init>
 8006870:	1b64      	subs	r4, r4, r5
 8006872:	10a4      	asrs	r4, r4, #2
 8006874:	2600      	movs	r6, #0
 8006876:	42a6      	cmp	r6, r4
 8006878:	d105      	bne.n	8006886 <__libc_init_array+0x2e>
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006880:	4798      	blx	r3
 8006882:	3601      	adds	r6, #1
 8006884:	e7ee      	b.n	8006864 <__libc_init_array+0xc>
 8006886:	f855 3b04 	ldr.w	r3, [r5], #4
 800688a:	4798      	blx	r3
 800688c:	3601      	adds	r6, #1
 800688e:	e7f2      	b.n	8006876 <__libc_init_array+0x1e>
 8006890:	08008dbc 	.word	0x08008dbc
 8006894:	08008dbc 	.word	0x08008dbc
 8006898:	08008dbc 	.word	0x08008dbc
 800689c:	08008dc0 	.word	0x08008dc0

080068a0 <__retarget_lock_acquire_recursive>:
 80068a0:	4770      	bx	lr

080068a2 <__retarget_lock_release_recursive>:
 80068a2:	4770      	bx	lr

080068a4 <quorem>:
 80068a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	6903      	ldr	r3, [r0, #16]
 80068aa:	690c      	ldr	r4, [r1, #16]
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	4607      	mov	r7, r0
 80068b0:	db7e      	blt.n	80069b0 <quorem+0x10c>
 80068b2:	3c01      	subs	r4, #1
 80068b4:	f101 0814 	add.w	r8, r1, #20
 80068b8:	f100 0514 	add.w	r5, r0, #20
 80068bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ca:	3301      	adds	r3, #1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80068da:	d331      	bcc.n	8006940 <quorem+0x9c>
 80068dc:	f04f 0e00 	mov.w	lr, #0
 80068e0:	4640      	mov	r0, r8
 80068e2:	46ac      	mov	ip, r5
 80068e4:	46f2      	mov	sl, lr
 80068e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80068ea:	b293      	uxth	r3, r2
 80068ec:	fb06 e303 	mla	r3, r6, r3, lr
 80068f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068f4:	0c1a      	lsrs	r2, r3, #16
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ebaa 0303 	sub.w	r3, sl, r3
 80068fc:	f8dc a000 	ldr.w	sl, [ip]
 8006900:	fa13 f38a 	uxtah	r3, r3, sl
 8006904:	fb06 220e 	mla	r2, r6, lr, r2
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006910:	b292      	uxth	r2, r2
 8006912:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800691a:	f8bd 3000 	ldrh.w	r3, [sp]
 800691e:	4581      	cmp	r9, r0
 8006920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006924:	f84c 3b04 	str.w	r3, [ip], #4
 8006928:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800692c:	d2db      	bcs.n	80068e6 <quorem+0x42>
 800692e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006932:	b92b      	cbnz	r3, 8006940 <quorem+0x9c>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	3b04      	subs	r3, #4
 8006938:	429d      	cmp	r5, r3
 800693a:	461a      	mov	r2, r3
 800693c:	d32c      	bcc.n	8006998 <quorem+0xf4>
 800693e:	613c      	str	r4, [r7, #16]
 8006940:	4638      	mov	r0, r7
 8006942:	f001 f9a7 	bl	8007c94 <__mcmp>
 8006946:	2800      	cmp	r0, #0
 8006948:	db22      	blt.n	8006990 <quorem+0xec>
 800694a:	3601      	adds	r6, #1
 800694c:	4629      	mov	r1, r5
 800694e:	2000      	movs	r0, #0
 8006950:	f858 2b04 	ldr.w	r2, [r8], #4
 8006954:	f8d1 c000 	ldr.w	ip, [r1]
 8006958:	b293      	uxth	r3, r2
 800695a:	1ac3      	subs	r3, r0, r3
 800695c:	0c12      	lsrs	r2, r2, #16
 800695e:	fa13 f38c 	uxtah	r3, r3, ip
 8006962:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006966:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800696a:	b29b      	uxth	r3, r3
 800696c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006970:	45c1      	cmp	r9, r8
 8006972:	f841 3b04 	str.w	r3, [r1], #4
 8006976:	ea4f 4022 	mov.w	r0, r2, asr #16
 800697a:	d2e9      	bcs.n	8006950 <quorem+0xac>
 800697c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006984:	b922      	cbnz	r2, 8006990 <quorem+0xec>
 8006986:	3b04      	subs	r3, #4
 8006988:	429d      	cmp	r5, r3
 800698a:	461a      	mov	r2, r3
 800698c:	d30a      	bcc.n	80069a4 <quorem+0x100>
 800698e:	613c      	str	r4, [r7, #16]
 8006990:	4630      	mov	r0, r6
 8006992:	b003      	add	sp, #12
 8006994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	3b04      	subs	r3, #4
 800699c:	2a00      	cmp	r2, #0
 800699e:	d1ce      	bne.n	800693e <quorem+0x9a>
 80069a0:	3c01      	subs	r4, #1
 80069a2:	e7c9      	b.n	8006938 <quorem+0x94>
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	3b04      	subs	r3, #4
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d1f0      	bne.n	800698e <quorem+0xea>
 80069ac:	3c01      	subs	r4, #1
 80069ae:	e7eb      	b.n	8006988 <quorem+0xe4>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e7ee      	b.n	8006992 <quorem+0xee>
 80069b4:	0000      	movs	r0, r0
	...

080069b8 <_dtoa_r>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	ed2d 8b04 	vpush	{d8-d9}
 80069c0:	69c5      	ldr	r5, [r0, #28]
 80069c2:	b093      	sub	sp, #76	; 0x4c
 80069c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069c8:	ec57 6b10 	vmov	r6, r7, d0
 80069cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069d0:	9107      	str	r1, [sp, #28]
 80069d2:	4604      	mov	r4, r0
 80069d4:	920a      	str	r2, [sp, #40]	; 0x28
 80069d6:	930d      	str	r3, [sp, #52]	; 0x34
 80069d8:	b975      	cbnz	r5, 80069f8 <_dtoa_r+0x40>
 80069da:	2010      	movs	r0, #16
 80069dc:	f000 fe2a 	bl	8007634 <malloc>
 80069e0:	4602      	mov	r2, r0
 80069e2:	61e0      	str	r0, [r4, #28]
 80069e4:	b920      	cbnz	r0, 80069f0 <_dtoa_r+0x38>
 80069e6:	4bae      	ldr	r3, [pc, #696]	; (8006ca0 <_dtoa_r+0x2e8>)
 80069e8:	21ef      	movs	r1, #239	; 0xef
 80069ea:	48ae      	ldr	r0, [pc, #696]	; (8006ca4 <_dtoa_r+0x2ec>)
 80069ec:	f001 fc90 	bl	8008310 <__assert_func>
 80069f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069f4:	6005      	str	r5, [r0, #0]
 80069f6:	60c5      	str	r5, [r0, #12]
 80069f8:	69e3      	ldr	r3, [r4, #28]
 80069fa:	6819      	ldr	r1, [r3, #0]
 80069fc:	b151      	cbz	r1, 8006a14 <_dtoa_r+0x5c>
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	604a      	str	r2, [r1, #4]
 8006a02:	2301      	movs	r3, #1
 8006a04:	4093      	lsls	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 ff07 	bl	800781c <_Bfree>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	1e3b      	subs	r3, r7, #0
 8006a16:	bfbb      	ittet	lt
 8006a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	9303      	strlt	r3, [sp, #12]
 8006a1e:	2300      	movge	r3, #0
 8006a20:	2201      	movlt	r2, #1
 8006a22:	bfac      	ite	ge
 8006a24:	f8c8 3000 	strge.w	r3, [r8]
 8006a28:	f8c8 2000 	strlt.w	r2, [r8]
 8006a2c:	4b9e      	ldr	r3, [pc, #632]	; (8006ca8 <_dtoa_r+0x2f0>)
 8006a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a32:	ea33 0308 	bics.w	r3, r3, r8
 8006a36:	d11b      	bne.n	8006a70 <_dtoa_r+0xb8>
 8006a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a44:	4333      	orrs	r3, r6
 8006a46:	f000 8593 	beq.w	8007570 <_dtoa_r+0xbb8>
 8006a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a4c:	b963      	cbnz	r3, 8006a68 <_dtoa_r+0xb0>
 8006a4e:	4b97      	ldr	r3, [pc, #604]	; (8006cac <_dtoa_r+0x2f4>)
 8006a50:	e027      	b.n	8006aa2 <_dtoa_r+0xea>
 8006a52:	4b97      	ldr	r3, [pc, #604]	; (8006cb0 <_dtoa_r+0x2f8>)
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	9800      	ldr	r0, [sp, #0]
 8006a5e:	b013      	add	sp, #76	; 0x4c
 8006a60:	ecbd 8b04 	vpop	{d8-d9}
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	4b90      	ldr	r3, [pc, #576]	; (8006cac <_dtoa_r+0x2f4>)
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	3303      	adds	r3, #3
 8006a6e:	e7f3      	b.n	8006a58 <_dtoa_r+0xa0>
 8006a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	ec51 0b17 	vmov	r0, r1, d7
 8006a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8006a7e:	eef0 8a67 	vmov.f32	s17, s15
 8006a82:	2300      	movs	r3, #0
 8006a84:	f7fa f838 	bl	8000af8 <__aeabi_dcmpeq>
 8006a88:	4681      	mov	r9, r0
 8006a8a:	b160      	cbz	r0, 8006aa6 <_dtoa_r+0xee>
 8006a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a8e:	2301      	movs	r3, #1
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8568 	beq.w	800756a <_dtoa_r+0xbb2>
 8006a9a:	4b86      	ldr	r3, [pc, #536]	; (8006cb4 <_dtoa_r+0x2fc>)
 8006a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	e7da      	b.n	8006a5c <_dtoa_r+0xa4>
 8006aa6:	aa10      	add	r2, sp, #64	; 0x40
 8006aa8:	a911      	add	r1, sp, #68	; 0x44
 8006aaa:	4620      	mov	r0, r4
 8006aac:	eeb0 0a48 	vmov.f32	s0, s16
 8006ab0:	eef0 0a68 	vmov.f32	s1, s17
 8006ab4:	f001 f994 	bl	8007de0 <__d2b>
 8006ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006abc:	4682      	mov	sl, r0
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	d07f      	beq.n	8006bc2 <_dtoa_r+0x20a>
 8006ac2:	ee18 3a90 	vmov	r3, s17
 8006ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006ace:	ec51 0b18 	vmov	r0, r1, d8
 8006ad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ade:	4619      	mov	r1, r3
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4b75      	ldr	r3, [pc, #468]	; (8006cb8 <_dtoa_r+0x300>)
 8006ae4:	f7f9 fbe8 	bl	80002b8 <__aeabi_dsub>
 8006ae8:	a367      	add	r3, pc, #412	; (adr r3, 8006c88 <_dtoa_r+0x2d0>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fd9b 	bl	8000628 <__aeabi_dmul>
 8006af2:	a367      	add	r3, pc, #412	; (adr r3, 8006c90 <_dtoa_r+0x2d8>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fbe0 	bl	80002bc <__adddf3>
 8006afc:	4606      	mov	r6, r0
 8006afe:	4628      	mov	r0, r5
 8006b00:	460f      	mov	r7, r1
 8006b02:	f7f9 fd27 	bl	8000554 <__aeabi_i2d>
 8006b06:	a364      	add	r3, pc, #400	; (adr r3, 8006c98 <_dtoa_r+0x2e0>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fd8c 	bl	8000628 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fbd0 	bl	80002bc <__adddf3>
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	460f      	mov	r7, r1
 8006b20:	f7fa f832 	bl	8000b88 <__aeabi_d2iz>
 8006b24:	2200      	movs	r2, #0
 8006b26:	4683      	mov	fp, r0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7f9 ffed 	bl	8000b0c <__aeabi_dcmplt>
 8006b32:	b148      	cbz	r0, 8006b48 <_dtoa_r+0x190>
 8006b34:	4658      	mov	r0, fp
 8006b36:	f7f9 fd0d 	bl	8000554 <__aeabi_i2d>
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	f7f9 ffdb 	bl	8000af8 <__aeabi_dcmpeq>
 8006b42:	b908      	cbnz	r0, 8006b48 <_dtoa_r+0x190>
 8006b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b48:	f1bb 0f16 	cmp.w	fp, #22
 8006b4c:	d857      	bhi.n	8006bfe <_dtoa_r+0x246>
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <_dtoa_r+0x304>)
 8006b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	ec51 0b18 	vmov	r0, r1, d8
 8006b5c:	f7f9 ffd6 	bl	8000b0c <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d04e      	beq.n	8006c02 <_dtoa_r+0x24a>
 8006b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b68:	2300      	movs	r3, #0
 8006b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b6e:	1b5b      	subs	r3, r3, r5
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	bf45      	ittet	mi
 8006b74:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b78:	9305      	strmi	r3, [sp, #20]
 8006b7a:	2300      	movpl	r3, #0
 8006b7c:	2300      	movmi	r3, #0
 8006b7e:	9206      	str	r2, [sp, #24]
 8006b80:	bf54      	ite	pl
 8006b82:	9305      	strpl	r3, [sp, #20]
 8006b84:	9306      	strmi	r3, [sp, #24]
 8006b86:	f1bb 0f00 	cmp.w	fp, #0
 8006b8a:	db3c      	blt.n	8006c06 <_dtoa_r+0x24e>
 8006b8c:	9b06      	ldr	r3, [sp, #24]
 8006b8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b92:	445b      	add	r3, fp
 8006b94:	9306      	str	r3, [sp, #24]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	9b07      	ldr	r3, [sp, #28]
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d868      	bhi.n	8006c72 <_dtoa_r+0x2ba>
 8006ba0:	2b05      	cmp	r3, #5
 8006ba2:	bfc4      	itt	gt
 8006ba4:	3b04      	subgt	r3, #4
 8006ba6:	9307      	strgt	r3, [sp, #28]
 8006ba8:	9b07      	ldr	r3, [sp, #28]
 8006baa:	f1a3 0302 	sub.w	r3, r3, #2
 8006bae:	bfcc      	ite	gt
 8006bb0:	2500      	movgt	r5, #0
 8006bb2:	2501      	movle	r5, #1
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	f200 8085 	bhi.w	8006cc4 <_dtoa_r+0x30c>
 8006bba:	e8df f003 	tbb	[pc, r3]
 8006bbe:	3b2e      	.short	0x3b2e
 8006bc0:	5839      	.short	0x5839
 8006bc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bc6:	441d      	add	r5, r3
 8006bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	bfc1      	itttt	gt
 8006bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006bdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006be0:	bfd6      	itet	le
 8006be2:	f1c3 0320 	rsble	r3, r3, #32
 8006be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bea:	fa06 f003 	lslle.w	r0, r6, r3
 8006bee:	f7f9 fca1 	bl	8000534 <__aeabi_ui2d>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bf8:	3d01      	subs	r5, #1
 8006bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8006bfc:	e76f      	b.n	8006ade <_dtoa_r+0x126>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e7b3      	b.n	8006b6a <_dtoa_r+0x1b2>
 8006c02:	900c      	str	r0, [sp, #48]	; 0x30
 8006c04:	e7b2      	b.n	8006b6c <_dtoa_r+0x1b4>
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	eba3 030b 	sub.w	r3, r3, fp
 8006c0c:	9305      	str	r3, [sp, #20]
 8006c0e:	f1cb 0300 	rsb	r3, fp, #0
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	2300      	movs	r3, #0
 8006c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c18:	e7bf      	b.n	8006b9a <_dtoa_r+0x1e2>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dc52      	bgt.n	8006cca <_dtoa_r+0x312>
 8006c24:	2301      	movs	r3, #1
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c2e:	e00b      	b.n	8006c48 <_dtoa_r+0x290>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e7f3      	b.n	8006c1c <_dtoa_r+0x264>
 8006c34:	2300      	movs	r3, #0
 8006c36:	9309      	str	r3, [sp, #36]	; 0x24
 8006c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3a:	445b      	add	r3, fp
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	bfb8      	it	lt
 8006c46:	2301      	movlt	r3, #1
 8006c48:	69e0      	ldr	r0, [r4, #28]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	f102 0614 	add.w	r6, r2, #20
 8006c52:	429e      	cmp	r6, r3
 8006c54:	d93d      	bls.n	8006cd2 <_dtoa_r+0x31a>
 8006c56:	6041      	str	r1, [r0, #4]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 fd9f 	bl	800779c <_Balloc>
 8006c5e:	9000      	str	r0, [sp, #0]
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d139      	bne.n	8006cd8 <_dtoa_r+0x320>
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <_dtoa_r+0x308>)
 8006c66:	4602      	mov	r2, r0
 8006c68:	f240 11af 	movw	r1, #431	; 0x1af
 8006c6c:	e6bd      	b.n	80069ea <_dtoa_r+0x32>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7e1      	b.n	8006c36 <_dtoa_r+0x27e>
 8006c72:	2501      	movs	r5, #1
 8006c74:	2300      	movs	r3, #0
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	9509      	str	r5, [sp, #36]	; 0x24
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	2200      	movs	r2, #0
 8006c84:	2312      	movs	r3, #18
 8006c86:	e7d1      	b.n	8006c2c <_dtoa_r+0x274>
 8006c88:	636f4361 	.word	0x636f4361
 8006c8c:	3fd287a7 	.word	0x3fd287a7
 8006c90:	8b60c8b3 	.word	0x8b60c8b3
 8006c94:	3fc68a28 	.word	0x3fc68a28
 8006c98:	509f79fb 	.word	0x509f79fb
 8006c9c:	3fd34413 	.word	0x3fd34413
 8006ca0:	08008a81 	.word	0x08008a81
 8006ca4:	08008a98 	.word	0x08008a98
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	08008a7d 	.word	0x08008a7d
 8006cb0:	08008a74 	.word	0x08008a74
 8006cb4:	08008a51 	.word	0x08008a51
 8006cb8:	3ff80000 	.word	0x3ff80000
 8006cbc:	08008b88 	.word	0x08008b88
 8006cc0:	08008af0 	.word	0x08008af0
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc8:	e7d7      	b.n	8006c7a <_dtoa_r+0x2c2>
 8006cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	e7ba      	b.n	8006c48 <_dtoa_r+0x290>
 8006cd2:	3101      	adds	r1, #1
 8006cd4:	0052      	lsls	r2, r2, #1
 8006cd6:	e7ba      	b.n	8006c4e <_dtoa_r+0x296>
 8006cd8:	69e3      	ldr	r3, [r4, #28]
 8006cda:	9a00      	ldr	r2, [sp, #0]
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	2b0e      	cmp	r3, #14
 8006ce2:	f200 80a8 	bhi.w	8006e36 <_dtoa_r+0x47e>
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	f000 80a5 	beq.w	8006e36 <_dtoa_r+0x47e>
 8006cec:	f1bb 0f00 	cmp.w	fp, #0
 8006cf0:	dd38      	ble.n	8006d64 <_dtoa_r+0x3ac>
 8006cf2:	4bc0      	ldr	r3, [pc, #768]	; (8006ff4 <_dtoa_r+0x63c>)
 8006cf4:	f00b 020f 	and.w	r2, fp, #15
 8006cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d08:	d019      	beq.n	8006d3e <_dtoa_r+0x386>
 8006d0a:	4bbb      	ldr	r3, [pc, #748]	; (8006ff8 <_dtoa_r+0x640>)
 8006d0c:	ec51 0b18 	vmov	r0, r1, d8
 8006d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d14:	f7f9 fdb2 	bl	800087c <__aeabi_ddiv>
 8006d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1c:	f008 080f 	and.w	r8, r8, #15
 8006d20:	2503      	movs	r5, #3
 8006d22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006ff8 <_dtoa_r+0x640>
 8006d26:	f1b8 0f00 	cmp.w	r8, #0
 8006d2a:	d10a      	bne.n	8006d42 <_dtoa_r+0x38a>
 8006d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d30:	4632      	mov	r2, r6
 8006d32:	463b      	mov	r3, r7
 8006d34:	f7f9 fda2 	bl	800087c <__aeabi_ddiv>
 8006d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3c:	e02b      	b.n	8006d96 <_dtoa_r+0x3de>
 8006d3e:	2502      	movs	r5, #2
 8006d40:	e7ef      	b.n	8006d22 <_dtoa_r+0x36a>
 8006d42:	f018 0f01 	tst.w	r8, #1
 8006d46:	d008      	beq.n	8006d5a <_dtoa_r+0x3a2>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d50:	f7f9 fc6a 	bl	8000628 <__aeabi_dmul>
 8006d54:	3501      	adds	r5, #1
 8006d56:	4606      	mov	r6, r0
 8006d58:	460f      	mov	r7, r1
 8006d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d5e:	f109 0908 	add.w	r9, r9, #8
 8006d62:	e7e0      	b.n	8006d26 <_dtoa_r+0x36e>
 8006d64:	f000 809f 	beq.w	8006ea6 <_dtoa_r+0x4ee>
 8006d68:	f1cb 0600 	rsb	r6, fp, #0
 8006d6c:	4ba1      	ldr	r3, [pc, #644]	; (8006ff4 <_dtoa_r+0x63c>)
 8006d6e:	4fa2      	ldr	r7, [pc, #648]	; (8006ff8 <_dtoa_r+0x640>)
 8006d70:	f006 020f 	and.w	r2, r6, #15
 8006d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	ec51 0b18 	vmov	r0, r1, d8
 8006d80:	f7f9 fc52 	bl	8000628 <__aeabi_dmul>
 8006d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d88:	1136      	asrs	r6, r6, #4
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2502      	movs	r5, #2
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	d17e      	bne.n	8006e90 <_dtoa_r+0x4d8>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1d0      	bne.n	8006d38 <_dtoa_r+0x380>
 8006d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8084 	beq.w	8006eaa <_dtoa_r+0x4f2>
 8006da2:	4b96      	ldr	r3, [pc, #600]	; (8006ffc <_dtoa_r+0x644>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	f7f9 feaf 	bl	8000b0c <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d07b      	beq.n	8006eaa <_dtoa_r+0x4f2>
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d078      	beq.n	8006eaa <_dtoa_r+0x4f2>
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd39      	ble.n	8006e32 <_dtoa_r+0x47a>
 8006dbe:	4b90      	ldr	r3, [pc, #576]	; (8007000 <_dtoa_r+0x648>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fc2f 	bl	8000628 <__aeabi_dmul>
 8006dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dce:	9e01      	ldr	r6, [sp, #4]
 8006dd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f7f9 fbba 	bl	8000554 <__aeabi_i2d>
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	f7f9 fc20 	bl	8000628 <__aeabi_dmul>
 8006de8:	4b86      	ldr	r3, [pc, #536]	; (8007004 <_dtoa_r+0x64c>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fa66 	bl	80002bc <__adddf3>
 8006df0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	d158      	bne.n	8006eb0 <_dtoa_r+0x4f8>
 8006dfe:	4b82      	ldr	r3, [pc, #520]	; (8007008 <_dtoa_r+0x650>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fa57 	bl	80002b8 <__aeabi_dsub>
 8006e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	f7f9 fe99 	bl	8000b48 <__aeabi_dcmpgt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f040 8296 	bne.w	8007348 <_dtoa_r+0x990>
 8006e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e20:	4640      	mov	r0, r8
 8006e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7f9 fe70 	bl	8000b0c <__aeabi_dcmplt>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	f040 8289 	bne.w	8007344 <_dtoa_r+0x98c>
 8006e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f2c0 814e 	blt.w	80070da <_dtoa_r+0x722>
 8006e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e42:	f300 814a 	bgt.w	80070da <_dtoa_r+0x722>
 8006e46:	4b6b      	ldr	r3, [pc, #428]	; (8006ff4 <_dtoa_r+0x63c>)
 8006e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f280 80dc 	bge.w	8007010 <_dtoa_r+0x658>
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f300 80d8 	bgt.w	8007010 <_dtoa_r+0x658>
 8006e60:	f040 826f 	bne.w	8007342 <_dtoa_r+0x98a>
 8006e64:	4b68      	ldr	r3, [pc, #416]	; (8007008 <_dtoa_r+0x650>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fbdc 	bl	8000628 <__aeabi_dmul>
 8006e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e74:	f7f9 fe5e 	bl	8000b34 <__aeabi_dcmpge>
 8006e78:	9e04      	ldr	r6, [sp, #16]
 8006e7a:	4637      	mov	r7, r6
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 8245 	bne.w	800730c <_dtoa_r+0x954>
 8006e82:	9d00      	ldr	r5, [sp, #0]
 8006e84:	2331      	movs	r3, #49	; 0x31
 8006e86:	f805 3b01 	strb.w	r3, [r5], #1
 8006e8a:	f10b 0b01 	add.w	fp, fp, #1
 8006e8e:	e241      	b.n	8007314 <_dtoa_r+0x95c>
 8006e90:	07f2      	lsls	r2, r6, #31
 8006e92:	d505      	bpl.n	8006ea0 <_dtoa_r+0x4e8>
 8006e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e98:	f7f9 fbc6 	bl	8000628 <__aeabi_dmul>
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	1076      	asrs	r6, r6, #1
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	e773      	b.n	8006d8e <_dtoa_r+0x3d6>
 8006ea6:	2502      	movs	r5, #2
 8006ea8:	e775      	b.n	8006d96 <_dtoa_r+0x3de>
 8006eaa:	9e04      	ldr	r6, [sp, #16]
 8006eac:	465f      	mov	r7, fp
 8006eae:	e792      	b.n	8006dd6 <_dtoa_r+0x41e>
 8006eb0:	9900      	ldr	r1, [sp, #0]
 8006eb2:	4b50      	ldr	r3, [pc, #320]	; (8006ff4 <_dtoa_r+0x63c>)
 8006eb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eb8:	4431      	add	r1, r6
 8006eba:	9102      	str	r1, [sp, #8]
 8006ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ebe:	eeb0 9a47 	vmov.f32	s18, s14
 8006ec2:	eef0 9a67 	vmov.f32	s19, s15
 8006ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d044      	beq.n	8006f5c <_dtoa_r+0x5a4>
 8006ed2:	494e      	ldr	r1, [pc, #312]	; (800700c <_dtoa_r+0x654>)
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	f7f9 fcd1 	bl	800087c <__aeabi_ddiv>
 8006eda:	ec53 2b19 	vmov	r2, r3, d9
 8006ede:	f7f9 f9eb 	bl	80002b8 <__aeabi_dsub>
 8006ee2:	9d00      	ldr	r5, [sp, #0]
 8006ee4:	ec41 0b19 	vmov	d9, r0, r1
 8006ee8:	4649      	mov	r1, r9
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7f9 fe4c 	bl	8000b88 <__aeabi_d2iz>
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	f7f9 fb2f 	bl	8000554 <__aeabi_i2d>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 f9db 	bl	80002b8 <__aeabi_dsub>
 8006f02:	3630      	adds	r6, #48	; 0x30
 8006f04:	f805 6b01 	strb.w	r6, [r5], #1
 8006f08:	ec53 2b19 	vmov	r2, r3, d9
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	4689      	mov	r9, r1
 8006f10:	f7f9 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d164      	bne.n	8006fe2 <_dtoa_r+0x62a>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	4937      	ldr	r1, [pc, #220]	; (8006ffc <_dtoa_r+0x644>)
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f7f9 f9ca 	bl	80002b8 <__aeabi_dsub>
 8006f24:	ec53 2b19 	vmov	r2, r3, d9
 8006f28:	f7f9 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f040 80b6 	bne.w	800709e <_dtoa_r+0x6e6>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	429d      	cmp	r5, r3
 8006f36:	f43f af7c 	beq.w	8006e32 <_dtoa_r+0x47a>
 8006f3a:	4b31      	ldr	r3, [pc, #196]	; (8007000 <_dtoa_r+0x648>)
 8006f3c:	ec51 0b19 	vmov	r0, r1, d9
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 fb71 	bl	8000628 <__aeabi_dmul>
 8006f46:	4b2e      	ldr	r3, [pc, #184]	; (8007000 <_dtoa_r+0x648>)
 8006f48:	ec41 0b19 	vmov	d9, r0, r1
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 fb69 	bl	8000628 <__aeabi_dmul>
 8006f56:	4680      	mov	r8, r0
 8006f58:	4689      	mov	r9, r1
 8006f5a:	e7c5      	b.n	8006ee8 <_dtoa_r+0x530>
 8006f5c:	ec51 0b17 	vmov	r0, r1, d7
 8006f60:	f7f9 fb62 	bl	8000628 <__aeabi_dmul>
 8006f64:	9b02      	ldr	r3, [sp, #8]
 8006f66:	9d00      	ldr	r5, [sp, #0]
 8006f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f6a:	ec41 0b19 	vmov	d9, r0, r1
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	f7f9 fe09 	bl	8000b88 <__aeabi_d2iz>
 8006f76:	4606      	mov	r6, r0
 8006f78:	f7f9 faec 	bl	8000554 <__aeabi_i2d>
 8006f7c:	3630      	adds	r6, #48	; 0x30
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f997 	bl	80002b8 <__aeabi_dsub>
 8006f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	429d      	cmp	r5, r3
 8006f92:	4680      	mov	r8, r0
 8006f94:	4689      	mov	r9, r1
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	d124      	bne.n	8006fe6 <_dtoa_r+0x62e>
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	; (800700c <_dtoa_r+0x654>)
 8006f9e:	ec51 0b19 	vmov	r0, r1, d9
 8006fa2:	f7f9 f98b 	bl	80002bc <__adddf3>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d173      	bne.n	800709e <_dtoa_r+0x6e6>
 8006fb6:	ec53 2b19 	vmov	r2, r3, d9
 8006fba:	4914      	ldr	r1, [pc, #80]	; (800700c <_dtoa_r+0x654>)
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f7f9 f97b 	bl	80002b8 <__aeabi_dsub>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	4649      	mov	r1, r9
 8006fca:	f7f9 fd9f 	bl	8000b0c <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f43f af2f 	beq.w	8006e32 <_dtoa_r+0x47a>
 8006fd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fd6:	1e6b      	subs	r3, r5, #1
 8006fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fde:	2b30      	cmp	r3, #48	; 0x30
 8006fe0:	d0f8      	beq.n	8006fd4 <_dtoa_r+0x61c>
 8006fe2:	46bb      	mov	fp, r7
 8006fe4:	e04a      	b.n	800707c <_dtoa_r+0x6c4>
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <_dtoa_r+0x648>)
 8006fe8:	f7f9 fb1e 	bl	8000628 <__aeabi_dmul>
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	e7bd      	b.n	8006f6e <_dtoa_r+0x5b6>
 8006ff2:	bf00      	nop
 8006ff4:	08008b88 	.word	0x08008b88
 8006ff8:	08008b60 	.word	0x08008b60
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	40240000 	.word	0x40240000
 8007004:	401c0000 	.word	0x401c0000
 8007008:	40140000 	.word	0x40140000
 800700c:	3fe00000 	.word	0x3fe00000
 8007010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007014:	9d00      	ldr	r5, [sp, #0]
 8007016:	4642      	mov	r2, r8
 8007018:	464b      	mov	r3, r9
 800701a:	4630      	mov	r0, r6
 800701c:	4639      	mov	r1, r7
 800701e:	f7f9 fc2d 	bl	800087c <__aeabi_ddiv>
 8007022:	f7f9 fdb1 	bl	8000b88 <__aeabi_d2iz>
 8007026:	9001      	str	r0, [sp, #4]
 8007028:	f7f9 fa94 	bl	8000554 <__aeabi_i2d>
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	f7f9 fafa 	bl	8000628 <__aeabi_dmul>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 f93c 	bl	80002b8 <__aeabi_dsub>
 8007040:	9e01      	ldr	r6, [sp, #4]
 8007042:	9f04      	ldr	r7, [sp, #16]
 8007044:	3630      	adds	r6, #48	; 0x30
 8007046:	f805 6b01 	strb.w	r6, [r5], #1
 800704a:	9e00      	ldr	r6, [sp, #0]
 800704c:	1bae      	subs	r6, r5, r6
 800704e:	42b7      	cmp	r7, r6
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	d134      	bne.n	80070c0 <_dtoa_r+0x708>
 8007056:	f7f9 f931 	bl	80002bc <__adddf3>
 800705a:	4642      	mov	r2, r8
 800705c:	464b      	mov	r3, r9
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	f7f9 fd71 	bl	8000b48 <__aeabi_dcmpgt>
 8007066:	b9c8      	cbnz	r0, 800709c <_dtoa_r+0x6e4>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	4630      	mov	r0, r6
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 fd42 	bl	8000af8 <__aeabi_dcmpeq>
 8007074:	b110      	cbz	r0, 800707c <_dtoa_r+0x6c4>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	07db      	lsls	r3, r3, #31
 800707a:	d40f      	bmi.n	800709c <_dtoa_r+0x6e4>
 800707c:	4651      	mov	r1, sl
 800707e:	4620      	mov	r0, r4
 8007080:	f000 fbcc 	bl	800781c <_Bfree>
 8007084:	2300      	movs	r3, #0
 8007086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007088:	702b      	strb	r3, [r5, #0]
 800708a:	f10b 0301 	add.w	r3, fp, #1
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007092:	2b00      	cmp	r3, #0
 8007094:	f43f ace2 	beq.w	8006a5c <_dtoa_r+0xa4>
 8007098:	601d      	str	r5, [r3, #0]
 800709a:	e4df      	b.n	8006a5c <_dtoa_r+0xa4>
 800709c:	465f      	mov	r7, fp
 800709e:	462b      	mov	r3, r5
 80070a0:	461d      	mov	r5, r3
 80070a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070a6:	2a39      	cmp	r2, #57	; 0x39
 80070a8:	d106      	bne.n	80070b8 <_dtoa_r+0x700>
 80070aa:	9a00      	ldr	r2, [sp, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1f7      	bne.n	80070a0 <_dtoa_r+0x6e8>
 80070b0:	9900      	ldr	r1, [sp, #0]
 80070b2:	2230      	movs	r2, #48	; 0x30
 80070b4:	3701      	adds	r7, #1
 80070b6:	700a      	strb	r2, [r1, #0]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	3201      	adds	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e790      	b.n	8006fe2 <_dtoa_r+0x62a>
 80070c0:	4ba3      	ldr	r3, [pc, #652]	; (8007350 <_dtoa_r+0x998>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 fab0 	bl	8000628 <__aeabi_dmul>
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	4606      	mov	r6, r0
 80070ce:	460f      	mov	r7, r1
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d09e      	beq.n	8007016 <_dtoa_r+0x65e>
 80070d8:	e7d0      	b.n	800707c <_dtoa_r+0x6c4>
 80070da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070dc:	2a00      	cmp	r2, #0
 80070de:	f000 80ca 	beq.w	8007276 <_dtoa_r+0x8be>
 80070e2:	9a07      	ldr	r2, [sp, #28]
 80070e4:	2a01      	cmp	r2, #1
 80070e6:	f300 80ad 	bgt.w	8007244 <_dtoa_r+0x88c>
 80070ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	f000 80a5 	beq.w	800723c <_dtoa_r+0x884>
 80070f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070f6:	9e08      	ldr	r6, [sp, #32]
 80070f8:	9d05      	ldr	r5, [sp, #20]
 80070fa:	9a05      	ldr	r2, [sp, #20]
 80070fc:	441a      	add	r2, r3
 80070fe:	9205      	str	r2, [sp, #20]
 8007100:	9a06      	ldr	r2, [sp, #24]
 8007102:	2101      	movs	r1, #1
 8007104:	441a      	add	r2, r3
 8007106:	4620      	mov	r0, r4
 8007108:	9206      	str	r2, [sp, #24]
 800710a:	f000 fc3d 	bl	8007988 <__i2b>
 800710e:	4607      	mov	r7, r0
 8007110:	b165      	cbz	r5, 800712c <_dtoa_r+0x774>
 8007112:	9b06      	ldr	r3, [sp, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	dd09      	ble.n	800712c <_dtoa_r+0x774>
 8007118:	42ab      	cmp	r3, r5
 800711a:	9a05      	ldr	r2, [sp, #20]
 800711c:	bfa8      	it	ge
 800711e:	462b      	movge	r3, r5
 8007120:	1ad2      	subs	r2, r2, r3
 8007122:	9205      	str	r2, [sp, #20]
 8007124:	9a06      	ldr	r2, [sp, #24]
 8007126:	1aed      	subs	r5, r5, r3
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	9306      	str	r3, [sp, #24]
 800712c:	9b08      	ldr	r3, [sp, #32]
 800712e:	b1f3      	cbz	r3, 800716e <_dtoa_r+0x7b6>
 8007130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80a3 	beq.w	800727e <_dtoa_r+0x8c6>
 8007138:	2e00      	cmp	r6, #0
 800713a:	dd10      	ble.n	800715e <_dtoa_r+0x7a6>
 800713c:	4639      	mov	r1, r7
 800713e:	4632      	mov	r2, r6
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fce1 	bl	8007b08 <__pow5mult>
 8007146:	4652      	mov	r2, sl
 8007148:	4601      	mov	r1, r0
 800714a:	4607      	mov	r7, r0
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fc31 	bl	80079b4 <__multiply>
 8007152:	4651      	mov	r1, sl
 8007154:	4680      	mov	r8, r0
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fb60 	bl	800781c <_Bfree>
 800715c:	46c2      	mov	sl, r8
 800715e:	9b08      	ldr	r3, [sp, #32]
 8007160:	1b9a      	subs	r2, r3, r6
 8007162:	d004      	beq.n	800716e <_dtoa_r+0x7b6>
 8007164:	4651      	mov	r1, sl
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fcce 	bl	8007b08 <__pow5mult>
 800716c:	4682      	mov	sl, r0
 800716e:	2101      	movs	r1, #1
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fc09 	bl	8007988 <__i2b>
 8007176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	4606      	mov	r6, r0
 800717c:	f340 8081 	ble.w	8007282 <_dtoa_r+0x8ca>
 8007180:	461a      	mov	r2, r3
 8007182:	4601      	mov	r1, r0
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fcbf 	bl	8007b08 <__pow5mult>
 800718a:	9b07      	ldr	r3, [sp, #28]
 800718c:	2b01      	cmp	r3, #1
 800718e:	4606      	mov	r6, r0
 8007190:	dd7a      	ble.n	8007288 <_dtoa_r+0x8d0>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	6933      	ldr	r3, [r6, #16]
 8007198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800719c:	6918      	ldr	r0, [r3, #16]
 800719e:	f000 fba5 	bl	80078ec <__hi0bits>
 80071a2:	f1c0 0020 	rsb	r0, r0, #32
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	4418      	add	r0, r3
 80071aa:	f010 001f 	ands.w	r0, r0, #31
 80071ae:	f000 8094 	beq.w	80072da <_dtoa_r+0x922>
 80071b2:	f1c0 0320 	rsb	r3, r0, #32
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	f340 8085 	ble.w	80072c6 <_dtoa_r+0x90e>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	f1c0 001c 	rsb	r0, r0, #28
 80071c2:	4403      	add	r3, r0
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	4403      	add	r3, r0
 80071ca:	4405      	add	r5, r0
 80071cc:	9306      	str	r3, [sp, #24]
 80071ce:	9b05      	ldr	r3, [sp, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dd05      	ble.n	80071e0 <_dtoa_r+0x828>
 80071d4:	4651      	mov	r1, sl
 80071d6:	461a      	mov	r2, r3
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fcef 	bl	8007bbc <__lshift>
 80071de:	4682      	mov	sl, r0
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dd05      	ble.n	80071f2 <_dtoa_r+0x83a>
 80071e6:	4631      	mov	r1, r6
 80071e8:	461a      	mov	r2, r3
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fce6 	bl	8007bbc <__lshift>
 80071f0:	4606      	mov	r6, r0
 80071f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d072      	beq.n	80072de <_dtoa_r+0x926>
 80071f8:	4631      	mov	r1, r6
 80071fa:	4650      	mov	r0, sl
 80071fc:	f000 fd4a 	bl	8007c94 <__mcmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	da6c      	bge.n	80072de <_dtoa_r+0x926>
 8007204:	2300      	movs	r3, #0
 8007206:	4651      	mov	r1, sl
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fb28 	bl	8007860 <__multadd>
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007216:	4682      	mov	sl, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 81b0 	beq.w	800757e <_dtoa_r+0xbc6>
 800721e:	2300      	movs	r3, #0
 8007220:	4639      	mov	r1, r7
 8007222:	220a      	movs	r2, #10
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fb1b 	bl	8007860 <__multadd>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	4607      	mov	r7, r0
 8007230:	f300 8096 	bgt.w	8007360 <_dtoa_r+0x9a8>
 8007234:	9b07      	ldr	r3, [sp, #28]
 8007236:	2b02      	cmp	r3, #2
 8007238:	dc59      	bgt.n	80072ee <_dtoa_r+0x936>
 800723a:	e091      	b.n	8007360 <_dtoa_r+0x9a8>
 800723c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800723e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007242:	e758      	b.n	80070f6 <_dtoa_r+0x73e>
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	1e5e      	subs	r6, r3, #1
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	42b3      	cmp	r3, r6
 800724c:	bfbf      	itttt	lt
 800724e:	9b08      	ldrlt	r3, [sp, #32]
 8007250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007252:	9608      	strlt	r6, [sp, #32]
 8007254:	1af3      	sublt	r3, r6, r3
 8007256:	bfb4      	ite	lt
 8007258:	18d2      	addlt	r2, r2, r3
 800725a:	1b9e      	subge	r6, r3, r6
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	bfbc      	itt	lt
 8007260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007262:	2600      	movlt	r6, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfb7      	itett	lt
 8007268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800726c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007270:	1a9d      	sublt	r5, r3, r2
 8007272:	2300      	movlt	r3, #0
 8007274:	e741      	b.n	80070fa <_dtoa_r+0x742>
 8007276:	9e08      	ldr	r6, [sp, #32]
 8007278:	9d05      	ldr	r5, [sp, #20]
 800727a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800727c:	e748      	b.n	8007110 <_dtoa_r+0x758>
 800727e:	9a08      	ldr	r2, [sp, #32]
 8007280:	e770      	b.n	8007164 <_dtoa_r+0x7ac>
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	2b01      	cmp	r3, #1
 8007286:	dc19      	bgt.n	80072bc <_dtoa_r+0x904>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	b9bb      	cbnz	r3, 80072bc <_dtoa_r+0x904>
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007292:	b99b      	cbnz	r3, 80072bc <_dtoa_r+0x904>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	051b      	lsls	r3, r3, #20
 800729e:	b183      	cbz	r3, 80072c2 <_dtoa_r+0x90a>
 80072a0:	9b05      	ldr	r3, [sp, #20]
 80072a2:	3301      	adds	r3, #1
 80072a4:	9305      	str	r3, [sp, #20]
 80072a6:	9b06      	ldr	r3, [sp, #24]
 80072a8:	3301      	adds	r3, #1
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	f04f 0801 	mov.w	r8, #1
 80072b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f47f af6f 	bne.w	8007196 <_dtoa_r+0x7de>
 80072b8:	2001      	movs	r0, #1
 80072ba:	e774      	b.n	80071a6 <_dtoa_r+0x7ee>
 80072bc:	f04f 0800 	mov.w	r8, #0
 80072c0:	e7f6      	b.n	80072b0 <_dtoa_r+0x8f8>
 80072c2:	4698      	mov	r8, r3
 80072c4:	e7f4      	b.n	80072b0 <_dtoa_r+0x8f8>
 80072c6:	d082      	beq.n	80071ce <_dtoa_r+0x816>
 80072c8:	9a05      	ldr	r2, [sp, #20]
 80072ca:	331c      	adds	r3, #28
 80072cc:	441a      	add	r2, r3
 80072ce:	9205      	str	r2, [sp, #20]
 80072d0:	9a06      	ldr	r2, [sp, #24]
 80072d2:	441a      	add	r2, r3
 80072d4:	441d      	add	r5, r3
 80072d6:	9206      	str	r2, [sp, #24]
 80072d8:	e779      	b.n	80071ce <_dtoa_r+0x816>
 80072da:	4603      	mov	r3, r0
 80072dc:	e7f4      	b.n	80072c8 <_dtoa_r+0x910>
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc37      	bgt.n	8007354 <_dtoa_r+0x99c>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	dd34      	ble.n	8007354 <_dtoa_r+0x99c>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	b963      	cbnz	r3, 800730c <_dtoa_r+0x954>
 80072f2:	4631      	mov	r1, r6
 80072f4:	2205      	movs	r2, #5
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fab2 	bl	8007860 <__multadd>
 80072fc:	4601      	mov	r1, r0
 80072fe:	4606      	mov	r6, r0
 8007300:	4650      	mov	r0, sl
 8007302:	f000 fcc7 	bl	8007c94 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	f73f adbb 	bgt.w	8006e82 <_dtoa_r+0x4ca>
 800730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730e:	9d00      	ldr	r5, [sp, #0]
 8007310:	ea6f 0b03 	mvn.w	fp, r3
 8007314:	f04f 0800 	mov.w	r8, #0
 8007318:	4631      	mov	r1, r6
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fa7e 	bl	800781c <_Bfree>
 8007320:	2f00      	cmp	r7, #0
 8007322:	f43f aeab 	beq.w	800707c <_dtoa_r+0x6c4>
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	d005      	beq.n	8007338 <_dtoa_r+0x980>
 800732c:	45b8      	cmp	r8, r7
 800732e:	d003      	beq.n	8007338 <_dtoa_r+0x980>
 8007330:	4641      	mov	r1, r8
 8007332:	4620      	mov	r0, r4
 8007334:	f000 fa72 	bl	800781c <_Bfree>
 8007338:	4639      	mov	r1, r7
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fa6e 	bl	800781c <_Bfree>
 8007340:	e69c      	b.n	800707c <_dtoa_r+0x6c4>
 8007342:	2600      	movs	r6, #0
 8007344:	4637      	mov	r7, r6
 8007346:	e7e1      	b.n	800730c <_dtoa_r+0x954>
 8007348:	46bb      	mov	fp, r7
 800734a:	4637      	mov	r7, r6
 800734c:	e599      	b.n	8006e82 <_dtoa_r+0x4ca>
 800734e:	bf00      	nop
 8007350:	40240000 	.word	0x40240000
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80c8 	beq.w	80074ec <_dtoa_r+0xb34>
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	2d00      	cmp	r5, #0
 8007362:	dd05      	ble.n	8007370 <_dtoa_r+0x9b8>
 8007364:	4639      	mov	r1, r7
 8007366:	462a      	mov	r2, r5
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fc27 	bl	8007bbc <__lshift>
 800736e:	4607      	mov	r7, r0
 8007370:	f1b8 0f00 	cmp.w	r8, #0
 8007374:	d05b      	beq.n	800742e <_dtoa_r+0xa76>
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fa0f 	bl	800779c <_Balloc>
 800737e:	4605      	mov	r5, r0
 8007380:	b928      	cbnz	r0, 800738e <_dtoa_r+0x9d6>
 8007382:	4b83      	ldr	r3, [pc, #524]	; (8007590 <_dtoa_r+0xbd8>)
 8007384:	4602      	mov	r2, r0
 8007386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800738a:	f7ff bb2e 	b.w	80069ea <_dtoa_r+0x32>
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	3202      	adds	r2, #2
 8007392:	0092      	lsls	r2, r2, #2
 8007394:	f107 010c 	add.w	r1, r7, #12
 8007398:	300c      	adds	r0, #12
 800739a:	f000 ffab 	bl	80082f4 <memcpy>
 800739e:	2201      	movs	r2, #1
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fc0a 	bl	8007bbc <__lshift>
 80073a8:	9b00      	ldr	r3, [sp, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b2:	4413      	add	r3, r2
 80073b4:	9308      	str	r3, [sp, #32]
 80073b6:	9b02      	ldr	r3, [sp, #8]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	46b8      	mov	r8, r7
 80073be:	9306      	str	r3, [sp, #24]
 80073c0:	4607      	mov	r7, r0
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	4631      	mov	r1, r6
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4650      	mov	r0, sl
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f7ff fa6a 	bl	80068a4 <quorem>
 80073d0:	4641      	mov	r1, r8
 80073d2:	9002      	str	r0, [sp, #8]
 80073d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073d8:	4650      	mov	r0, sl
 80073da:	f000 fc5b 	bl	8007c94 <__mcmp>
 80073de:	463a      	mov	r2, r7
 80073e0:	9005      	str	r0, [sp, #20]
 80073e2:	4631      	mov	r1, r6
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fc71 	bl	8007ccc <__mdiff>
 80073ea:	68c2      	ldr	r2, [r0, #12]
 80073ec:	4605      	mov	r5, r0
 80073ee:	bb02      	cbnz	r2, 8007432 <_dtoa_r+0xa7a>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4650      	mov	r0, sl
 80073f4:	f000 fc4e 	bl	8007c94 <__mcmp>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4629      	mov	r1, r5
 80073fc:	4620      	mov	r0, r4
 80073fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007400:	f000 fa0c 	bl	800781c <_Bfree>
 8007404:	9b07      	ldr	r3, [sp, #28]
 8007406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007408:	9d04      	ldr	r5, [sp, #16]
 800740a:	ea43 0102 	orr.w	r1, r3, r2
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	4319      	orrs	r1, r3
 8007412:	d110      	bne.n	8007436 <_dtoa_r+0xa7e>
 8007414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007418:	d029      	beq.n	800746e <_dtoa_r+0xab6>
 800741a:	9b05      	ldr	r3, [sp, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd02      	ble.n	8007426 <_dtoa_r+0xa6e>
 8007420:	9b02      	ldr	r3, [sp, #8]
 8007422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	f883 9000 	strb.w	r9, [r3]
 800742c:	e774      	b.n	8007318 <_dtoa_r+0x960>
 800742e:	4638      	mov	r0, r7
 8007430:	e7ba      	b.n	80073a8 <_dtoa_r+0x9f0>
 8007432:	2201      	movs	r2, #1
 8007434:	e7e1      	b.n	80073fa <_dtoa_r+0xa42>
 8007436:	9b05      	ldr	r3, [sp, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	db04      	blt.n	8007446 <_dtoa_r+0xa8e>
 800743c:	9907      	ldr	r1, [sp, #28]
 800743e:	430b      	orrs	r3, r1
 8007440:	9906      	ldr	r1, [sp, #24]
 8007442:	430b      	orrs	r3, r1
 8007444:	d120      	bne.n	8007488 <_dtoa_r+0xad0>
 8007446:	2a00      	cmp	r2, #0
 8007448:	dded      	ble.n	8007426 <_dtoa_r+0xa6e>
 800744a:	4651      	mov	r1, sl
 800744c:	2201      	movs	r2, #1
 800744e:	4620      	mov	r0, r4
 8007450:	f000 fbb4 	bl	8007bbc <__lshift>
 8007454:	4631      	mov	r1, r6
 8007456:	4682      	mov	sl, r0
 8007458:	f000 fc1c 	bl	8007c94 <__mcmp>
 800745c:	2800      	cmp	r0, #0
 800745e:	dc03      	bgt.n	8007468 <_dtoa_r+0xab0>
 8007460:	d1e1      	bne.n	8007426 <_dtoa_r+0xa6e>
 8007462:	f019 0f01 	tst.w	r9, #1
 8007466:	d0de      	beq.n	8007426 <_dtoa_r+0xa6e>
 8007468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800746c:	d1d8      	bne.n	8007420 <_dtoa_r+0xa68>
 800746e:	9a01      	ldr	r2, [sp, #4]
 8007470:	2339      	movs	r3, #57	; 0x39
 8007472:	7013      	strb	r3, [r2, #0]
 8007474:	462b      	mov	r3, r5
 8007476:	461d      	mov	r5, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800747e:	2a39      	cmp	r2, #57	; 0x39
 8007480:	d06c      	beq.n	800755c <_dtoa_r+0xba4>
 8007482:	3201      	adds	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e747      	b.n	8007318 <_dtoa_r+0x960>
 8007488:	2a00      	cmp	r2, #0
 800748a:	dd07      	ble.n	800749c <_dtoa_r+0xae4>
 800748c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007490:	d0ed      	beq.n	800746e <_dtoa_r+0xab6>
 8007492:	9a01      	ldr	r2, [sp, #4]
 8007494:	f109 0301 	add.w	r3, r9, #1
 8007498:	7013      	strb	r3, [r2, #0]
 800749a:	e73d      	b.n	8007318 <_dtoa_r+0x960>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	9a08      	ldr	r2, [sp, #32]
 80074a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d043      	beq.n	8007530 <_dtoa_r+0xb78>
 80074a8:	4651      	mov	r1, sl
 80074aa:	2300      	movs	r3, #0
 80074ac:	220a      	movs	r2, #10
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f9d6 	bl	8007860 <__multadd>
 80074b4:	45b8      	cmp	r8, r7
 80074b6:	4682      	mov	sl, r0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	f04f 020a 	mov.w	r2, #10
 80074c0:	4641      	mov	r1, r8
 80074c2:	4620      	mov	r0, r4
 80074c4:	d107      	bne.n	80074d6 <_dtoa_r+0xb1e>
 80074c6:	f000 f9cb 	bl	8007860 <__multadd>
 80074ca:	4680      	mov	r8, r0
 80074cc:	4607      	mov	r7, r0
 80074ce:	9b04      	ldr	r3, [sp, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	e775      	b.n	80073c2 <_dtoa_r+0xa0a>
 80074d6:	f000 f9c3 	bl	8007860 <__multadd>
 80074da:	4639      	mov	r1, r7
 80074dc:	4680      	mov	r8, r0
 80074de:	2300      	movs	r3, #0
 80074e0:	220a      	movs	r2, #10
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 f9bc 	bl	8007860 <__multadd>
 80074e8:	4607      	mov	r7, r0
 80074ea:	e7f0      	b.n	80074ce <_dtoa_r+0xb16>
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	9d00      	ldr	r5, [sp, #0]
 80074f2:	4631      	mov	r1, r6
 80074f4:	4650      	mov	r0, sl
 80074f6:	f7ff f9d5 	bl	80068a4 <quorem>
 80074fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074fe:	9b00      	ldr	r3, [sp, #0]
 8007500:	f805 9b01 	strb.w	r9, [r5], #1
 8007504:	1aea      	subs	r2, r5, r3
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	4293      	cmp	r3, r2
 800750a:	dd07      	ble.n	800751c <_dtoa_r+0xb64>
 800750c:	4651      	mov	r1, sl
 800750e:	2300      	movs	r3, #0
 8007510:	220a      	movs	r2, #10
 8007512:	4620      	mov	r0, r4
 8007514:	f000 f9a4 	bl	8007860 <__multadd>
 8007518:	4682      	mov	sl, r0
 800751a:	e7ea      	b.n	80074f2 <_dtoa_r+0xb3a>
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfc8      	it	gt
 8007522:	461d      	movgt	r5, r3
 8007524:	9b00      	ldr	r3, [sp, #0]
 8007526:	bfd8      	it	le
 8007528:	2501      	movle	r5, #1
 800752a:	441d      	add	r5, r3
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	4651      	mov	r1, sl
 8007532:	2201      	movs	r2, #1
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fb41 	bl	8007bbc <__lshift>
 800753a:	4631      	mov	r1, r6
 800753c:	4682      	mov	sl, r0
 800753e:	f000 fba9 	bl	8007c94 <__mcmp>
 8007542:	2800      	cmp	r0, #0
 8007544:	dc96      	bgt.n	8007474 <_dtoa_r+0xabc>
 8007546:	d102      	bne.n	800754e <_dtoa_r+0xb96>
 8007548:	f019 0f01 	tst.w	r9, #1
 800754c:	d192      	bne.n	8007474 <_dtoa_r+0xabc>
 800754e:	462b      	mov	r3, r5
 8007550:	461d      	mov	r5, r3
 8007552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007556:	2a30      	cmp	r2, #48	; 0x30
 8007558:	d0fa      	beq.n	8007550 <_dtoa_r+0xb98>
 800755a:	e6dd      	b.n	8007318 <_dtoa_r+0x960>
 800755c:	9a00      	ldr	r2, [sp, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d189      	bne.n	8007476 <_dtoa_r+0xabe>
 8007562:	f10b 0b01 	add.w	fp, fp, #1
 8007566:	2331      	movs	r3, #49	; 0x31
 8007568:	e796      	b.n	8007498 <_dtoa_r+0xae0>
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <_dtoa_r+0xbdc>)
 800756c:	f7ff ba99 	b.w	8006aa2 <_dtoa_r+0xea>
 8007570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f aa6d 	bne.w	8006a52 <_dtoa_r+0x9a>
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <_dtoa_r+0xbe0>)
 800757a:	f7ff ba92 	b.w	8006aa2 <_dtoa_r+0xea>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dcb5      	bgt.n	80074f0 <_dtoa_r+0xb38>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	2b02      	cmp	r3, #2
 8007588:	f73f aeb1 	bgt.w	80072ee <_dtoa_r+0x936>
 800758c:	e7b0      	b.n	80074f0 <_dtoa_r+0xb38>
 800758e:	bf00      	nop
 8007590:	08008af0 	.word	0x08008af0
 8007594:	08008a50 	.word	0x08008a50
 8007598:	08008a74 	.word	0x08008a74

0800759c <_free_r>:
 800759c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759e:	2900      	cmp	r1, #0
 80075a0:	d044      	beq.n	800762c <_free_r+0x90>
 80075a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a6:	9001      	str	r0, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f1a1 0404 	sub.w	r4, r1, #4
 80075ae:	bfb8      	it	lt
 80075b0:	18e4      	addlt	r4, r4, r3
 80075b2:	f000 f8e7 	bl	8007784 <__malloc_lock>
 80075b6:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <_free_r+0x94>)
 80075b8:	9801      	ldr	r0, [sp, #4]
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x30>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	b003      	add	sp, #12
 80075c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c8:	f000 b8e2 	b.w	8007790 <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x46>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1949      	addeq	r1, r1, r5
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x22>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x50>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x46>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1855      	adds	r5, r2, r1
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x70>
 80075f4:	6824      	ldr	r4, [r4, #0]
 80075f6:	4421      	add	r1, r4
 80075f8:	1854      	adds	r4, r2, r1
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x26>
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	6053      	str	r3, [r2, #4]
 8007606:	440c      	add	r4, r1
 8007608:	6014      	str	r4, [r2, #0]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x26>
 800760c:	d902      	bls.n	8007614 <_free_r+0x78>
 800760e:	230c      	movs	r3, #12
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x26>
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	1961      	adds	r1, r4, r5
 8007618:	428b      	cmp	r3, r1
 800761a:	bf04      	itt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	bf04      	itt	eq
 8007624:	1949      	addeq	r1, r1, r5
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	6054      	str	r4, [r2, #4]
 800762a:	e7ca      	b.n	80075c2 <_free_r+0x26>
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	20000a04 	.word	0x20000a04

08007634 <malloc>:
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <malloc+0xc>)
 8007636:	4601      	mov	r1, r0
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	f000 b823 	b.w	8007684 <_malloc_r>
 800763e:	bf00      	nop
 8007640:	20000064 	.word	0x20000064

08007644 <sbrk_aligned>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4e0e      	ldr	r6, [pc, #56]	; (8007680 <sbrk_aligned+0x3c>)
 8007648:	460c      	mov	r4, r1
 800764a:	6831      	ldr	r1, [r6, #0]
 800764c:	4605      	mov	r5, r0
 800764e:	b911      	cbnz	r1, 8007656 <sbrk_aligned+0x12>
 8007650:	f000 fe40 	bl	80082d4 <_sbrk_r>
 8007654:	6030      	str	r0, [r6, #0]
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f000 fe3b 	bl	80082d4 <_sbrk_r>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d00a      	beq.n	8007678 <sbrk_aligned+0x34>
 8007662:	1cc4      	adds	r4, r0, #3
 8007664:	f024 0403 	bic.w	r4, r4, #3
 8007668:	42a0      	cmp	r0, r4
 800766a:	d007      	beq.n	800767c <sbrk_aligned+0x38>
 800766c:	1a21      	subs	r1, r4, r0
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fe30 	bl	80082d4 <_sbrk_r>
 8007674:	3001      	adds	r0, #1
 8007676:	d101      	bne.n	800767c <sbrk_aligned+0x38>
 8007678:	f04f 34ff 	mov.w	r4, #4294967295
 800767c:	4620      	mov	r0, r4
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	20000a08 	.word	0x20000a08

08007684 <_malloc_r>:
 8007684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007688:	1ccd      	adds	r5, r1, #3
 800768a:	f025 0503 	bic.w	r5, r5, #3
 800768e:	3508      	adds	r5, #8
 8007690:	2d0c      	cmp	r5, #12
 8007692:	bf38      	it	cc
 8007694:	250c      	movcc	r5, #12
 8007696:	2d00      	cmp	r5, #0
 8007698:	4607      	mov	r7, r0
 800769a:	db01      	blt.n	80076a0 <_malloc_r+0x1c>
 800769c:	42a9      	cmp	r1, r5
 800769e:	d905      	bls.n	80076ac <_malloc_r+0x28>
 80076a0:	230c      	movs	r3, #12
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	2600      	movs	r6, #0
 80076a6:	4630      	mov	r0, r6
 80076a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007780 <_malloc_r+0xfc>
 80076b0:	f000 f868 	bl	8007784 <__malloc_lock>
 80076b4:	f8d8 3000 	ldr.w	r3, [r8]
 80076b8:	461c      	mov	r4, r3
 80076ba:	bb5c      	cbnz	r4, 8007714 <_malloc_r+0x90>
 80076bc:	4629      	mov	r1, r5
 80076be:	4638      	mov	r0, r7
 80076c0:	f7ff ffc0 	bl	8007644 <sbrk_aligned>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	4604      	mov	r4, r0
 80076c8:	d155      	bne.n	8007776 <_malloc_r+0xf2>
 80076ca:	f8d8 4000 	ldr.w	r4, [r8]
 80076ce:	4626      	mov	r6, r4
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	d145      	bne.n	8007760 <_malloc_r+0xdc>
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d048      	beq.n	800776a <_malloc_r+0xe6>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	4631      	mov	r1, r6
 80076dc:	4638      	mov	r0, r7
 80076de:	eb04 0903 	add.w	r9, r4, r3
 80076e2:	f000 fdf7 	bl	80082d4 <_sbrk_r>
 80076e6:	4581      	cmp	r9, r0
 80076e8:	d13f      	bne.n	800776a <_malloc_r+0xe6>
 80076ea:	6821      	ldr	r1, [r4, #0]
 80076ec:	1a6d      	subs	r5, r5, r1
 80076ee:	4629      	mov	r1, r5
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff ffa7 	bl	8007644 <sbrk_aligned>
 80076f6:	3001      	adds	r0, #1
 80076f8:	d037      	beq.n	800776a <_malloc_r+0xe6>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	442b      	add	r3, r5
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	f8d8 3000 	ldr.w	r3, [r8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d038      	beq.n	800777a <_malloc_r+0xf6>
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	42a2      	cmp	r2, r4
 800770c:	d12b      	bne.n	8007766 <_malloc_r+0xe2>
 800770e:	2200      	movs	r2, #0
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	e00f      	b.n	8007734 <_malloc_r+0xb0>
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	1b52      	subs	r2, r2, r5
 8007718:	d41f      	bmi.n	800775a <_malloc_r+0xd6>
 800771a:	2a0b      	cmp	r2, #11
 800771c:	d917      	bls.n	800774e <_malloc_r+0xca>
 800771e:	1961      	adds	r1, r4, r5
 8007720:	42a3      	cmp	r3, r4
 8007722:	6025      	str	r5, [r4, #0]
 8007724:	bf18      	it	ne
 8007726:	6059      	strne	r1, [r3, #4]
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	bf08      	it	eq
 800772c:	f8c8 1000 	streq.w	r1, [r8]
 8007730:	5162      	str	r2, [r4, r5]
 8007732:	604b      	str	r3, [r1, #4]
 8007734:	4638      	mov	r0, r7
 8007736:	f104 060b 	add.w	r6, r4, #11
 800773a:	f000 f829 	bl	8007790 <__malloc_unlock>
 800773e:	f026 0607 	bic.w	r6, r6, #7
 8007742:	1d23      	adds	r3, r4, #4
 8007744:	1af2      	subs	r2, r6, r3
 8007746:	d0ae      	beq.n	80076a6 <_malloc_r+0x22>
 8007748:	1b9b      	subs	r3, r3, r6
 800774a:	50a3      	str	r3, [r4, r2]
 800774c:	e7ab      	b.n	80076a6 <_malloc_r+0x22>
 800774e:	42a3      	cmp	r3, r4
 8007750:	6862      	ldr	r2, [r4, #4]
 8007752:	d1dd      	bne.n	8007710 <_malloc_r+0x8c>
 8007754:	f8c8 2000 	str.w	r2, [r8]
 8007758:	e7ec      	b.n	8007734 <_malloc_r+0xb0>
 800775a:	4623      	mov	r3, r4
 800775c:	6864      	ldr	r4, [r4, #4]
 800775e:	e7ac      	b.n	80076ba <_malloc_r+0x36>
 8007760:	4634      	mov	r4, r6
 8007762:	6876      	ldr	r6, [r6, #4]
 8007764:	e7b4      	b.n	80076d0 <_malloc_r+0x4c>
 8007766:	4613      	mov	r3, r2
 8007768:	e7cc      	b.n	8007704 <_malloc_r+0x80>
 800776a:	230c      	movs	r3, #12
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	4638      	mov	r0, r7
 8007770:	f000 f80e 	bl	8007790 <__malloc_unlock>
 8007774:	e797      	b.n	80076a6 <_malloc_r+0x22>
 8007776:	6025      	str	r5, [r4, #0]
 8007778:	e7dc      	b.n	8007734 <_malloc_r+0xb0>
 800777a:	605b      	str	r3, [r3, #4]
 800777c:	deff      	udf	#255	; 0xff
 800777e:	bf00      	nop
 8007780:	20000a04 	.word	0x20000a04

08007784 <__malloc_lock>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__malloc_lock+0x8>)
 8007786:	f7ff b88b 	b.w	80068a0 <__retarget_lock_acquire_recursive>
 800778a:	bf00      	nop
 800778c:	20000a00 	.word	0x20000a00

08007790 <__malloc_unlock>:
 8007790:	4801      	ldr	r0, [pc, #4]	; (8007798 <__malloc_unlock+0x8>)
 8007792:	f7ff b886 	b.w	80068a2 <__retarget_lock_release_recursive>
 8007796:	bf00      	nop
 8007798:	20000a00 	.word	0x20000a00

0800779c <_Balloc>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	69c6      	ldr	r6, [r0, #28]
 80077a0:	4604      	mov	r4, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	b976      	cbnz	r6, 80077c4 <_Balloc+0x28>
 80077a6:	2010      	movs	r0, #16
 80077a8:	f7ff ff44 	bl	8007634 <malloc>
 80077ac:	4602      	mov	r2, r0
 80077ae:	61e0      	str	r0, [r4, #28]
 80077b0:	b920      	cbnz	r0, 80077bc <_Balloc+0x20>
 80077b2:	4b18      	ldr	r3, [pc, #96]	; (8007814 <_Balloc+0x78>)
 80077b4:	4818      	ldr	r0, [pc, #96]	; (8007818 <_Balloc+0x7c>)
 80077b6:	216b      	movs	r1, #107	; 0x6b
 80077b8:	f000 fdaa 	bl	8008310 <__assert_func>
 80077bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c0:	6006      	str	r6, [r0, #0]
 80077c2:	60c6      	str	r6, [r0, #12]
 80077c4:	69e6      	ldr	r6, [r4, #28]
 80077c6:	68f3      	ldr	r3, [r6, #12]
 80077c8:	b183      	cbz	r3, 80077ec <_Balloc+0x50>
 80077ca:	69e3      	ldr	r3, [r4, #28]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077d2:	b9b8      	cbnz	r0, 8007804 <_Balloc+0x68>
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f605 	lsl.w	r6, r1, r5
 80077da:	1d72      	adds	r2, r6, #5
 80077dc:	0092      	lsls	r2, r2, #2
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fdb4 	bl	800834c <_calloc_r>
 80077e4:	b160      	cbz	r0, 8007800 <_Balloc+0x64>
 80077e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ea:	e00e      	b.n	800780a <_Balloc+0x6e>
 80077ec:	2221      	movs	r2, #33	; 0x21
 80077ee:	2104      	movs	r1, #4
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fdab 	bl	800834c <_calloc_r>
 80077f6:	69e3      	ldr	r3, [r4, #28]
 80077f8:	60f0      	str	r0, [r6, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e4      	bne.n	80077ca <_Balloc+0x2e>
 8007800:	2000      	movs	r0, #0
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	6802      	ldr	r2, [r0, #0]
 8007806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800780a:	2300      	movs	r3, #0
 800780c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007810:	e7f7      	b.n	8007802 <_Balloc+0x66>
 8007812:	bf00      	nop
 8007814:	08008a81 	.word	0x08008a81
 8007818:	08008b01 	.word	0x08008b01

0800781c <_Bfree>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	69c6      	ldr	r6, [r0, #28]
 8007820:	4605      	mov	r5, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b976      	cbnz	r6, 8007844 <_Bfree+0x28>
 8007826:	2010      	movs	r0, #16
 8007828:	f7ff ff04 	bl	8007634 <malloc>
 800782c:	4602      	mov	r2, r0
 800782e:	61e8      	str	r0, [r5, #28]
 8007830:	b920      	cbnz	r0, 800783c <_Bfree+0x20>
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <_Bfree+0x3c>)
 8007834:	4809      	ldr	r0, [pc, #36]	; (800785c <_Bfree+0x40>)
 8007836:	218f      	movs	r1, #143	; 0x8f
 8007838:	f000 fd6a 	bl	8008310 <__assert_func>
 800783c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007840:	6006      	str	r6, [r0, #0]
 8007842:	60c6      	str	r6, [r0, #12]
 8007844:	b13c      	cbz	r4, 8007856 <_Bfree+0x3a>
 8007846:	69eb      	ldr	r3, [r5, #28]
 8007848:	6862      	ldr	r2, [r4, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007850:	6021      	str	r1, [r4, #0]
 8007852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	08008a81 	.word	0x08008a81
 800785c:	08008b01 	.word	0x08008b01

08007860 <__multadd>:
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	690d      	ldr	r5, [r1, #16]
 8007866:	4607      	mov	r7, r0
 8007868:	460c      	mov	r4, r1
 800786a:	461e      	mov	r6, r3
 800786c:	f101 0c14 	add.w	ip, r1, #20
 8007870:	2000      	movs	r0, #0
 8007872:	f8dc 3000 	ldr.w	r3, [ip]
 8007876:	b299      	uxth	r1, r3
 8007878:	fb02 6101 	mla	r1, r2, r1, r6
 800787c:	0c1e      	lsrs	r6, r3, #16
 800787e:	0c0b      	lsrs	r3, r1, #16
 8007880:	fb02 3306 	mla	r3, r2, r6, r3
 8007884:	b289      	uxth	r1, r1
 8007886:	3001      	adds	r0, #1
 8007888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800788c:	4285      	cmp	r5, r0
 800788e:	f84c 1b04 	str.w	r1, [ip], #4
 8007892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007896:	dcec      	bgt.n	8007872 <__multadd+0x12>
 8007898:	b30e      	cbz	r6, 80078de <__multadd+0x7e>
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	42ab      	cmp	r3, r5
 800789e:	dc19      	bgt.n	80078d4 <__multadd+0x74>
 80078a0:	6861      	ldr	r1, [r4, #4]
 80078a2:	4638      	mov	r0, r7
 80078a4:	3101      	adds	r1, #1
 80078a6:	f7ff ff79 	bl	800779c <_Balloc>
 80078aa:	4680      	mov	r8, r0
 80078ac:	b928      	cbnz	r0, 80078ba <__multadd+0x5a>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <__multadd+0x84>)
 80078b2:	480d      	ldr	r0, [pc, #52]	; (80078e8 <__multadd+0x88>)
 80078b4:	21ba      	movs	r1, #186	; 0xba
 80078b6:	f000 fd2b 	bl	8008310 <__assert_func>
 80078ba:	6922      	ldr	r2, [r4, #16]
 80078bc:	3202      	adds	r2, #2
 80078be:	f104 010c 	add.w	r1, r4, #12
 80078c2:	0092      	lsls	r2, r2, #2
 80078c4:	300c      	adds	r0, #12
 80078c6:	f000 fd15 	bl	80082f4 <memcpy>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ffa5 	bl	800781c <_Bfree>
 80078d2:	4644      	mov	r4, r8
 80078d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078d8:	3501      	adds	r5, #1
 80078da:	615e      	str	r6, [r3, #20]
 80078dc:	6125      	str	r5, [r4, #16]
 80078de:	4620      	mov	r0, r4
 80078e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e4:	08008af0 	.word	0x08008af0
 80078e8:	08008b01 	.word	0x08008b01

080078ec <__hi0bits>:
 80078ec:	0c03      	lsrs	r3, r0, #16
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	b9d3      	cbnz	r3, 8007928 <__hi0bits+0x3c>
 80078f2:	0400      	lsls	r0, r0, #16
 80078f4:	2310      	movs	r3, #16
 80078f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078fa:	bf04      	itt	eq
 80078fc:	0200      	lsleq	r0, r0, #8
 80078fe:	3308      	addeq	r3, #8
 8007900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007904:	bf04      	itt	eq
 8007906:	0100      	lsleq	r0, r0, #4
 8007908:	3304      	addeq	r3, #4
 800790a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800790e:	bf04      	itt	eq
 8007910:	0080      	lsleq	r0, r0, #2
 8007912:	3302      	addeq	r3, #2
 8007914:	2800      	cmp	r0, #0
 8007916:	db05      	blt.n	8007924 <__hi0bits+0x38>
 8007918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800791c:	f103 0301 	add.w	r3, r3, #1
 8007920:	bf08      	it	eq
 8007922:	2320      	moveq	r3, #32
 8007924:	4618      	mov	r0, r3
 8007926:	4770      	bx	lr
 8007928:	2300      	movs	r3, #0
 800792a:	e7e4      	b.n	80078f6 <__hi0bits+0xa>

0800792c <__lo0bits>:
 800792c:	6803      	ldr	r3, [r0, #0]
 800792e:	f013 0207 	ands.w	r2, r3, #7
 8007932:	d00c      	beq.n	800794e <__lo0bits+0x22>
 8007934:	07d9      	lsls	r1, r3, #31
 8007936:	d422      	bmi.n	800797e <__lo0bits+0x52>
 8007938:	079a      	lsls	r2, r3, #30
 800793a:	bf49      	itett	mi
 800793c:	085b      	lsrmi	r3, r3, #1
 800793e:	089b      	lsrpl	r3, r3, #2
 8007940:	6003      	strmi	r3, [r0, #0]
 8007942:	2201      	movmi	r2, #1
 8007944:	bf5c      	itt	pl
 8007946:	6003      	strpl	r3, [r0, #0]
 8007948:	2202      	movpl	r2, #2
 800794a:	4610      	mov	r0, r2
 800794c:	4770      	bx	lr
 800794e:	b299      	uxth	r1, r3
 8007950:	b909      	cbnz	r1, 8007956 <__lo0bits+0x2a>
 8007952:	0c1b      	lsrs	r3, r3, #16
 8007954:	2210      	movs	r2, #16
 8007956:	b2d9      	uxtb	r1, r3
 8007958:	b909      	cbnz	r1, 800795e <__lo0bits+0x32>
 800795a:	3208      	adds	r2, #8
 800795c:	0a1b      	lsrs	r3, r3, #8
 800795e:	0719      	lsls	r1, r3, #28
 8007960:	bf04      	itt	eq
 8007962:	091b      	lsreq	r3, r3, #4
 8007964:	3204      	addeq	r2, #4
 8007966:	0799      	lsls	r1, r3, #30
 8007968:	bf04      	itt	eq
 800796a:	089b      	lsreq	r3, r3, #2
 800796c:	3202      	addeq	r2, #2
 800796e:	07d9      	lsls	r1, r3, #31
 8007970:	d403      	bmi.n	800797a <__lo0bits+0x4e>
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	f102 0201 	add.w	r2, r2, #1
 8007978:	d003      	beq.n	8007982 <__lo0bits+0x56>
 800797a:	6003      	str	r3, [r0, #0]
 800797c:	e7e5      	b.n	800794a <__lo0bits+0x1e>
 800797e:	2200      	movs	r2, #0
 8007980:	e7e3      	b.n	800794a <__lo0bits+0x1e>
 8007982:	2220      	movs	r2, #32
 8007984:	e7e1      	b.n	800794a <__lo0bits+0x1e>
	...

08007988 <__i2b>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	2101      	movs	r1, #1
 800798e:	f7ff ff05 	bl	800779c <_Balloc>
 8007992:	4602      	mov	r2, r0
 8007994:	b928      	cbnz	r0, 80079a2 <__i2b+0x1a>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <__i2b+0x24>)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <__i2b+0x28>)
 800799a:	f240 1145 	movw	r1, #325	; 0x145
 800799e:	f000 fcb7 	bl	8008310 <__assert_func>
 80079a2:	2301      	movs	r3, #1
 80079a4:	6144      	str	r4, [r0, #20]
 80079a6:	6103      	str	r3, [r0, #16]
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	08008af0 	.word	0x08008af0
 80079b0:	08008b01 	.word	0x08008b01

080079b4 <__multiply>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	4691      	mov	r9, r2
 80079ba:	690a      	ldr	r2, [r1, #16]
 80079bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	bfb8      	it	lt
 80079c4:	460b      	movlt	r3, r1
 80079c6:	460c      	mov	r4, r1
 80079c8:	bfbc      	itt	lt
 80079ca:	464c      	movlt	r4, r9
 80079cc:	4699      	movlt	r9, r3
 80079ce:	6927      	ldr	r7, [r4, #16]
 80079d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	6861      	ldr	r1, [r4, #4]
 80079d8:	eb07 060a 	add.w	r6, r7, sl
 80079dc:	42b3      	cmp	r3, r6
 80079de:	b085      	sub	sp, #20
 80079e0:	bfb8      	it	lt
 80079e2:	3101      	addlt	r1, #1
 80079e4:	f7ff feda 	bl	800779c <_Balloc>
 80079e8:	b930      	cbnz	r0, 80079f8 <__multiply+0x44>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <__multiply+0x14c>)
 80079ee:	4845      	ldr	r0, [pc, #276]	; (8007b04 <__multiply+0x150>)
 80079f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079f4:	f000 fc8c 	bl	8008310 <__assert_func>
 80079f8:	f100 0514 	add.w	r5, r0, #20
 80079fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a00:	462b      	mov	r3, r5
 8007a02:	2200      	movs	r2, #0
 8007a04:	4543      	cmp	r3, r8
 8007a06:	d321      	bcc.n	8007a4c <__multiply+0x98>
 8007a08:	f104 0314 	add.w	r3, r4, #20
 8007a0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a10:	f109 0314 	add.w	r3, r9, #20
 8007a14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	1b3a      	subs	r2, r7, r4
 8007a1c:	3a15      	subs	r2, #21
 8007a1e:	f022 0203 	bic.w	r2, r2, #3
 8007a22:	3204      	adds	r2, #4
 8007a24:	f104 0115 	add.w	r1, r4, #21
 8007a28:	428f      	cmp	r7, r1
 8007a2a:	bf38      	it	cc
 8007a2c:	2204      	movcc	r2, #4
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	9a02      	ldr	r2, [sp, #8]
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d80c      	bhi.n	8007a52 <__multiply+0x9e>
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	dd03      	ble.n	8007a44 <__multiply+0x90>
 8007a3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d05b      	beq.n	8007afc <__multiply+0x148>
 8007a44:	6106      	str	r6, [r0, #16]
 8007a46:	b005      	add	sp, #20
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	f843 2b04 	str.w	r2, [r3], #4
 8007a50:	e7d8      	b.n	8007a04 <__multiply+0x50>
 8007a52:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a56:	f1ba 0f00 	cmp.w	sl, #0
 8007a5a:	d024      	beq.n	8007aa6 <__multiply+0xf2>
 8007a5c:	f104 0e14 	add.w	lr, r4, #20
 8007a60:	46a9      	mov	r9, r5
 8007a62:	f04f 0c00 	mov.w	ip, #0
 8007a66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a6a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a6e:	fa1f fb82 	uxth.w	fp, r2
 8007a72:	b289      	uxth	r1, r1
 8007a74:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a80:	4461      	add	r1, ip
 8007a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a86:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a8e:	b289      	uxth	r1, r1
 8007a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a94:	4577      	cmp	r7, lr
 8007a96:	f849 1b04 	str.w	r1, [r9], #4
 8007a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a9e:	d8e2      	bhi.n	8007a66 <__multiply+0xb2>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	f845 c002 	str.w	ip, [r5, r2]
 8007aa6:	9a03      	ldr	r2, [sp, #12]
 8007aa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007aac:	3304      	adds	r3, #4
 8007aae:	f1b9 0f00 	cmp.w	r9, #0
 8007ab2:	d021      	beq.n	8007af8 <__multiply+0x144>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	f104 0c14 	add.w	ip, r4, #20
 8007aba:	46ae      	mov	lr, r5
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ac8:	fb09 220b 	mla	r2, r9, fp, r2
 8007acc:	4452      	add	r2, sl
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ad4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007adc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ae0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ae4:	fb09 110a 	mla	r1, r9, sl, r1
 8007ae8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007aec:	4567      	cmp	r7, ip
 8007aee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007af2:	d8e5      	bhi.n	8007ac0 <__multiply+0x10c>
 8007af4:	9a01      	ldr	r2, [sp, #4]
 8007af6:	50a9      	str	r1, [r5, r2]
 8007af8:	3504      	adds	r5, #4
 8007afa:	e799      	b.n	8007a30 <__multiply+0x7c>
 8007afc:	3e01      	subs	r6, #1
 8007afe:	e79b      	b.n	8007a38 <__multiply+0x84>
 8007b00:	08008af0 	.word	0x08008af0
 8007b04:	08008b01 	.word	0x08008b01

08007b08 <__pow5mult>:
 8007b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	f012 0203 	ands.w	r2, r2, #3
 8007b12:	4606      	mov	r6, r0
 8007b14:	460f      	mov	r7, r1
 8007b16:	d007      	beq.n	8007b28 <__pow5mult+0x20>
 8007b18:	4c25      	ldr	r4, [pc, #148]	; (8007bb0 <__pow5mult+0xa8>)
 8007b1a:	3a01      	subs	r2, #1
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b22:	f7ff fe9d 	bl	8007860 <__multadd>
 8007b26:	4607      	mov	r7, r0
 8007b28:	10ad      	asrs	r5, r5, #2
 8007b2a:	d03d      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b2c:	69f4      	ldr	r4, [r6, #28]
 8007b2e:	b97c      	cbnz	r4, 8007b50 <__pow5mult+0x48>
 8007b30:	2010      	movs	r0, #16
 8007b32:	f7ff fd7f 	bl	8007634 <malloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	61f0      	str	r0, [r6, #28]
 8007b3a:	b928      	cbnz	r0, 8007b48 <__pow5mult+0x40>
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <__pow5mult+0xac>)
 8007b3e:	481e      	ldr	r0, [pc, #120]	; (8007bb8 <__pow5mult+0xb0>)
 8007b40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b44:	f000 fbe4 	bl	8008310 <__assert_func>
 8007b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b4c:	6004      	str	r4, [r0, #0]
 8007b4e:	60c4      	str	r4, [r0, #12]
 8007b50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b58:	b94c      	cbnz	r4, 8007b6e <__pow5mult+0x66>
 8007b5a:	f240 2171 	movw	r1, #625	; 0x271
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff12 	bl	8007988 <__i2b>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	07eb      	lsls	r3, r5, #31
 8007b74:	d50a      	bpl.n	8007b8c <__pow5mult+0x84>
 8007b76:	4639      	mov	r1, r7
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff1a 	bl	80079b4 <__multiply>
 8007b80:	4639      	mov	r1, r7
 8007b82:	4680      	mov	r8, r0
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff fe49 	bl	800781c <_Bfree>
 8007b8a:	4647      	mov	r7, r8
 8007b8c:	106d      	asrs	r5, r5, #1
 8007b8e:	d00b      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	b938      	cbnz	r0, 8007ba4 <__pow5mult+0x9c>
 8007b94:	4622      	mov	r2, r4
 8007b96:	4621      	mov	r1, r4
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ff0b 	bl	80079b4 <__multiply>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	f8c0 9000 	str.w	r9, [r0]
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	e7e4      	b.n	8007b72 <__pow5mult+0x6a>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	bf00      	nop
 8007bb0:	08008c50 	.word	0x08008c50
 8007bb4:	08008a81 	.word	0x08008a81
 8007bb8:	08008b01 	.word	0x08008b01

08007bbc <__lshift>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	4607      	mov	r7, r0
 8007bce:	4691      	mov	r9, r2
 8007bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bd4:	f108 0601 	add.w	r6, r8, #1
 8007bd8:	42b3      	cmp	r3, r6
 8007bda:	db0b      	blt.n	8007bf4 <__lshift+0x38>
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff fddd 	bl	800779c <_Balloc>
 8007be2:	4605      	mov	r5, r0
 8007be4:	b948      	cbnz	r0, 8007bfa <__lshift+0x3e>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <__lshift+0xd0>)
 8007bea:	4829      	ldr	r0, [pc, #164]	; (8007c90 <__lshift+0xd4>)
 8007bec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bf0:	f000 fb8e 	bl	8008310 <__assert_func>
 8007bf4:	3101      	adds	r1, #1
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	e7ee      	b.n	8007bd8 <__lshift+0x1c>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f100 0114 	add.w	r1, r0, #20
 8007c00:	f100 0210 	add.w	r2, r0, #16
 8007c04:	4618      	mov	r0, r3
 8007c06:	4553      	cmp	r3, sl
 8007c08:	db33      	blt.n	8007c72 <__lshift+0xb6>
 8007c0a:	6920      	ldr	r0, [r4, #16]
 8007c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c10:	f104 0314 	add.w	r3, r4, #20
 8007c14:	f019 091f 	ands.w	r9, r9, #31
 8007c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c20:	d02b      	beq.n	8007c7a <__lshift+0xbe>
 8007c22:	f1c9 0e20 	rsb	lr, r9, #32
 8007c26:	468a      	mov	sl, r1
 8007c28:	2200      	movs	r2, #0
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c30:	4310      	orrs	r0, r2
 8007c32:	f84a 0b04 	str.w	r0, [sl], #4
 8007c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3a:	459c      	cmp	ip, r3
 8007c3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c40:	d8f3      	bhi.n	8007c2a <__lshift+0x6e>
 8007c42:	ebac 0304 	sub.w	r3, ip, r4
 8007c46:	3b15      	subs	r3, #21
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	f104 0015 	add.w	r0, r4, #21
 8007c52:	4584      	cmp	ip, r0
 8007c54:	bf38      	it	cc
 8007c56:	2304      	movcc	r3, #4
 8007c58:	50ca      	str	r2, [r1, r3]
 8007c5a:	b10a      	cbz	r2, 8007c60 <__lshift+0xa4>
 8007c5c:	f108 0602 	add.w	r6, r8, #2
 8007c60:	3e01      	subs	r6, #1
 8007c62:	4638      	mov	r0, r7
 8007c64:	612e      	str	r6, [r5, #16]
 8007c66:	4621      	mov	r1, r4
 8007c68:	f7ff fdd8 	bl	800781c <_Bfree>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c76:	3301      	adds	r3, #1
 8007c78:	e7c5      	b.n	8007c06 <__lshift+0x4a>
 8007c7a:	3904      	subs	r1, #4
 8007c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c80:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c84:	459c      	cmp	ip, r3
 8007c86:	d8f9      	bhi.n	8007c7c <__lshift+0xc0>
 8007c88:	e7ea      	b.n	8007c60 <__lshift+0xa4>
 8007c8a:	bf00      	nop
 8007c8c:	08008af0 	.word	0x08008af0
 8007c90:	08008b01 	.word	0x08008b01

08007c94 <__mcmp>:
 8007c94:	b530      	push	{r4, r5, lr}
 8007c96:	6902      	ldr	r2, [r0, #16]
 8007c98:	690c      	ldr	r4, [r1, #16]
 8007c9a:	1b12      	subs	r2, r2, r4
 8007c9c:	d10e      	bne.n	8007cbc <__mcmp+0x28>
 8007c9e:	f100 0314 	add.w	r3, r0, #20
 8007ca2:	3114      	adds	r1, #20
 8007ca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cb4:	42a5      	cmp	r5, r4
 8007cb6:	d003      	beq.n	8007cc0 <__mcmp+0x2c>
 8007cb8:	d305      	bcc.n	8007cc6 <__mcmp+0x32>
 8007cba:	2201      	movs	r2, #1
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	bd30      	pop	{r4, r5, pc}
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	d3f3      	bcc.n	8007cac <__mcmp+0x18>
 8007cc4:	e7fa      	b.n	8007cbc <__mcmp+0x28>
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	e7f7      	b.n	8007cbc <__mcmp+0x28>

08007ccc <__mdiff>:
 8007ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4690      	mov	r8, r2
 8007cda:	f7ff ffdb 	bl	8007c94 <__mcmp>
 8007cde:	1e05      	subs	r5, r0, #0
 8007ce0:	d110      	bne.n	8007d04 <__mdiff+0x38>
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f7ff fd59 	bl	800779c <_Balloc>
 8007cea:	b930      	cbnz	r0, 8007cfa <__mdiff+0x2e>
 8007cec:	4b3a      	ldr	r3, [pc, #232]	; (8007dd8 <__mdiff+0x10c>)
 8007cee:	4602      	mov	r2, r0
 8007cf0:	f240 2137 	movw	r1, #567	; 0x237
 8007cf4:	4839      	ldr	r0, [pc, #228]	; (8007ddc <__mdiff+0x110>)
 8007cf6:	f000 fb0b 	bl	8008310 <__assert_func>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d04:	bfa4      	itt	ge
 8007d06:	4643      	movge	r3, r8
 8007d08:	46a0      	movge	r8, r4
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d10:	bfa6      	itte	ge
 8007d12:	461c      	movge	r4, r3
 8007d14:	2500      	movge	r5, #0
 8007d16:	2501      	movlt	r5, #1
 8007d18:	f7ff fd40 	bl	800779c <_Balloc>
 8007d1c:	b920      	cbnz	r0, 8007d28 <__mdiff+0x5c>
 8007d1e:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <__mdiff+0x10c>)
 8007d20:	4602      	mov	r2, r0
 8007d22:	f240 2145 	movw	r1, #581	; 0x245
 8007d26:	e7e5      	b.n	8007cf4 <__mdiff+0x28>
 8007d28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d2c:	6926      	ldr	r6, [r4, #16]
 8007d2e:	60c5      	str	r5, [r0, #12]
 8007d30:	f104 0914 	add.w	r9, r4, #20
 8007d34:	f108 0514 	add.w	r5, r8, #20
 8007d38:	f100 0e14 	add.w	lr, r0, #20
 8007d3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d44:	f108 0210 	add.w	r2, r8, #16
 8007d48:	46f2      	mov	sl, lr
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d54:	fa11 f88b 	uxtah	r8, r1, fp
 8007d58:	b299      	uxth	r1, r3
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	eba8 0801 	sub.w	r8, r8, r1
 8007d60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d68:	fa1f f888 	uxth.w	r8, r8
 8007d6c:	1419      	asrs	r1, r3, #16
 8007d6e:	454e      	cmp	r6, r9
 8007d70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d74:	f84a 3b04 	str.w	r3, [sl], #4
 8007d78:	d8e8      	bhi.n	8007d4c <__mdiff+0x80>
 8007d7a:	1b33      	subs	r3, r6, r4
 8007d7c:	3b15      	subs	r3, #21
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	3304      	adds	r3, #4
 8007d84:	3415      	adds	r4, #21
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	bf38      	it	cc
 8007d8a:	2304      	movcc	r3, #4
 8007d8c:	441d      	add	r5, r3
 8007d8e:	4473      	add	r3, lr
 8007d90:	469e      	mov	lr, r3
 8007d92:	462e      	mov	r6, r5
 8007d94:	4566      	cmp	r6, ip
 8007d96:	d30e      	bcc.n	8007db6 <__mdiff+0xea>
 8007d98:	f10c 0203 	add.w	r2, ip, #3
 8007d9c:	1b52      	subs	r2, r2, r5
 8007d9e:	f022 0203 	bic.w	r2, r2, #3
 8007da2:	3d03      	subs	r5, #3
 8007da4:	45ac      	cmp	ip, r5
 8007da6:	bf38      	it	cc
 8007da8:	2200      	movcc	r2, #0
 8007daa:	4413      	add	r3, r2
 8007dac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007db0:	b17a      	cbz	r2, 8007dd2 <__mdiff+0x106>
 8007db2:	6107      	str	r7, [r0, #16]
 8007db4:	e7a4      	b.n	8007d00 <__mdiff+0x34>
 8007db6:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dba:	fa11 f288 	uxtah	r2, r1, r8
 8007dbe:	1414      	asrs	r4, r2, #16
 8007dc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dc4:	b292      	uxth	r2, r2
 8007dc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dca:	f84e 2b04 	str.w	r2, [lr], #4
 8007dce:	1421      	asrs	r1, r4, #16
 8007dd0:	e7e0      	b.n	8007d94 <__mdiff+0xc8>
 8007dd2:	3f01      	subs	r7, #1
 8007dd4:	e7ea      	b.n	8007dac <__mdiff+0xe0>
 8007dd6:	bf00      	nop
 8007dd8:	08008af0 	.word	0x08008af0
 8007ddc:	08008b01 	.word	0x08008b01

08007de0 <__d2b>:
 8007de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	460f      	mov	r7, r1
 8007de6:	2101      	movs	r1, #1
 8007de8:	ec59 8b10 	vmov	r8, r9, d0
 8007dec:	4616      	mov	r6, r2
 8007dee:	f7ff fcd5 	bl	800779c <_Balloc>
 8007df2:	4604      	mov	r4, r0
 8007df4:	b930      	cbnz	r0, 8007e04 <__d2b+0x24>
 8007df6:	4602      	mov	r2, r0
 8007df8:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <__d2b+0xac>)
 8007dfa:	4825      	ldr	r0, [pc, #148]	; (8007e90 <__d2b+0xb0>)
 8007dfc:	f240 310f 	movw	r1, #783	; 0x30f
 8007e00:	f000 fa86 	bl	8008310 <__assert_func>
 8007e04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e0c:	bb2d      	cbnz	r5, 8007e5a <__d2b+0x7a>
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f1b8 0300 	subs.w	r3, r8, #0
 8007e14:	d026      	beq.n	8007e64 <__d2b+0x84>
 8007e16:	4668      	mov	r0, sp
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	f7ff fd87 	bl	800792c <__lo0bits>
 8007e1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e22:	b1e8      	cbz	r0, 8007e60 <__d2b+0x80>
 8007e24:	f1c0 0320 	rsb	r3, r0, #32
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	40c2      	lsrs	r2, r0
 8007e30:	6163      	str	r3, [r4, #20]
 8007e32:	9201      	str	r2, [sp, #4]
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	61a3      	str	r3, [r4, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf14      	ite	ne
 8007e3c:	2202      	movne	r2, #2
 8007e3e:	2201      	moveq	r2, #1
 8007e40:	6122      	str	r2, [r4, #16]
 8007e42:	b1bd      	cbz	r5, 8007e74 <__d2b+0x94>
 8007e44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e48:	4405      	add	r5, r0
 8007e4a:	603d      	str	r5, [r7, #0]
 8007e4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e50:	6030      	str	r0, [r6, #0]
 8007e52:	4620      	mov	r0, r4
 8007e54:	b003      	add	sp, #12
 8007e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e5e:	e7d6      	b.n	8007e0e <__d2b+0x2e>
 8007e60:	6161      	str	r1, [r4, #20]
 8007e62:	e7e7      	b.n	8007e34 <__d2b+0x54>
 8007e64:	a801      	add	r0, sp, #4
 8007e66:	f7ff fd61 	bl	800792c <__lo0bits>
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	6163      	str	r3, [r4, #20]
 8007e6e:	3020      	adds	r0, #32
 8007e70:	2201      	movs	r2, #1
 8007e72:	e7e5      	b.n	8007e40 <__d2b+0x60>
 8007e74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e7c:	6038      	str	r0, [r7, #0]
 8007e7e:	6918      	ldr	r0, [r3, #16]
 8007e80:	f7ff fd34 	bl	80078ec <__hi0bits>
 8007e84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e88:	e7e2      	b.n	8007e50 <__d2b+0x70>
 8007e8a:	bf00      	nop
 8007e8c:	08008af0 	.word	0x08008af0
 8007e90:	08008b01 	.word	0x08008b01

08007e94 <__ssputs_r>:
 8007e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	688e      	ldr	r6, [r1, #8]
 8007e9a:	461f      	mov	r7, r3
 8007e9c:	42be      	cmp	r6, r7
 8007e9e:	680b      	ldr	r3, [r1, #0]
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	d82c      	bhi.n	8007f02 <__ssputs_r+0x6e>
 8007ea8:	898a      	ldrh	r2, [r1, #12]
 8007eaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eae:	d026      	beq.n	8007efe <__ssputs_r+0x6a>
 8007eb0:	6965      	ldr	r5, [r4, #20]
 8007eb2:	6909      	ldr	r1, [r1, #16]
 8007eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007eb8:	eba3 0901 	sub.w	r9, r3, r1
 8007ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec0:	1c7b      	adds	r3, r7, #1
 8007ec2:	444b      	add	r3, r9
 8007ec4:	106d      	asrs	r5, r5, #1
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	bf38      	it	cc
 8007eca:	461d      	movcc	r5, r3
 8007ecc:	0553      	lsls	r3, r2, #21
 8007ece:	d527      	bpl.n	8007f20 <__ssputs_r+0x8c>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7ff fbd7 	bl	8007684 <_malloc_r>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	b360      	cbz	r0, 8007f34 <__ssputs_r+0xa0>
 8007eda:	6921      	ldr	r1, [r4, #16]
 8007edc:	464a      	mov	r2, r9
 8007ede:	f000 fa09 	bl	80082f4 <memcpy>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	6126      	str	r6, [r4, #16]
 8007ef0:	6165      	str	r5, [r4, #20]
 8007ef2:	444e      	add	r6, r9
 8007ef4:	eba5 0509 	sub.w	r5, r5, r9
 8007ef8:	6026      	str	r6, [r4, #0]
 8007efa:	60a5      	str	r5, [r4, #8]
 8007efc:	463e      	mov	r6, r7
 8007efe:	42be      	cmp	r6, r7
 8007f00:	d900      	bls.n	8007f04 <__ssputs_r+0x70>
 8007f02:	463e      	mov	r6, r7
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	4632      	mov	r2, r6
 8007f08:	4641      	mov	r1, r8
 8007f0a:	f000 f9c9 	bl	80082a0 <memmove>
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	1b9b      	subs	r3, r3, r6
 8007f12:	60a3      	str	r3, [r4, #8]
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	4433      	add	r3, r6
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	462a      	mov	r2, r5
 8007f22:	f000 fa3b 	bl	800839c <_realloc_r>
 8007f26:	4606      	mov	r6, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d1e0      	bne.n	8007eee <__ssputs_r+0x5a>
 8007f2c:	6921      	ldr	r1, [r4, #16]
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f7ff fb34 	bl	800759c <_free_r>
 8007f34:	230c      	movs	r3, #12
 8007f36:	f8ca 3000 	str.w	r3, [sl]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	e7e9      	b.n	8007f1c <__ssputs_r+0x88>

08007f48 <_svfiprintf_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	4698      	mov	r8, r3
 8007f4e:	898b      	ldrh	r3, [r1, #12]
 8007f50:	061b      	lsls	r3, r3, #24
 8007f52:	b09d      	sub	sp, #116	; 0x74
 8007f54:	4607      	mov	r7, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	4614      	mov	r4, r2
 8007f5a:	d50e      	bpl.n	8007f7a <_svfiprintf_r+0x32>
 8007f5c:	690b      	ldr	r3, [r1, #16]
 8007f5e:	b963      	cbnz	r3, 8007f7a <_svfiprintf_r+0x32>
 8007f60:	2140      	movs	r1, #64	; 0x40
 8007f62:	f7ff fb8f 	bl	8007684 <_malloc_r>
 8007f66:	6028      	str	r0, [r5, #0]
 8007f68:	6128      	str	r0, [r5, #16]
 8007f6a:	b920      	cbnz	r0, 8007f76 <_svfiprintf_r+0x2e>
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e0d0      	b.n	8008118 <_svfiprintf_r+0x1d0>
 8007f76:	2340      	movs	r3, #64	; 0x40
 8007f78:	616b      	str	r3, [r5, #20]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	2320      	movs	r3, #32
 8007f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f88:	2330      	movs	r3, #48	; 0x30
 8007f8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008130 <_svfiprintf_r+0x1e8>
 8007f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f92:	f04f 0901 	mov.w	r9, #1
 8007f96:	4623      	mov	r3, r4
 8007f98:	469a      	mov	sl, r3
 8007f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f9e:	b10a      	cbz	r2, 8007fa4 <_svfiprintf_r+0x5c>
 8007fa0:	2a25      	cmp	r2, #37	; 0x25
 8007fa2:	d1f9      	bne.n	8007f98 <_svfiprintf_r+0x50>
 8007fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fa8:	d00b      	beq.n	8007fc2 <_svfiprintf_r+0x7a>
 8007faa:	465b      	mov	r3, fp
 8007fac:	4622      	mov	r2, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff ff6f 	bl	8007e94 <__ssputs_r>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f000 80a9 	beq.w	800810e <_svfiprintf_r+0x1c6>
 8007fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fbe:	445a      	add	r2, fp
 8007fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80a1 	beq.w	800810e <_svfiprintf_r+0x1c6>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd6:	f10a 0a01 	add.w	sl, sl, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	9307      	str	r3, [sp, #28]
 8007fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe4:	4654      	mov	r4, sl
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fec:	4850      	ldr	r0, [pc, #320]	; (8008130 <_svfiprintf_r+0x1e8>)
 8007fee:	f7f8 f907 	bl	8000200 <memchr>
 8007ff2:	9a04      	ldr	r2, [sp, #16]
 8007ff4:	b9d8      	cbnz	r0, 800802e <_svfiprintf_r+0xe6>
 8007ff6:	06d0      	lsls	r0, r2, #27
 8007ff8:	bf44      	itt	mi
 8007ffa:	2320      	movmi	r3, #32
 8007ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008000:	0711      	lsls	r1, r2, #28
 8008002:	bf44      	itt	mi
 8008004:	232b      	movmi	r3, #43	; 0x2b
 8008006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800a:	f89a 3000 	ldrb.w	r3, [sl]
 800800e:	2b2a      	cmp	r3, #42	; 0x2a
 8008010:	d015      	beq.n	800803e <_svfiprintf_r+0xf6>
 8008012:	9a07      	ldr	r2, [sp, #28]
 8008014:	4654      	mov	r4, sl
 8008016:	2000      	movs	r0, #0
 8008018:	f04f 0c0a 	mov.w	ip, #10
 800801c:	4621      	mov	r1, r4
 800801e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008022:	3b30      	subs	r3, #48	; 0x30
 8008024:	2b09      	cmp	r3, #9
 8008026:	d94d      	bls.n	80080c4 <_svfiprintf_r+0x17c>
 8008028:	b1b0      	cbz	r0, 8008058 <_svfiprintf_r+0x110>
 800802a:	9207      	str	r2, [sp, #28]
 800802c:	e014      	b.n	8008058 <_svfiprintf_r+0x110>
 800802e:	eba0 0308 	sub.w	r3, r0, r8
 8008032:	fa09 f303 	lsl.w	r3, r9, r3
 8008036:	4313      	orrs	r3, r2
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	46a2      	mov	sl, r4
 800803c:	e7d2      	b.n	8007fe4 <_svfiprintf_r+0x9c>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	1d19      	adds	r1, r3, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	9103      	str	r1, [sp, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfbb      	ittet	lt
 800804a:	425b      	neglt	r3, r3
 800804c:	f042 0202 	orrlt.w	r2, r2, #2
 8008050:	9307      	strge	r3, [sp, #28]
 8008052:	9307      	strlt	r3, [sp, #28]
 8008054:	bfb8      	it	lt
 8008056:	9204      	strlt	r2, [sp, #16]
 8008058:	7823      	ldrb	r3, [r4, #0]
 800805a:	2b2e      	cmp	r3, #46	; 0x2e
 800805c:	d10c      	bne.n	8008078 <_svfiprintf_r+0x130>
 800805e:	7863      	ldrb	r3, [r4, #1]
 8008060:	2b2a      	cmp	r3, #42	; 0x2a
 8008062:	d134      	bne.n	80080ce <_svfiprintf_r+0x186>
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	1d1a      	adds	r2, r3, #4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	9203      	str	r2, [sp, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	bfb8      	it	lt
 8008070:	f04f 33ff 	movlt.w	r3, #4294967295
 8008074:	3402      	adds	r4, #2
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008140 <_svfiprintf_r+0x1f8>
 800807c:	7821      	ldrb	r1, [r4, #0]
 800807e:	2203      	movs	r2, #3
 8008080:	4650      	mov	r0, sl
 8008082:	f7f8 f8bd 	bl	8000200 <memchr>
 8008086:	b138      	cbz	r0, 8008098 <_svfiprintf_r+0x150>
 8008088:	9b04      	ldr	r3, [sp, #16]
 800808a:	eba0 000a 	sub.w	r0, r0, sl
 800808e:	2240      	movs	r2, #64	; 0x40
 8008090:	4082      	lsls	r2, r0
 8008092:	4313      	orrs	r3, r2
 8008094:	3401      	adds	r4, #1
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809c:	4825      	ldr	r0, [pc, #148]	; (8008134 <_svfiprintf_r+0x1ec>)
 800809e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080a2:	2206      	movs	r2, #6
 80080a4:	f7f8 f8ac 	bl	8000200 <memchr>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d038      	beq.n	800811e <_svfiprintf_r+0x1d6>
 80080ac:	4b22      	ldr	r3, [pc, #136]	; (8008138 <_svfiprintf_r+0x1f0>)
 80080ae:	bb1b      	cbnz	r3, 80080f8 <_svfiprintf_r+0x1b0>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	3307      	adds	r3, #7
 80080b4:	f023 0307 	bic.w	r3, r3, #7
 80080b8:	3308      	adds	r3, #8
 80080ba:	9303      	str	r3, [sp, #12]
 80080bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080be:	4433      	add	r3, r6
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	e768      	b.n	8007f96 <_svfiprintf_r+0x4e>
 80080c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c8:	460c      	mov	r4, r1
 80080ca:	2001      	movs	r0, #1
 80080cc:	e7a6      	b.n	800801c <_svfiprintf_r+0xd4>
 80080ce:	2300      	movs	r3, #0
 80080d0:	3401      	adds	r4, #1
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	4619      	mov	r1, r3
 80080d6:	f04f 0c0a 	mov.w	ip, #10
 80080da:	4620      	mov	r0, r4
 80080dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e0:	3a30      	subs	r2, #48	; 0x30
 80080e2:	2a09      	cmp	r2, #9
 80080e4:	d903      	bls.n	80080ee <_svfiprintf_r+0x1a6>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0c6      	beq.n	8008078 <_svfiprintf_r+0x130>
 80080ea:	9105      	str	r1, [sp, #20]
 80080ec:	e7c4      	b.n	8008078 <_svfiprintf_r+0x130>
 80080ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f2:	4604      	mov	r4, r0
 80080f4:	2301      	movs	r3, #1
 80080f6:	e7f0      	b.n	80080da <_svfiprintf_r+0x192>
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	462a      	mov	r2, r5
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <_svfiprintf_r+0x1f4>)
 8008100:	a904      	add	r1, sp, #16
 8008102:	4638      	mov	r0, r7
 8008104:	f7fd fe62 	bl	8005dcc <_printf_float>
 8008108:	1c42      	adds	r2, r0, #1
 800810a:	4606      	mov	r6, r0
 800810c:	d1d6      	bne.n	80080bc <_svfiprintf_r+0x174>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	065b      	lsls	r3, r3, #25
 8008112:	f53f af2d 	bmi.w	8007f70 <_svfiprintf_r+0x28>
 8008116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008118:	b01d      	add	sp, #116	; 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	ab03      	add	r3, sp, #12
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	462a      	mov	r2, r5
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <_svfiprintf_r+0x1f4>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	4638      	mov	r0, r7
 800812a:	f7fe f8f3 	bl	8006314 <_printf_i>
 800812e:	e7eb      	b.n	8008108 <_svfiprintf_r+0x1c0>
 8008130:	08008c5c 	.word	0x08008c5c
 8008134:	08008c66 	.word	0x08008c66
 8008138:	08005dcd 	.word	0x08005dcd
 800813c:	08007e95 	.word	0x08007e95
 8008140:	08008c62 	.word	0x08008c62

08008144 <__sflush_r>:
 8008144:	898a      	ldrh	r2, [r1, #12]
 8008146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814a:	4605      	mov	r5, r0
 800814c:	0710      	lsls	r0, r2, #28
 800814e:	460c      	mov	r4, r1
 8008150:	d458      	bmi.n	8008204 <__sflush_r+0xc0>
 8008152:	684b      	ldr	r3, [r1, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc05      	bgt.n	8008164 <__sflush_r+0x20>
 8008158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	dc02      	bgt.n	8008164 <__sflush_r+0x20>
 800815e:	2000      	movs	r0, #0
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008166:	2e00      	cmp	r6, #0
 8008168:	d0f9      	beq.n	800815e <__sflush_r+0x1a>
 800816a:	2300      	movs	r3, #0
 800816c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008170:	682f      	ldr	r7, [r5, #0]
 8008172:	6a21      	ldr	r1, [r4, #32]
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	d032      	beq.n	80081de <__sflush_r+0x9a>
 8008178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	075a      	lsls	r2, r3, #29
 800817e:	d505      	bpl.n	800818c <__sflush_r+0x48>
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	1ac0      	subs	r0, r0, r3
 8008184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008186:	b10b      	cbz	r3, 800818c <__sflush_r+0x48>
 8008188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800818a:	1ac0      	subs	r0, r0, r3
 800818c:	2300      	movs	r3, #0
 800818e:	4602      	mov	r2, r0
 8008190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	4628      	mov	r0, r5
 8008196:	47b0      	blx	r6
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	d106      	bne.n	80081ac <__sflush_r+0x68>
 800819e:	6829      	ldr	r1, [r5, #0]
 80081a0:	291d      	cmp	r1, #29
 80081a2:	d82b      	bhi.n	80081fc <__sflush_r+0xb8>
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <__sflush_r+0x108>)
 80081a6:	410a      	asrs	r2, r1
 80081a8:	07d6      	lsls	r6, r2, #31
 80081aa:	d427      	bmi.n	80081fc <__sflush_r+0xb8>
 80081ac:	2200      	movs	r2, #0
 80081ae:	6062      	str	r2, [r4, #4]
 80081b0:	04d9      	lsls	r1, r3, #19
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	d504      	bpl.n	80081c2 <__sflush_r+0x7e>
 80081b8:	1c42      	adds	r2, r0, #1
 80081ba:	d101      	bne.n	80081c0 <__sflush_r+0x7c>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b903      	cbnz	r3, 80081c2 <__sflush_r+0x7e>
 80081c0:	6560      	str	r0, [r4, #84]	; 0x54
 80081c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081c4:	602f      	str	r7, [r5, #0]
 80081c6:	2900      	cmp	r1, #0
 80081c8:	d0c9      	beq.n	800815e <__sflush_r+0x1a>
 80081ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ce:	4299      	cmp	r1, r3
 80081d0:	d002      	beq.n	80081d8 <__sflush_r+0x94>
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7ff f9e2 	bl	800759c <_free_r>
 80081d8:	2000      	movs	r0, #0
 80081da:	6360      	str	r0, [r4, #52]	; 0x34
 80081dc:	e7c0      	b.n	8008160 <__sflush_r+0x1c>
 80081de:	2301      	movs	r3, #1
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b0      	blx	r6
 80081e4:	1c41      	adds	r1, r0, #1
 80081e6:	d1c8      	bne.n	800817a <__sflush_r+0x36>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0c5      	beq.n	800817a <__sflush_r+0x36>
 80081ee:	2b1d      	cmp	r3, #29
 80081f0:	d001      	beq.n	80081f6 <__sflush_r+0xb2>
 80081f2:	2b16      	cmp	r3, #22
 80081f4:	d101      	bne.n	80081fa <__sflush_r+0xb6>
 80081f6:	602f      	str	r7, [r5, #0]
 80081f8:	e7b1      	b.n	800815e <__sflush_r+0x1a>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	e7ad      	b.n	8008160 <__sflush_r+0x1c>
 8008204:	690f      	ldr	r7, [r1, #16]
 8008206:	2f00      	cmp	r7, #0
 8008208:	d0a9      	beq.n	800815e <__sflush_r+0x1a>
 800820a:	0793      	lsls	r3, r2, #30
 800820c:	680e      	ldr	r6, [r1, #0]
 800820e:	bf08      	it	eq
 8008210:	694b      	ldreq	r3, [r1, #20]
 8008212:	600f      	str	r7, [r1, #0]
 8008214:	bf18      	it	ne
 8008216:	2300      	movne	r3, #0
 8008218:	eba6 0807 	sub.w	r8, r6, r7
 800821c:	608b      	str	r3, [r1, #8]
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	dd9c      	ble.n	800815e <__sflush_r+0x1a>
 8008224:	6a21      	ldr	r1, [r4, #32]
 8008226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008228:	4643      	mov	r3, r8
 800822a:	463a      	mov	r2, r7
 800822c:	4628      	mov	r0, r5
 800822e:	47b0      	blx	r6
 8008230:	2800      	cmp	r0, #0
 8008232:	dc06      	bgt.n	8008242 <__sflush_r+0xfe>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e78e      	b.n	8008160 <__sflush_r+0x1c>
 8008242:	4407      	add	r7, r0
 8008244:	eba8 0800 	sub.w	r8, r8, r0
 8008248:	e7e9      	b.n	800821e <__sflush_r+0xda>
 800824a:	bf00      	nop
 800824c:	dfbffffe 	.word	0xdfbffffe

08008250 <_fflush_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	690b      	ldr	r3, [r1, #16]
 8008254:	4605      	mov	r5, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b913      	cbnz	r3, 8008260 <_fflush_r+0x10>
 800825a:	2500      	movs	r5, #0
 800825c:	4628      	mov	r0, r5
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	b118      	cbz	r0, 800826a <_fflush_r+0x1a>
 8008262:	6a03      	ldr	r3, [r0, #32]
 8008264:	b90b      	cbnz	r3, 800826a <_fflush_r+0x1a>
 8008266:	f7fe f9f1 	bl	800664c <__sinit>
 800826a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f3      	beq.n	800825a <_fflush_r+0xa>
 8008272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008274:	07d0      	lsls	r0, r2, #31
 8008276:	d404      	bmi.n	8008282 <_fflush_r+0x32>
 8008278:	0599      	lsls	r1, r3, #22
 800827a:	d402      	bmi.n	8008282 <_fflush_r+0x32>
 800827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827e:	f7fe fb0f 	bl	80068a0 <__retarget_lock_acquire_recursive>
 8008282:	4628      	mov	r0, r5
 8008284:	4621      	mov	r1, r4
 8008286:	f7ff ff5d 	bl	8008144 <__sflush_r>
 800828a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800828c:	07da      	lsls	r2, r3, #31
 800828e:	4605      	mov	r5, r0
 8008290:	d4e4      	bmi.n	800825c <_fflush_r+0xc>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d4e1      	bmi.n	800825c <_fflush_r+0xc>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f7fe fb02 	bl	80068a2 <__retarget_lock_release_recursive>
 800829e:	e7dd      	b.n	800825c <_fflush_r+0xc>

080082a0 <memmove>:
 80082a0:	4288      	cmp	r0, r1
 80082a2:	b510      	push	{r4, lr}
 80082a4:	eb01 0402 	add.w	r4, r1, r2
 80082a8:	d902      	bls.n	80082b0 <memmove+0x10>
 80082aa:	4284      	cmp	r4, r0
 80082ac:	4623      	mov	r3, r4
 80082ae:	d807      	bhi.n	80082c0 <memmove+0x20>
 80082b0:	1e43      	subs	r3, r0, #1
 80082b2:	42a1      	cmp	r1, r4
 80082b4:	d008      	beq.n	80082c8 <memmove+0x28>
 80082b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082be:	e7f8      	b.n	80082b2 <memmove+0x12>
 80082c0:	4402      	add	r2, r0
 80082c2:	4601      	mov	r1, r0
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d100      	bne.n	80082ca <memmove+0x2a>
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082d2:	e7f7      	b.n	80082c4 <memmove+0x24>

080082d4 <_sbrk_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d06      	ldr	r5, [pc, #24]	; (80082f0 <_sbrk_r+0x1c>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7f9 fc56 	bl	8001b90 <_sbrk>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_sbrk_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_sbrk_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	200009fc 	.word	0x200009fc

080082f4 <memcpy>:
 80082f4:	440a      	add	r2, r1
 80082f6:	4291      	cmp	r1, r2
 80082f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fc:	d100      	bne.n	8008300 <memcpy+0xc>
 80082fe:	4770      	bx	lr
 8008300:	b510      	push	{r4, lr}
 8008302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800830a:	4291      	cmp	r1, r2
 800830c:	d1f9      	bne.n	8008302 <memcpy+0xe>
 800830e:	bd10      	pop	{r4, pc}

08008310 <__assert_func>:
 8008310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008312:	4614      	mov	r4, r2
 8008314:	461a      	mov	r2, r3
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <__assert_func+0x2c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4605      	mov	r5, r0
 800831c:	68d8      	ldr	r0, [r3, #12]
 800831e:	b14c      	cbz	r4, 8008334 <__assert_func+0x24>
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <__assert_func+0x30>)
 8008322:	9100      	str	r1, [sp, #0]
 8008324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008328:	4906      	ldr	r1, [pc, #24]	; (8008344 <__assert_func+0x34>)
 800832a:	462b      	mov	r3, r5
 800832c:	f000 f872 	bl	8008414 <fiprintf>
 8008330:	f000 f882 	bl	8008438 <abort>
 8008334:	4b04      	ldr	r3, [pc, #16]	; (8008348 <__assert_func+0x38>)
 8008336:	461c      	mov	r4, r3
 8008338:	e7f3      	b.n	8008322 <__assert_func+0x12>
 800833a:	bf00      	nop
 800833c:	20000064 	.word	0x20000064
 8008340:	08008c77 	.word	0x08008c77
 8008344:	08008c84 	.word	0x08008c84
 8008348:	08008cb2 	.word	0x08008cb2

0800834c <_calloc_r>:
 800834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834e:	fba1 2402 	umull	r2, r4, r1, r2
 8008352:	b94c      	cbnz	r4, 8008368 <_calloc_r+0x1c>
 8008354:	4611      	mov	r1, r2
 8008356:	9201      	str	r2, [sp, #4]
 8008358:	f7ff f994 	bl	8007684 <_malloc_r>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	4605      	mov	r5, r0
 8008360:	b930      	cbnz	r0, 8008370 <_calloc_r+0x24>
 8008362:	4628      	mov	r0, r5
 8008364:	b003      	add	sp, #12
 8008366:	bd30      	pop	{r4, r5, pc}
 8008368:	220c      	movs	r2, #12
 800836a:	6002      	str	r2, [r0, #0]
 800836c:	2500      	movs	r5, #0
 800836e:	e7f8      	b.n	8008362 <_calloc_r+0x16>
 8008370:	4621      	mov	r1, r4
 8008372:	f7fe fa18 	bl	80067a6 <memset>
 8008376:	e7f4      	b.n	8008362 <_calloc_r+0x16>

08008378 <__ascii_mbtowc>:
 8008378:	b082      	sub	sp, #8
 800837a:	b901      	cbnz	r1, 800837e <__ascii_mbtowc+0x6>
 800837c:	a901      	add	r1, sp, #4
 800837e:	b142      	cbz	r2, 8008392 <__ascii_mbtowc+0x1a>
 8008380:	b14b      	cbz	r3, 8008396 <__ascii_mbtowc+0x1e>
 8008382:	7813      	ldrb	r3, [r2, #0]
 8008384:	600b      	str	r3, [r1, #0]
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	1e10      	subs	r0, r2, #0
 800838a:	bf18      	it	ne
 800838c:	2001      	movne	r0, #1
 800838e:	b002      	add	sp, #8
 8008390:	4770      	bx	lr
 8008392:	4610      	mov	r0, r2
 8008394:	e7fb      	b.n	800838e <__ascii_mbtowc+0x16>
 8008396:	f06f 0001 	mvn.w	r0, #1
 800839a:	e7f8      	b.n	800838e <__ascii_mbtowc+0x16>

0800839c <_realloc_r>:
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	4680      	mov	r8, r0
 80083a2:	4614      	mov	r4, r2
 80083a4:	460e      	mov	r6, r1
 80083a6:	b921      	cbnz	r1, 80083b2 <_realloc_r+0x16>
 80083a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4611      	mov	r1, r2
 80083ae:	f7ff b969 	b.w	8007684 <_malloc_r>
 80083b2:	b92a      	cbnz	r2, 80083c0 <_realloc_r+0x24>
 80083b4:	f7ff f8f2 	bl	800759c <_free_r>
 80083b8:	4625      	mov	r5, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c0:	f000 f841 	bl	8008446 <_malloc_usable_size_r>
 80083c4:	4284      	cmp	r4, r0
 80083c6:	4607      	mov	r7, r0
 80083c8:	d802      	bhi.n	80083d0 <_realloc_r+0x34>
 80083ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ce:	d812      	bhi.n	80083f6 <_realloc_r+0x5a>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff f956 	bl	8007684 <_malloc_r>
 80083d8:	4605      	mov	r5, r0
 80083da:	2800      	cmp	r0, #0
 80083dc:	d0ed      	beq.n	80083ba <_realloc_r+0x1e>
 80083de:	42bc      	cmp	r4, r7
 80083e0:	4622      	mov	r2, r4
 80083e2:	4631      	mov	r1, r6
 80083e4:	bf28      	it	cs
 80083e6:	463a      	movcs	r2, r7
 80083e8:	f7ff ff84 	bl	80082f4 <memcpy>
 80083ec:	4631      	mov	r1, r6
 80083ee:	4640      	mov	r0, r8
 80083f0:	f7ff f8d4 	bl	800759c <_free_r>
 80083f4:	e7e1      	b.n	80083ba <_realloc_r+0x1e>
 80083f6:	4635      	mov	r5, r6
 80083f8:	e7df      	b.n	80083ba <_realloc_r+0x1e>

080083fa <__ascii_wctomb>:
 80083fa:	b149      	cbz	r1, 8008410 <__ascii_wctomb+0x16>
 80083fc:	2aff      	cmp	r2, #255	; 0xff
 80083fe:	bf85      	ittet	hi
 8008400:	238a      	movhi	r3, #138	; 0x8a
 8008402:	6003      	strhi	r3, [r0, #0]
 8008404:	700a      	strbls	r2, [r1, #0]
 8008406:	f04f 30ff 	movhi.w	r0, #4294967295
 800840a:	bf98      	it	ls
 800840c:	2001      	movls	r0, #1
 800840e:	4770      	bx	lr
 8008410:	4608      	mov	r0, r1
 8008412:	4770      	bx	lr

08008414 <fiprintf>:
 8008414:	b40e      	push	{r1, r2, r3}
 8008416:	b503      	push	{r0, r1, lr}
 8008418:	4601      	mov	r1, r0
 800841a:	ab03      	add	r3, sp, #12
 800841c:	4805      	ldr	r0, [pc, #20]	; (8008434 <fiprintf+0x20>)
 800841e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008422:	6800      	ldr	r0, [r0, #0]
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	f000 f83f 	bl	80084a8 <_vfiprintf_r>
 800842a:	b002      	add	sp, #8
 800842c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008430:	b003      	add	sp, #12
 8008432:	4770      	bx	lr
 8008434:	20000064 	.word	0x20000064

08008438 <abort>:
 8008438:	b508      	push	{r3, lr}
 800843a:	2006      	movs	r0, #6
 800843c:	f000 fa0c 	bl	8008858 <raise>
 8008440:	2001      	movs	r0, #1
 8008442:	f7f9 fb2d 	bl	8001aa0 <_exit>

08008446 <_malloc_usable_size_r>:
 8008446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844a:	1f18      	subs	r0, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfbc      	itt	lt
 8008450:	580b      	ldrlt	r3, [r1, r0]
 8008452:	18c0      	addlt	r0, r0, r3
 8008454:	4770      	bx	lr

08008456 <__sfputc_r>:
 8008456:	6893      	ldr	r3, [r2, #8]
 8008458:	3b01      	subs	r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	b410      	push	{r4}
 800845e:	6093      	str	r3, [r2, #8]
 8008460:	da08      	bge.n	8008474 <__sfputc_r+0x1e>
 8008462:	6994      	ldr	r4, [r2, #24]
 8008464:	42a3      	cmp	r3, r4
 8008466:	db01      	blt.n	800846c <__sfputc_r+0x16>
 8008468:	290a      	cmp	r1, #10
 800846a:	d103      	bne.n	8008474 <__sfputc_r+0x1e>
 800846c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008470:	f000 b934 	b.w	80086dc <__swbuf_r>
 8008474:	6813      	ldr	r3, [r2, #0]
 8008476:	1c58      	adds	r0, r3, #1
 8008478:	6010      	str	r0, [r2, #0]
 800847a:	7019      	strb	r1, [r3, #0]
 800847c:	4608      	mov	r0, r1
 800847e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008482:	4770      	bx	lr

08008484 <__sfputs_r>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	4614      	mov	r4, r2
 800848c:	18d5      	adds	r5, r2, r3
 800848e:	42ac      	cmp	r4, r5
 8008490:	d101      	bne.n	8008496 <__sfputs_r+0x12>
 8008492:	2000      	movs	r0, #0
 8008494:	e007      	b.n	80084a6 <__sfputs_r+0x22>
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	463a      	mov	r2, r7
 800849c:	4630      	mov	r0, r6
 800849e:	f7ff ffda 	bl	8008456 <__sfputc_r>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d1f3      	bne.n	800848e <__sfputs_r+0xa>
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084a8 <_vfiprintf_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	460d      	mov	r5, r1
 80084ae:	b09d      	sub	sp, #116	; 0x74
 80084b0:	4614      	mov	r4, r2
 80084b2:	4698      	mov	r8, r3
 80084b4:	4606      	mov	r6, r0
 80084b6:	b118      	cbz	r0, 80084c0 <_vfiprintf_r+0x18>
 80084b8:	6a03      	ldr	r3, [r0, #32]
 80084ba:	b90b      	cbnz	r3, 80084c0 <_vfiprintf_r+0x18>
 80084bc:	f7fe f8c6 	bl	800664c <__sinit>
 80084c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	d405      	bmi.n	80084d2 <_vfiprintf_r+0x2a>
 80084c6:	89ab      	ldrh	r3, [r5, #12]
 80084c8:	059a      	lsls	r2, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_vfiprintf_r+0x2a>
 80084cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ce:	f7fe f9e7 	bl	80068a0 <__retarget_lock_acquire_recursive>
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	071b      	lsls	r3, r3, #28
 80084d6:	d501      	bpl.n	80084dc <_vfiprintf_r+0x34>
 80084d8:	692b      	ldr	r3, [r5, #16]
 80084da:	b99b      	cbnz	r3, 8008504 <_vfiprintf_r+0x5c>
 80084dc:	4629      	mov	r1, r5
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 f93a 	bl	8008758 <__swsetup_r>
 80084e4:	b170      	cbz	r0, 8008504 <_vfiprintf_r+0x5c>
 80084e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e8:	07dc      	lsls	r4, r3, #31
 80084ea:	d504      	bpl.n	80084f6 <_vfiprintf_r+0x4e>
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	b01d      	add	sp, #116	; 0x74
 80084f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	0598      	lsls	r0, r3, #22
 80084fa:	d4f7      	bmi.n	80084ec <_vfiprintf_r+0x44>
 80084fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084fe:	f7fe f9d0 	bl	80068a2 <__retarget_lock_release_recursive>
 8008502:	e7f3      	b.n	80084ec <_vfiprintf_r+0x44>
 8008504:	2300      	movs	r3, #0
 8008506:	9309      	str	r3, [sp, #36]	; 0x24
 8008508:	2320      	movs	r3, #32
 800850a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800850e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008512:	2330      	movs	r3, #48	; 0x30
 8008514:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086c8 <_vfiprintf_r+0x220>
 8008518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800851c:	f04f 0901 	mov.w	r9, #1
 8008520:	4623      	mov	r3, r4
 8008522:	469a      	mov	sl, r3
 8008524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008528:	b10a      	cbz	r2, 800852e <_vfiprintf_r+0x86>
 800852a:	2a25      	cmp	r2, #37	; 0x25
 800852c:	d1f9      	bne.n	8008522 <_vfiprintf_r+0x7a>
 800852e:	ebba 0b04 	subs.w	fp, sl, r4
 8008532:	d00b      	beq.n	800854c <_vfiprintf_r+0xa4>
 8008534:	465b      	mov	r3, fp
 8008536:	4622      	mov	r2, r4
 8008538:	4629      	mov	r1, r5
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ffa2 	bl	8008484 <__sfputs_r>
 8008540:	3001      	adds	r0, #1
 8008542:	f000 80a9 	beq.w	8008698 <_vfiprintf_r+0x1f0>
 8008546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008548:	445a      	add	r2, fp
 800854a:	9209      	str	r2, [sp, #36]	; 0x24
 800854c:	f89a 3000 	ldrb.w	r3, [sl]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 80a1 	beq.w	8008698 <_vfiprintf_r+0x1f0>
 8008556:	2300      	movs	r3, #0
 8008558:	f04f 32ff 	mov.w	r2, #4294967295
 800855c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008560:	f10a 0a01 	add.w	sl, sl, #1
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856c:	931a      	str	r3, [sp, #104]	; 0x68
 800856e:	4654      	mov	r4, sl
 8008570:	2205      	movs	r2, #5
 8008572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008576:	4854      	ldr	r0, [pc, #336]	; (80086c8 <_vfiprintf_r+0x220>)
 8008578:	f7f7 fe42 	bl	8000200 <memchr>
 800857c:	9a04      	ldr	r2, [sp, #16]
 800857e:	b9d8      	cbnz	r0, 80085b8 <_vfiprintf_r+0x110>
 8008580:	06d1      	lsls	r1, r2, #27
 8008582:	bf44      	itt	mi
 8008584:	2320      	movmi	r3, #32
 8008586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858a:	0713      	lsls	r3, r2, #28
 800858c:	bf44      	itt	mi
 800858e:	232b      	movmi	r3, #43	; 0x2b
 8008590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008594:	f89a 3000 	ldrb.w	r3, [sl]
 8008598:	2b2a      	cmp	r3, #42	; 0x2a
 800859a:	d015      	beq.n	80085c8 <_vfiprintf_r+0x120>
 800859c:	9a07      	ldr	r2, [sp, #28]
 800859e:	4654      	mov	r4, sl
 80085a0:	2000      	movs	r0, #0
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4621      	mov	r1, r4
 80085a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ac:	3b30      	subs	r3, #48	; 0x30
 80085ae:	2b09      	cmp	r3, #9
 80085b0:	d94d      	bls.n	800864e <_vfiprintf_r+0x1a6>
 80085b2:	b1b0      	cbz	r0, 80085e2 <_vfiprintf_r+0x13a>
 80085b4:	9207      	str	r2, [sp, #28]
 80085b6:	e014      	b.n	80085e2 <_vfiprintf_r+0x13a>
 80085b8:	eba0 0308 	sub.w	r3, r0, r8
 80085bc:	fa09 f303 	lsl.w	r3, r9, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	46a2      	mov	sl, r4
 80085c6:	e7d2      	b.n	800856e <_vfiprintf_r+0xc6>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	1d19      	adds	r1, r3, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	9103      	str	r1, [sp, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bfbb      	ittet	lt
 80085d4:	425b      	neglt	r3, r3
 80085d6:	f042 0202 	orrlt.w	r2, r2, #2
 80085da:	9307      	strge	r3, [sp, #28]
 80085dc:	9307      	strlt	r3, [sp, #28]
 80085de:	bfb8      	it	lt
 80085e0:	9204      	strlt	r2, [sp, #16]
 80085e2:	7823      	ldrb	r3, [r4, #0]
 80085e4:	2b2e      	cmp	r3, #46	; 0x2e
 80085e6:	d10c      	bne.n	8008602 <_vfiprintf_r+0x15a>
 80085e8:	7863      	ldrb	r3, [r4, #1]
 80085ea:	2b2a      	cmp	r3, #42	; 0x2a
 80085ec:	d134      	bne.n	8008658 <_vfiprintf_r+0x1b0>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	9203      	str	r2, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfb8      	it	lt
 80085fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fe:	3402      	adds	r4, #2
 8008600:	9305      	str	r3, [sp, #20]
 8008602:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086d8 <_vfiprintf_r+0x230>
 8008606:	7821      	ldrb	r1, [r4, #0]
 8008608:	2203      	movs	r2, #3
 800860a:	4650      	mov	r0, sl
 800860c:	f7f7 fdf8 	bl	8000200 <memchr>
 8008610:	b138      	cbz	r0, 8008622 <_vfiprintf_r+0x17a>
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	eba0 000a 	sub.w	r0, r0, sl
 8008618:	2240      	movs	r2, #64	; 0x40
 800861a:	4082      	lsls	r2, r0
 800861c:	4313      	orrs	r3, r2
 800861e:	3401      	adds	r4, #1
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4829      	ldr	r0, [pc, #164]	; (80086cc <_vfiprintf_r+0x224>)
 8008628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800862c:	2206      	movs	r2, #6
 800862e:	f7f7 fde7 	bl	8000200 <memchr>
 8008632:	2800      	cmp	r0, #0
 8008634:	d03f      	beq.n	80086b6 <_vfiprintf_r+0x20e>
 8008636:	4b26      	ldr	r3, [pc, #152]	; (80086d0 <_vfiprintf_r+0x228>)
 8008638:	bb1b      	cbnz	r3, 8008682 <_vfiprintf_r+0x1da>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	3307      	adds	r3, #7
 800863e:	f023 0307 	bic.w	r3, r3, #7
 8008642:	3308      	adds	r3, #8
 8008644:	9303      	str	r3, [sp, #12]
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	443b      	add	r3, r7
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	e768      	b.n	8008520 <_vfiprintf_r+0x78>
 800864e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008652:	460c      	mov	r4, r1
 8008654:	2001      	movs	r0, #1
 8008656:	e7a6      	b.n	80085a6 <_vfiprintf_r+0xfe>
 8008658:	2300      	movs	r3, #0
 800865a:	3401      	adds	r4, #1
 800865c:	9305      	str	r3, [sp, #20]
 800865e:	4619      	mov	r1, r3
 8008660:	f04f 0c0a 	mov.w	ip, #10
 8008664:	4620      	mov	r0, r4
 8008666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866a:	3a30      	subs	r2, #48	; 0x30
 800866c:	2a09      	cmp	r2, #9
 800866e:	d903      	bls.n	8008678 <_vfiprintf_r+0x1d0>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0c6      	beq.n	8008602 <_vfiprintf_r+0x15a>
 8008674:	9105      	str	r1, [sp, #20]
 8008676:	e7c4      	b.n	8008602 <_vfiprintf_r+0x15a>
 8008678:	fb0c 2101 	mla	r1, ip, r1, r2
 800867c:	4604      	mov	r4, r0
 800867e:	2301      	movs	r3, #1
 8008680:	e7f0      	b.n	8008664 <_vfiprintf_r+0x1bc>
 8008682:	ab03      	add	r3, sp, #12
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	462a      	mov	r2, r5
 8008688:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <_vfiprintf_r+0x22c>)
 800868a:	a904      	add	r1, sp, #16
 800868c:	4630      	mov	r0, r6
 800868e:	f7fd fb9d 	bl	8005dcc <_printf_float>
 8008692:	4607      	mov	r7, r0
 8008694:	1c78      	adds	r0, r7, #1
 8008696:	d1d6      	bne.n	8008646 <_vfiprintf_r+0x19e>
 8008698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800869a:	07d9      	lsls	r1, r3, #31
 800869c:	d405      	bmi.n	80086aa <_vfiprintf_r+0x202>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	059a      	lsls	r2, r3, #22
 80086a2:	d402      	bmi.n	80086aa <_vfiprintf_r+0x202>
 80086a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086a6:	f7fe f8fc 	bl	80068a2 <__retarget_lock_release_recursive>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	065b      	lsls	r3, r3, #25
 80086ae:	f53f af1d 	bmi.w	80084ec <_vfiprintf_r+0x44>
 80086b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b4:	e71c      	b.n	80084f0 <_vfiprintf_r+0x48>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_vfiprintf_r+0x22c>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7fd fe27 	bl	8006314 <_printf_i>
 80086c6:	e7e4      	b.n	8008692 <_vfiprintf_r+0x1ea>
 80086c8:	08008c5c 	.word	0x08008c5c
 80086cc:	08008c66 	.word	0x08008c66
 80086d0:	08005dcd 	.word	0x08005dcd
 80086d4:	08008485 	.word	0x08008485
 80086d8:	08008c62 	.word	0x08008c62

080086dc <__swbuf_r>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	460e      	mov	r6, r1
 80086e0:	4614      	mov	r4, r2
 80086e2:	4605      	mov	r5, r0
 80086e4:	b118      	cbz	r0, 80086ee <__swbuf_r+0x12>
 80086e6:	6a03      	ldr	r3, [r0, #32]
 80086e8:	b90b      	cbnz	r3, 80086ee <__swbuf_r+0x12>
 80086ea:	f7fd ffaf 	bl	800664c <__sinit>
 80086ee:	69a3      	ldr	r3, [r4, #24]
 80086f0:	60a3      	str	r3, [r4, #8]
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	071a      	lsls	r2, r3, #28
 80086f6:	d525      	bpl.n	8008744 <__swbuf_r+0x68>
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	b31b      	cbz	r3, 8008744 <__swbuf_r+0x68>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	6922      	ldr	r2, [r4, #16]
 8008700:	1a98      	subs	r0, r3, r2
 8008702:	6963      	ldr	r3, [r4, #20]
 8008704:	b2f6      	uxtb	r6, r6
 8008706:	4283      	cmp	r3, r0
 8008708:	4637      	mov	r7, r6
 800870a:	dc04      	bgt.n	8008716 <__swbuf_r+0x3a>
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	f7ff fd9e 	bl	8008250 <_fflush_r>
 8008714:	b9e0      	cbnz	r0, 8008750 <__swbuf_r+0x74>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	3b01      	subs	r3, #1
 800871a:	60a3      	str	r3, [r4, #8]
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	701e      	strb	r6, [r3, #0]
 8008724:	6962      	ldr	r2, [r4, #20]
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	429a      	cmp	r2, r3
 800872a:	d004      	beq.n	8008736 <__swbuf_r+0x5a>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	07db      	lsls	r3, r3, #31
 8008730:	d506      	bpl.n	8008740 <__swbuf_r+0x64>
 8008732:	2e0a      	cmp	r6, #10
 8008734:	d104      	bne.n	8008740 <__swbuf_r+0x64>
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fd89 	bl	8008250 <_fflush_r>
 800873e:	b938      	cbnz	r0, 8008750 <__swbuf_r+0x74>
 8008740:	4638      	mov	r0, r7
 8008742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f806 	bl	8008758 <__swsetup_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	d0d5      	beq.n	80086fc <__swbuf_r+0x20>
 8008750:	f04f 37ff 	mov.w	r7, #4294967295
 8008754:	e7f4      	b.n	8008740 <__swbuf_r+0x64>
	...

08008758 <__swsetup_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <__swsetup_r+0xac>)
 800875c:	4605      	mov	r5, r0
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	460c      	mov	r4, r1
 8008762:	b118      	cbz	r0, 800876c <__swsetup_r+0x14>
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	b90b      	cbnz	r3, 800876c <__swsetup_r+0x14>
 8008768:	f7fd ff70 	bl	800664c <__sinit>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008772:	0718      	lsls	r0, r3, #28
 8008774:	d422      	bmi.n	80087bc <__swsetup_r+0x64>
 8008776:	06d9      	lsls	r1, r3, #27
 8008778:	d407      	bmi.n	800878a <__swsetup_r+0x32>
 800877a:	2309      	movs	r3, #9
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e034      	b.n	80087f4 <__swsetup_r+0x9c>
 800878a:	0758      	lsls	r0, r3, #29
 800878c:	d512      	bpl.n	80087b4 <__swsetup_r+0x5c>
 800878e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008790:	b141      	cbz	r1, 80087a4 <__swsetup_r+0x4c>
 8008792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008796:	4299      	cmp	r1, r3
 8008798:	d002      	beq.n	80087a0 <__swsetup_r+0x48>
 800879a:	4628      	mov	r0, r5
 800879c:	f7fe fefe 	bl	800759c <_free_r>
 80087a0:	2300      	movs	r3, #0
 80087a2:	6363      	str	r3, [r4, #52]	; 0x34
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	2300      	movs	r3, #0
 80087ae:	6063      	str	r3, [r4, #4]
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f043 0308 	orr.w	r3, r3, #8
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	b94b      	cbnz	r3, 80087d4 <__swsetup_r+0x7c>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ca:	d003      	beq.n	80087d4 <__swsetup_r+0x7c>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 f884 	bl	80088dc <__smakebuf_r>
 80087d4:	89a0      	ldrh	r0, [r4, #12]
 80087d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087da:	f010 0301 	ands.w	r3, r0, #1
 80087de:	d00a      	beq.n	80087f6 <__swsetup_r+0x9e>
 80087e0:	2300      	movs	r3, #0
 80087e2:	60a3      	str	r3, [r4, #8]
 80087e4:	6963      	ldr	r3, [r4, #20]
 80087e6:	425b      	negs	r3, r3
 80087e8:	61a3      	str	r3, [r4, #24]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	b943      	cbnz	r3, 8008800 <__swsetup_r+0xa8>
 80087ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087f2:	d1c4      	bne.n	800877e <__swsetup_r+0x26>
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	0781      	lsls	r1, r0, #30
 80087f8:	bf58      	it	pl
 80087fa:	6963      	ldrpl	r3, [r4, #20]
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	e7f4      	b.n	80087ea <__swsetup_r+0x92>
 8008800:	2000      	movs	r0, #0
 8008802:	e7f7      	b.n	80087f4 <__swsetup_r+0x9c>
 8008804:	20000064 	.word	0x20000064

08008808 <_raise_r>:
 8008808:	291f      	cmp	r1, #31
 800880a:	b538      	push	{r3, r4, r5, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	d904      	bls.n	800881c <_raise_r+0x14>
 8008812:	2316      	movs	r3, #22
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800881e:	b112      	cbz	r2, 8008826 <_raise_r+0x1e>
 8008820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008824:	b94b      	cbnz	r3, 800883a <_raise_r+0x32>
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f830 	bl	800888c <_getpid_r>
 800882c:	462a      	mov	r2, r5
 800882e:	4601      	mov	r1, r0
 8008830:	4620      	mov	r0, r4
 8008832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008836:	f000 b817 	b.w	8008868 <_kill_r>
 800883a:	2b01      	cmp	r3, #1
 800883c:	d00a      	beq.n	8008854 <_raise_r+0x4c>
 800883e:	1c59      	adds	r1, r3, #1
 8008840:	d103      	bne.n	800884a <_raise_r+0x42>
 8008842:	2316      	movs	r3, #22
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	2001      	movs	r0, #1
 8008848:	e7e7      	b.n	800881a <_raise_r+0x12>
 800884a:	2400      	movs	r4, #0
 800884c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008850:	4628      	mov	r0, r5
 8008852:	4798      	blx	r3
 8008854:	2000      	movs	r0, #0
 8008856:	e7e0      	b.n	800881a <_raise_r+0x12>

08008858 <raise>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <raise+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f7ff bfd3 	b.w	8008808 <_raise_r>
 8008862:	bf00      	nop
 8008864:	20000064 	.word	0x20000064

08008868 <_kill_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_kill_r+0x20>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	4611      	mov	r1, r2
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	f7f9 f903 	bl	8001a80 <_kill>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d102      	bne.n	8008884 <_kill_r+0x1c>
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	b103      	cbz	r3, 8008884 <_kill_r+0x1c>
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	bf00      	nop
 8008888:	200009fc 	.word	0x200009fc

0800888c <_getpid_r>:
 800888c:	f7f9 b8f0 	b.w	8001a70 <_getpid>

08008890 <__swhatbuf_r>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	460c      	mov	r4, r1
 8008894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008898:	2900      	cmp	r1, #0
 800889a:	b096      	sub	sp, #88	; 0x58
 800889c:	4615      	mov	r5, r2
 800889e:	461e      	mov	r6, r3
 80088a0:	da0d      	bge.n	80088be <__swhatbuf_r+0x2e>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088a8:	f04f 0100 	mov.w	r1, #0
 80088ac:	bf0c      	ite	eq
 80088ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088b2:	2340      	movne	r3, #64	; 0x40
 80088b4:	2000      	movs	r0, #0
 80088b6:	6031      	str	r1, [r6, #0]
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	b016      	add	sp, #88	; 0x58
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	466a      	mov	r2, sp
 80088c0:	f000 f848 	bl	8008954 <_fstat_r>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dbec      	blt.n	80088a2 <__swhatbuf_r+0x12>
 80088c8:	9901      	ldr	r1, [sp, #4]
 80088ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088d2:	4259      	negs	r1, r3
 80088d4:	4159      	adcs	r1, r3
 80088d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088da:	e7eb      	b.n	80088b4 <__swhatbuf_r+0x24>

080088dc <__smakebuf_r>:
 80088dc:	898b      	ldrh	r3, [r1, #12]
 80088de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088e0:	079d      	lsls	r5, r3, #30
 80088e2:	4606      	mov	r6, r0
 80088e4:	460c      	mov	r4, r1
 80088e6:	d507      	bpl.n	80088f8 <__smakebuf_r+0x1c>
 80088e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	2301      	movs	r3, #1
 80088f2:	6163      	str	r3, [r4, #20]
 80088f4:	b002      	add	sp, #8
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	ab01      	add	r3, sp, #4
 80088fa:	466a      	mov	r2, sp
 80088fc:	f7ff ffc8 	bl	8008890 <__swhatbuf_r>
 8008900:	9900      	ldr	r1, [sp, #0]
 8008902:	4605      	mov	r5, r0
 8008904:	4630      	mov	r0, r6
 8008906:	f7fe febd 	bl	8007684 <_malloc_r>
 800890a:	b948      	cbnz	r0, 8008920 <__smakebuf_r+0x44>
 800890c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d4ef      	bmi.n	80088f4 <__smakebuf_r+0x18>
 8008914:	f023 0303 	bic.w	r3, r3, #3
 8008918:	f043 0302 	orr.w	r3, r3, #2
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	e7e3      	b.n	80088e8 <__smakebuf_r+0xc>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	6163      	str	r3, [r4, #20]
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	6120      	str	r0, [r4, #16]
 8008932:	b15b      	cbz	r3, 800894c <__smakebuf_r+0x70>
 8008934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008938:	4630      	mov	r0, r6
 800893a:	f000 f81d 	bl	8008978 <_isatty_r>
 800893e:	b128      	cbz	r0, 800894c <__smakebuf_r+0x70>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f023 0303 	bic.w	r3, r3, #3
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	431d      	orrs	r5, r3
 8008950:	81a5      	strh	r5, [r4, #12]
 8008952:	e7cf      	b.n	80088f4 <__smakebuf_r+0x18>

08008954 <_fstat_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_fstat_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f9 f8ec 	bl	8001b3e <_fstat>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_fstat_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_fstat_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	200009fc 	.word	0x200009fc

08008978 <_isatty_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d06      	ldr	r5, [pc, #24]	; (8008994 <_isatty_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f9 f8eb 	bl	8001b5e <_isatty>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_isatty_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_isatty_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200009fc 	.word	0x200009fc

08008998 <_init>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr

080089a4 <_fini>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr
